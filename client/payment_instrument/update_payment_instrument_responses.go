// Code generated by go-swagger; DO NOT EDIT.

package payment_instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePaymentInstrumentReader is a Reader for the UpdatePaymentInstrument structure.
type UpdatePaymentInstrumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePaymentInstrumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePaymentInstrumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePaymentInstrumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePaymentInstrumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePaymentInstrumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewUpdatePaymentInstrumentGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewUpdatePaymentInstrumentFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePaymentInstrumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdatePaymentInstrumentOK creates a UpdatePaymentInstrumentOK with default headers values
func NewUpdatePaymentInstrumentOK() *UpdatePaymentInstrumentOK {
	return &UpdatePaymentInstrumentOK{}
}

/*UpdatePaymentInstrumentOK handles this case with default header values.

The updated Payment Instrument has been returned.
*/
type UpdatePaymentInstrumentOK struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload *UpdatePaymentInstrumentOKBody
}

func (o *UpdatePaymentInstrumentOK) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/paymentinstruments/{tokenId}][%d] updatePaymentInstrumentOK  %+v", 200, o.Payload)
}

func (o *UpdatePaymentInstrumentOK) GetPayload() *UpdatePaymentInstrumentOKBody {
	return o.Payload
}

func (o *UpdatePaymentInstrumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	o.Payload = new(UpdatePaymentInstrumentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePaymentInstrumentBadRequest creates a UpdatePaymentInstrumentBadRequest with default headers values
func NewUpdatePaymentInstrumentBadRequest() *UpdatePaymentInstrumentBadRequest {
	return &UpdatePaymentInstrumentBadRequest{}
}

/*UpdatePaymentInstrumentBadRequest handles this case with default header values.

Bad Request. A required header value could be missing.
*/
type UpdatePaymentInstrumentBadRequest struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdatePaymentInstrumentBadRequestBodyItems0
}

func (o *UpdatePaymentInstrumentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/paymentinstruments/{tokenId}][%d] updatePaymentInstrumentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePaymentInstrumentBadRequest) GetPayload() []*UpdatePaymentInstrumentBadRequestBodyItems0 {
	return o.Payload
}

func (o *UpdatePaymentInstrumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePaymentInstrumentForbidden creates a UpdatePaymentInstrumentForbidden with default headers values
func NewUpdatePaymentInstrumentForbidden() *UpdatePaymentInstrumentForbidden {
	return &UpdatePaymentInstrumentForbidden{}
}

/*UpdatePaymentInstrumentForbidden handles this case with default header values.

Forbidden. The profile might not have permission to perform the token operation.
*/
type UpdatePaymentInstrumentForbidden struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdatePaymentInstrumentForbiddenBodyItems0
}

func (o *UpdatePaymentInstrumentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/paymentinstruments/{tokenId}][%d] updatePaymentInstrumentForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePaymentInstrumentForbidden) GetPayload() []*UpdatePaymentInstrumentForbiddenBodyItems0 {
	return o.Payload
}

func (o *UpdatePaymentInstrumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePaymentInstrumentNotFound creates a UpdatePaymentInstrumentNotFound with default headers values
func NewUpdatePaymentInstrumentNotFound() *UpdatePaymentInstrumentNotFound {
	return &UpdatePaymentInstrumentNotFound{}
}

/*UpdatePaymentInstrumentNotFound handles this case with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type UpdatePaymentInstrumentNotFound struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdatePaymentInstrumentNotFoundBodyItems0
}

func (o *UpdatePaymentInstrumentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/paymentinstruments/{tokenId}][%d] updatePaymentInstrumentNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePaymentInstrumentNotFound) GetPayload() []*UpdatePaymentInstrumentNotFoundBodyItems0 {
	return o.Payload
}

func (o *UpdatePaymentInstrumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePaymentInstrumentGone creates a UpdatePaymentInstrumentGone with default headers values
func NewUpdatePaymentInstrumentGone() *UpdatePaymentInstrumentGone {
	return &UpdatePaymentInstrumentGone{}
}

/*UpdatePaymentInstrumentGone handles this case with default header values.

Token Not Available. The token has been deleted.
*/
type UpdatePaymentInstrumentGone struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdatePaymentInstrumentGoneBodyItems0
}

func (o *UpdatePaymentInstrumentGone) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/paymentinstruments/{tokenId}][%d] updatePaymentInstrumentGone  %+v", 410, o.Payload)
}

func (o *UpdatePaymentInstrumentGone) GetPayload() []*UpdatePaymentInstrumentGoneBodyItems0 {
	return o.Payload
}

func (o *UpdatePaymentInstrumentGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePaymentInstrumentFailedDependency creates a UpdatePaymentInstrumentFailedDependency with default headers values
func NewUpdatePaymentInstrumentFailedDependency() *UpdatePaymentInstrumentFailedDependency {
	return &UpdatePaymentInstrumentFailedDependency{}
}

/*UpdatePaymentInstrumentFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type UpdatePaymentInstrumentFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdatePaymentInstrumentFailedDependencyBodyItems0
}

func (o *UpdatePaymentInstrumentFailedDependency) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/paymentinstruments/{tokenId}][%d] updatePaymentInstrumentFailedDependency  %+v", 424, o.Payload)
}

func (o *UpdatePaymentInstrumentFailedDependency) GetPayload() []*UpdatePaymentInstrumentFailedDependencyBodyItems0 {
	return o.Payload
}

func (o *UpdatePaymentInstrumentFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePaymentInstrumentInternalServerError creates a UpdatePaymentInstrumentInternalServerError with default headers values
func NewUpdatePaymentInstrumentInternalServerError() *UpdatePaymentInstrumentInternalServerError {
	return &UpdatePaymentInstrumentInternalServerError{}
}

/*UpdatePaymentInstrumentInternalServerError handles this case with default header values.

Unexpected error.
*/
type UpdatePaymentInstrumentInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdatePaymentInstrumentInternalServerErrorBodyItems0
}

func (o *UpdatePaymentInstrumentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/paymentinstruments/{tokenId}][%d] updatePaymentInstrumentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdatePaymentInstrumentInternalServerError) GetPayload() []*UpdatePaymentInstrumentInternalServerErrorBodyItems0 {
	return o.Payload
}

func (o *UpdatePaymentInstrumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdatePaymentInstrumentBadRequestBodyItems0 update payment instrument bad request body items0
swagger:model UpdatePaymentInstrumentBadRequestBodyItems0
*/
type UpdatePaymentInstrumentBadRequestBodyItems0 struct {

	// details
	Details *UpdatePaymentInstrumentBadRequestBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument bad request body items0
func (o *UpdatePaymentInstrumentBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentBadRequestBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentBadRequestBodyItems0Details update payment instrument bad request body items0 details
swagger:model UpdatePaymentInstrumentBadRequestBodyItems0Details
*/
type UpdatePaymentInstrumentBadRequestBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update payment instrument bad request body items0 details
func (o *UpdatePaymentInstrumentBadRequestBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentBadRequestBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentBadRequestBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentBadRequestBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentBody update payment instrument body
swagger:model UpdatePaymentInstrumentBody
*/
type UpdatePaymentInstrumentBody struct {

	// links
	Links *UpdatePaymentInstrumentParamsBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *UpdatePaymentInstrumentParamsBodyBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *UpdatePaymentInstrumentParamsBodyBillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *UpdatePaymentInstrumentParamsBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *UpdatePaymentInstrumentParamsBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *UpdatePaymentInstrumentParamsBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// meta data
	MetaData *UpdatePaymentInstrumentParamsBodyMetaData `json:"metaData,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *UpdatePaymentInstrumentParamsBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this update payment instrument body
func (o *UpdatePaymentInstrumentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentBody) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentBody) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentBody) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentBody) validateMetaData(formats strfmt.Registry) error {

	if swag.IsZero(o.MetaData) { // not required
		return nil
	}

	if o.MetaData != nil {
		if err := o.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "metaData")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentBody) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentFailedDependencyBodyItems0 update payment instrument failed dependency body items0
swagger:model UpdatePaymentInstrumentFailedDependencyBodyItems0
*/
type UpdatePaymentInstrumentFailedDependencyBodyItems0 struct {

	// details
	Details *UpdatePaymentInstrumentFailedDependencyBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument failed dependency body items0
func (o *UpdatePaymentInstrumentFailedDependencyBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentFailedDependencyBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentFailedDependencyBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentFailedDependencyBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentFailedDependencyBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentFailedDependencyBodyItems0Details update payment instrument failed dependency body items0 details
swagger:model UpdatePaymentInstrumentFailedDependencyBodyItems0Details
*/
type UpdatePaymentInstrumentFailedDependencyBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update payment instrument failed dependency body items0 details
func (o *UpdatePaymentInstrumentFailedDependencyBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentFailedDependencyBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentFailedDependencyBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentFailedDependencyBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentForbiddenBodyItems0 update payment instrument forbidden body items0
swagger:model UpdatePaymentInstrumentForbiddenBodyItems0
*/
type UpdatePaymentInstrumentForbiddenBodyItems0 struct {

	// details
	Details *UpdatePaymentInstrumentForbiddenBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument forbidden body items0
func (o *UpdatePaymentInstrumentForbiddenBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentForbiddenBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentForbiddenBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentForbiddenBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentForbiddenBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentForbiddenBodyItems0Details update payment instrument forbidden body items0 details
swagger:model UpdatePaymentInstrumentForbiddenBodyItems0Details
*/
type UpdatePaymentInstrumentForbiddenBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update payment instrument forbidden body items0 details
func (o *UpdatePaymentInstrumentForbiddenBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentForbiddenBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentForbiddenBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentForbiddenBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentGoneBodyItems0 update payment instrument gone body items0
swagger:model UpdatePaymentInstrumentGoneBodyItems0
*/
type UpdatePaymentInstrumentGoneBodyItems0 struct {

	// details
	Details *UpdatePaymentInstrumentGoneBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument gone body items0
func (o *UpdatePaymentInstrumentGoneBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentGoneBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentGoneBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentGoneBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentGoneBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentGoneBodyItems0Details update payment instrument gone body items0 details
swagger:model UpdatePaymentInstrumentGoneBodyItems0Details
*/
type UpdatePaymentInstrumentGoneBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update payment instrument gone body items0 details
func (o *UpdatePaymentInstrumentGoneBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentGoneBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentGoneBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentGoneBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentInternalServerErrorBodyItems0 update payment instrument internal server error body items0
swagger:model UpdatePaymentInstrumentInternalServerErrorBodyItems0
*/
type UpdatePaymentInstrumentInternalServerErrorBodyItems0 struct {

	// details
	Details *UpdatePaymentInstrumentInternalServerErrorBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument internal server error body items0
func (o *UpdatePaymentInstrumentInternalServerErrorBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentInternalServerErrorBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentInternalServerErrorBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentInternalServerErrorBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentInternalServerErrorBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentInternalServerErrorBodyItems0Details update payment instrument internal server error body items0 details
swagger:model UpdatePaymentInstrumentInternalServerErrorBodyItems0Details
*/
type UpdatePaymentInstrumentInternalServerErrorBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update payment instrument internal server error body items0 details
func (o *UpdatePaymentInstrumentInternalServerErrorBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentInternalServerErrorBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentInternalServerErrorBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentInternalServerErrorBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentNotFoundBodyItems0 update payment instrument not found body items0
swagger:model UpdatePaymentInstrumentNotFoundBodyItems0
*/
type UpdatePaymentInstrumentNotFoundBodyItems0 struct {

	// details
	Details *UpdatePaymentInstrumentNotFoundBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument not found body items0
func (o *UpdatePaymentInstrumentNotFoundBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentNotFoundBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentNotFoundBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentNotFoundBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentNotFoundBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentNotFoundBodyItems0Details update payment instrument not found body items0 details
swagger:model UpdatePaymentInstrumentNotFoundBodyItems0Details
*/
type UpdatePaymentInstrumentNotFoundBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update payment instrument not found body items0 details
func (o *UpdatePaymentInstrumentNotFoundBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentNotFoundBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentNotFoundBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentNotFoundBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBody tmsV1PaymentinstrumentsPatch200Response
swagger:model UpdatePaymentInstrumentOKBody
*/
type UpdatePaymentInstrumentOKBody struct {

	// links
	Links *UpdatePaymentInstrumentOKBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *UpdatePaymentInstrumentOKBodyBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *UpdatePaymentInstrumentOKBodyBillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *UpdatePaymentInstrumentOKBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *UpdatePaymentInstrumentOKBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *UpdatePaymentInstrumentOKBodyInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *UpdatePaymentInstrumentOKBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// meta data
	MetaData *UpdatePaymentInstrumentOKBodyMetaData `json:"metaData,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *UpdatePaymentInstrumentOKBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this update payment instrument o k body
func (o *UpdatePaymentInstrumentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateMetaData(formats strfmt.Registry) error {

	if swag.IsZero(o.MetaData) { // not required
		return nil
	}

	if o.MetaData != nil {
		if err := o.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "metaData")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBody) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyBankAccount update payment instrument o k body bank account
swagger:model UpdatePaymentInstrumentOKBodyBankAccount
*/
type UpdatePaymentInstrumentOKBodyBankAccount struct {

	// Checking account type. Possible values:
	//   * C: checking
	//   * S: savings (USD only)
	//   * X: corporate checking (USD only)
	//   * G: general ledger
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument o k body bank account
func (o *UpdatePaymentInstrumentOKBodyBankAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyBillTo update payment instrument o k body bill to
swagger:model UpdatePaymentInstrumentOKBodyBillTo
*/
type UpdatePaymentInstrumentOKBodyBillTo struct {

	// First line of the billing street address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. For an address in the U.S. or Canada, use the State, Province, and Territory Codes for the United States and Canada.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the billing address. Accepts input in the ISO 3166-1 standard, stores as ISO 3166-1-Alpha-2.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 3
	// Min Length: 2
	Country string `json:"country,omitempty"`

	// Customer’s email address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// Customer’s first name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the billing address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer phone number. When you create a customer profile, the requirements depend on the payment method:
	//   * Credit cards — optional.
	//   * Electronic checks — contact your payment processor representative to find out if this field is required or optional.
	//   * PINless debits — optional.
	//
	// Max Length: 32
	// Min Length: 6
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	// **Example** 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space]
	// [numeric][alpha][numeric]
	// Example A1B 2C3
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this update payment instrument o k body bill to
func (o *UpdatePaymentInstrumentOKBodyBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"country", "body", string(o.Country), 3); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"email", "body", string(o.Email), 320); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 32); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBillTo) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyBuyerInformation update payment instrument o k body buyer information
swagger:model UpdatePaymentInstrumentOKBodyBuyerInformation
*/
type UpdatePaymentInstrumentOKBodyBuyerInformation struct {

	// Tax identifier for the customer’s company.
	//
	// **Important**:
	// Contact your TeleCheck representative to find out whether this field is required or optional.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used by the customer. Accepts input in the ISO 4217 standard, stores as ISO 4217 Alpha.
	// Max Length: 3
	// Min Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer.
	//
	// Format: `YYYY-MM-DD` or `YYYYMMDD`
	//
	// Max Length: 10
	// Min Length: 8
	DateOBirth string `json:"dateOBirth,omitempty"`

	// personal identification
	PersonalIdentification []*UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this update payment instrument o k body buyer information
func (o *UpdatePaymentInstrumentOKBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"buyerInformation"+"."+"companyTaxID", "body", string(o.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBuyerInformation) validateDateOBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOBirth) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 10); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updatePaymentInstrumentOK" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 update payment instrument o k body buyer information personal identification items0
swagger:model UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0
*/
type UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 struct {

	// Customer's identification number.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// Type of personal identification.
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Valid values:
	// - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument o k body buyer information personal identification items0
func (o *UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy update payment instrument o k body buyer information personal identification items0 issued by
swagger:model UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy
*/
type UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// State or province in which the customer’s driver’s license was issued. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this update payment instrument o k body buyer information personal identification items0 issued by
func (o *UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyCard update payment instrument o k body card
swagger:model UpdatePaymentInstrumentOKBodyCard
*/
type UpdatePaymentInstrumentOKBodyCard struct {

	// Two-digit month in which the credit card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.
	//
	// Important:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 2
	// Min Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// **FDC Nashville Global and FDMS South**
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For details, see [Relaxed Requirements for Address Data and Expiration Date.](https://www.cybersource.com/developers/integration_methods/relax_avs/).
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.'
	//
	// Max Length: 4
	// Min Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder.
	// Max Length: 2
	// Min Length: 1
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `MM`.
	// Possible values: `01` through `12`.
	//
	// Max Length: 2
	// Min Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// Max Length: 4
	// Min Length: 4
	StartYear string `json:"startYear,omitempty"`

	// Type of credit card. Possible values:
	//   * **visa** -- Visa (001)
	//   * **mastercard** -- Mastercard (002) - Eurocard—European regional brand of Mastercard
	//   * **american express** -- American Express (003)
	//   * **discover** -- Discover (004)
	//   * **diners club** -- Diners Club (005)
	//   * **carte blanche** -- Carte Blanche (006)
	//   * **jcb** -- JCB (007)
	//   * **optima** -- Optima (008)
	//   * **twinpay credit** -- Twinpay Credit (011)
	//   * **twinpay debit** -- Twinpay Debit (012)
	//   * **walmart** -- Walmart (013)
	//   * **enroute** -- EnRoute (014)
	//   * **lowes consumer** -- Lowes consumer (015)
	//   * **home depot consumer** -- Home Depot consumer (016)
	//   * **mbna** -- MBNA (017)
	//   * **dicks sportswear** -- Dicks Sportswear (018)
	//   * **casual corner** -- Casual Corner (019)
	//   * **sears** -- Sears (020)
	//   * **jal** -- JAL (021)
	//   * **disney** -- Disney (023)
	//   * **maestro uk domestic** -- Maestro (024) - UK Domestic
	//   * **sams club consumer** -- Sams Club consumer (025)
	//   * **sams club business** -- Sams Club business (026)
	//   * **bill me later** -- Bill me later (028)
	//   * **bebe** -- Bebe (029)
	//   * **restoration hardware** -- Restoration Hardware (030)
	//   * **delta online** -- Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * **solo** -- Solo (032)
	//   * **visa electron** -- Visa Electron (033)
	//   * **dankort** -- Dankort (034)
	//   * **laser** -- Laser (035)
	//   * **carte bleue** -- Carte Bleue (036) — formerly Cartes Bancaires
	//   * **carta si** -- Carta Si (037)
	//   * **pinless debit** -- pinless debit (038)
	//   * **encoded account** -- encoded account (039)
	//   * **uatp** -- UATP (040)
	//   * **household** -- Household (041)
	//   * **maestro international** -- Maestro (042) - International
	//   * **ge money uk** -- GE Money UK (043)
	//   * **korean cards** -- Korean cards (044)
	//   * **style** -- Style (045)
	//   * **jcrew** -- JCrew (046)
	//   * **payease china processing ewallet** -- PayEase China processing eWallet (047)
	//   * **payease china processing bank transfer** -- PayEase China processing bank transfer (048)
	//   * **meijer private label** -- Meijer Private Label (049)
	//   * **hipercard** -- Hipercard (050) — supported only by the Comercio Latino processor.
	//   * **aura** -- Aura (051) — supported only by the Comercio Latino processor.
	//   * **redecard** -- Redecard (052)
	//   * **elo** -- Elo (054) — supported only by the Comercio Latino processor.
	//   * **capital one private label** -- Capital One Private Label (055)
	//   * **synchrony private label** -- Synchrony Private Label (056)
	//   * **costco private label** -- Costco Private Label (057)
	//   * **mada** -- mada (060)
	//   * **china union pay** -- China Union Pay (062)
	//   * **falabella private label** -- Falabella private label (063)
	//
	// Required: true
	Type *string `json:"type"`

	// Card Use As Field. Supported value of `pinless debit` only. Only for use with Pinless Debit tokens.
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this update payment instrument o k body card
func (o *UpdatePaymentInstrumentOKBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyCard) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyCard) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyCard) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyCard) validateType(formats strfmt.Registry) error {

	if err := validate.Required("updatePaymentInstrumentOK"+"."+"card"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyCard) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifier update payment instrument o k body instrument identifier
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifier
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifier struct {

	// links
	Links *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard `json:"card,omitempty"`

	// The ID of the existing instrument identifier to be linked to the newly created payment instrument.
	// Max Length: 32
	// Min Length: 16
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *UpdatePaymentInstrumentOKBodyInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 16); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 32); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount update payment instrument o k body instrument identifier bank account
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier bank account
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard update payment instrument o k body instrument identifier card
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier card
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks update payment instrument o k body instrument identifier links
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks struct {

	// ancestor
	Ancestor *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSelf `json:"self,omitempty"`

	// successor
	Successor *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier links
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor update payment instrument o k body instrument identifier links ancestor
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier links ancestor
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSelf update payment instrument o k body instrument identifier links self
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSelf
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier links self
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor update payment instrument o k body instrument identifier links successor
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier links successor
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierMetadata update payment instrument o k body instrument identifier metadata
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierMetadata
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier metadata
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation update payment instrument o k body instrument identifier processing information
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier processing information
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions update payment instrument o k body instrument identifier processing information authorization options
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier processing information authorization options
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator update payment instrument o k body instrument identifier processing information authorization options initiator
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier processing information authorization options initiator
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction update payment instrument o k body instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this update payment instrument o k body instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyLinks update payment instrument o k body links
swagger:model UpdatePaymentInstrumentOKBodyLinks
*/
type UpdatePaymentInstrumentOKBodyLinks struct {

	// ancestor
	Ancestor *UpdatePaymentInstrumentOKBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *UpdatePaymentInstrumentOKBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *UpdatePaymentInstrumentOKBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this update payment instrument o k body links
func (o *UpdatePaymentInstrumentOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentOKBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyLinksAncestor update payment instrument o k body links ancestor
swagger:model UpdatePaymentInstrumentOKBodyLinksAncestor
*/
type UpdatePaymentInstrumentOKBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument o k body links ancestor
func (o *UpdatePaymentInstrumentOKBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyLinksSelf update payment instrument o k body links self
swagger:model UpdatePaymentInstrumentOKBodyLinksSelf
*/
type UpdatePaymentInstrumentOKBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument o k body links self
func (o *UpdatePaymentInstrumentOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyLinksSuccessor update payment instrument o k body links successor
swagger:model UpdatePaymentInstrumentOKBodyLinksSuccessor
*/
type UpdatePaymentInstrumentOKBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument o k body links successor
func (o *UpdatePaymentInstrumentOKBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyMerchantInformation update payment instrument o k body merchant information
swagger:model UpdatePaymentInstrumentOKBodyMerchantInformation
*/
type UpdatePaymentInstrumentOKBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *UpdatePaymentInstrumentOKBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this update payment instrument o k body merchant information
func (o *UpdatePaymentInstrumentOKBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyMerchantInformationMerchantDescriptor update payment instrument o k body merchant information merchant descriptor
swagger:model UpdatePaymentInstrumentOKBodyMerchantInformationMerchantDescriptor
*/
type UpdatePaymentInstrumentOKBodyMerchantInformationMerchantDescriptor struct {

	// Alternate information for your business. This API field overrides the company entry description value in your CyberSource account.
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this update payment instrument o k body merchant information merchant descriptor
func (o *UpdatePaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyMetaData update payment instrument o k body meta data
swagger:model UpdatePaymentInstrumentOKBodyMetaData
*/
type UpdatePaymentInstrumentOKBodyMetaData struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this update payment instrument o k body meta data
func (o *UpdatePaymentInstrumentOKBodyMetaData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyMetaData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyMetaData) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyProcessingInformation update payment instrument o k body processing information
swagger:model UpdatePaymentInstrumentOKBodyProcessingInformation
*/
type UpdatePaymentInstrumentOKBodyProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *UpdatePaymentInstrumentOKBodyProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Indicates that the payments for this customer profile are for the Bill Payment program. Possible values:
	//   * false: Not a Visa Bill Payment.
	//   * true: Visa Bill Payment.
	//
	BillPaymentProgramEnabled *bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this update payment instrument o k body processing information
func (o *UpdatePaymentInstrumentOKBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentOKBodyProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentOK" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentOKBodyProcessingInformationBankTransferOptions update payment instrument o k body processing information bank transfer options
swagger:model UpdatePaymentInstrumentOKBodyProcessingInformationBankTransferOptions
*/
type UpdatePaymentInstrumentOKBodyProcessingInformationBankTransferOptions struct {

	// **Important** This field is required if your processor is TeleCheck.
	//
	// Code that specifies the authorization method for the transaction. Possible values:
	//
	// - **CCD**: corporate cash disbursement. Charge or credit against a business checking account. You can use one-time or recurring CCD transactions to transfer funds to or from a corporate entity. A standing authorization is required for recurring transactions.
	// - **PPD**: prearranged payment and deposit entry. Charge or credit against a personal checking or savings account. You can originate a PPD entry only when the payment and deposit terms between you and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions.
	// - **TEL**: telephone-initiated entry. One-time charge against a personal checking or savings account. You can originate a TEL entry only when there is a business relationship between you and the customer or when the customer initiates a telephone call to you. For a TEL entry, you must obtain a payment authorization from the customer over the telephone. There is no recurring billing option for TEL.
	// - **WEB**: internet-initiated entry—charge against a personal checking or savings account. You can originate a one-time or recurring WEB entry when the customer initiates the transaction over the Internet. For a WEB entry, you must obtain payment authorization from the customer over the Internet.
	//
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this update payment instrument o k body processing information bank transfer options
func (o *UpdatePaymentInstrumentOKBodyProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentOKBodyProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentOKBodyProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyBankAccount update payment instrument params body bank account
swagger:model UpdatePaymentInstrumentParamsBodyBankAccount
*/
type UpdatePaymentInstrumentParamsBodyBankAccount struct {

	// Checking account type. Possible values:
	//   * C: checking
	//   * S: savings (USD only)
	//   * X: corporate checking (USD only)
	//   * G: general ledger
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument params body bank account
func (o *UpdatePaymentInstrumentParamsBodyBankAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyBillTo update payment instrument params body bill to
swagger:model UpdatePaymentInstrumentParamsBodyBillTo
*/
type UpdatePaymentInstrumentParamsBodyBillTo struct {

	// First line of the billing street address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. For an address in the U.S. or Canada, use the State, Province, and Territory Codes for the United States and Canada.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the billing address. Accepts input in the ISO 3166-1 standard, stores as ISO 3166-1-Alpha-2.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 3
	// Min Length: 2
	Country string `json:"country,omitempty"`

	// Customer’s email address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// Customer’s first name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the billing address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer phone number. When you create a customer profile, the requirements depend on the payment method:
	//   * Credit cards — optional.
	//   * Electronic checks — contact your payment processor representative to find out if this field is required or optional.
	//   * PINless debits — optional.
	//
	// Max Length: 32
	// Min Length: 6
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	// **Example** 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space]
	// [numeric][alpha][numeric]
	// Example A1B 2C3
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this update payment instrument params body bill to
func (o *UpdatePaymentInstrumentParamsBodyBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"country", "body", string(o.Country), 3); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"email", "body", string(o.Email), 320); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 32); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBillTo) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyBuyerInformation update payment instrument params body buyer information
swagger:model UpdatePaymentInstrumentParamsBodyBuyerInformation
*/
type UpdatePaymentInstrumentParamsBodyBuyerInformation struct {

	// Tax identifier for the customer’s company.
	//
	// **Important**:
	// Contact your TeleCheck representative to find out whether this field is required or optional.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used by the customer. Accepts input in the ISO 4217 standard, stores as ISO 4217 Alpha.
	// Max Length: 3
	// Min Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer.
	//
	// Format: `YYYY-MM-DD` or `YYYYMMDD`
	//
	// Max Length: 10
	// Min Length: 8
	DateOBirth string `json:"dateOBirth,omitempty"`

	// personal identification
	PersonalIdentification []*UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this update payment instrument params body buyer information
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"buyerInformation"+"."+"companyTaxID", "body", string(o.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBuyerInformation) validateDateOBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOBirth) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 10); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0 update payment instrument params body buyer information personal identification items0
swagger:model UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0
*/
type UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0 struct {

	// Customer's identification number.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// Type of personal identification.
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Valid values:
	// - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this update payment instrument params body buyer information personal identification items0
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy update payment instrument params body buyer information personal identification items0 issued by
swagger:model UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy
*/
type UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// State or province in which the customer’s driver’s license was issued. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this update payment instrument params body buyer information personal identification items0 issued by
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyCard update payment instrument params body card
swagger:model UpdatePaymentInstrumentParamsBodyCard
*/
type UpdatePaymentInstrumentParamsBodyCard struct {

	// Two-digit month in which the credit card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.
	//
	// Important:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 2
	// Min Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// **FDC Nashville Global and FDMS South**
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For details, see [Relaxed Requirements for Address Data and Expiration Date.](https://www.cybersource.com/developers/integration_methods/relax_avs/).
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.'
	//
	// Max Length: 4
	// Min Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder.
	// Max Length: 2
	// Min Length: 1
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `MM`.
	// Possible values: `01` through `12`.
	//
	// Max Length: 2
	// Min Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// Max Length: 4
	// Min Length: 4
	StartYear string `json:"startYear,omitempty"`

	// Type of credit card. Possible values:
	//   * **visa** -- Visa (001)
	//   * **mastercard** -- Mastercard (002) - Eurocard—European regional brand of Mastercard
	//   * **american express** -- American Express (003)
	//   * **discover** -- Discover (004)
	//   * **diners club** -- Diners Club (005)
	//   * **carte blanche** -- Carte Blanche (006)
	//   * **jcb** -- JCB (007)
	//   * **optima** -- Optima (008)
	//   * **twinpay credit** -- Twinpay Credit (011)
	//   * **twinpay debit** -- Twinpay Debit (012)
	//   * **walmart** -- Walmart (013)
	//   * **enroute** -- EnRoute (014)
	//   * **lowes consumer** -- Lowes consumer (015)
	//   * **home depot consumer** -- Home Depot consumer (016)
	//   * **mbna** -- MBNA (017)
	//   * **dicks sportswear** -- Dicks Sportswear (018)
	//   * **casual corner** -- Casual Corner (019)
	//   * **sears** -- Sears (020)
	//   * **jal** -- JAL (021)
	//   * **disney** -- Disney (023)
	//   * **maestro uk domestic** -- Maestro (024) - UK Domestic
	//   * **sams club consumer** -- Sams Club consumer (025)
	//   * **sams club business** -- Sams Club business (026)
	//   * **bill me later** -- Bill me later (028)
	//   * **bebe** -- Bebe (029)
	//   * **restoration hardware** -- Restoration Hardware (030)
	//   * **delta online** -- Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * **solo** -- Solo (032)
	//   * **visa electron** -- Visa Electron (033)
	//   * **dankort** -- Dankort (034)
	//   * **laser** -- Laser (035)
	//   * **carte bleue** -- Carte Bleue (036) — formerly Cartes Bancaires
	//   * **carta si** -- Carta Si (037)
	//   * **pinless debit** -- pinless debit (038)
	//   * **encoded account** -- encoded account (039)
	//   * **uatp** -- UATP (040)
	//   * **household** -- Household (041)
	//   * **maestro international** -- Maestro (042) - International
	//   * **ge money uk** -- GE Money UK (043)
	//   * **korean cards** -- Korean cards (044)
	//   * **style** -- Style (045)
	//   * **jcrew** -- JCrew (046)
	//   * **payease china processing ewallet** -- PayEase China processing eWallet (047)
	//   * **payease china processing bank transfer** -- PayEase China processing bank transfer (048)
	//   * **meijer private label** -- Meijer Private Label (049)
	//   * **hipercard** -- Hipercard (050) — supported only by the Comercio Latino processor.
	//   * **aura** -- Aura (051) — supported only by the Comercio Latino processor.
	//   * **redecard** -- Redecard (052)
	//   * **elo** -- Elo (054) — supported only by the Comercio Latino processor.
	//   * **capital one private label** -- Capital One Private Label (055)
	//   * **synchrony private label** -- Synchrony Private Label (056)
	//   * **costco private label** -- Costco Private Label (057)
	//   * **mada** -- mada (060)
	//   * **china union pay** -- China Union Pay (062)
	//   * **falabella private label** -- Falabella private label (063)
	//
	// Required: true
	Type *string `json:"type"`

	// Card Use As Field. Supported value of `pinless debit` only. Only for use with Pinless Debit tokens.
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this update payment instrument params body card
func (o *UpdatePaymentInstrumentParamsBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyCard) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyCard) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyCard) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyCard) validateType(formats strfmt.Registry) error {

	if err := validate.Required("updatePaymentInstrumentRequest"+"."+"card"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyCard) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifier update payment instrument params body instrument identifier
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifier
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifier struct {

	// links
	Links *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard `json:"card,omitempty"`

	// The ID of the existing instrument identifier to be linked to the newly created payment instrument.
	// Max Length: 32
	// Min Length: 16
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 16); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 32); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount update payment instrument params body instrument identifier bank account
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier bank account
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard update payment instrument params body instrument identifier card
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier card
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks update payment instrument params body instrument identifier links
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks struct {

	// ancestor
	Ancestor *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf `json:"self,omitempty"`

	// successor
	Successor *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier links
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor update payment instrument params body instrument identifier links ancestor
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier links ancestor
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf update payment instrument params body instrument identifier links self
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier links self
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor update payment instrument params body instrument identifier links successor
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier links successor
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata update payment instrument params body instrument identifier metadata
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier metadata
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation update payment instrument params body instrument identifier processing information
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier processing information
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions update payment instrument params body instrument identifier processing information authorization options
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier processing information authorization options
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator update payment instrument params body instrument identifier processing information authorization options initiator
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier processing information authorization options initiator
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction update payment instrument params body instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this update payment instrument params body instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("updatePaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyLinks update payment instrument params body links
swagger:model UpdatePaymentInstrumentParamsBodyLinks
*/
type UpdatePaymentInstrumentParamsBodyLinks struct {

	// ancestor
	Ancestor *UpdatePaymentInstrumentParamsBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *UpdatePaymentInstrumentParamsBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *UpdatePaymentInstrumentParamsBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this update payment instrument params body links
func (o *UpdatePaymentInstrumentParamsBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyLinks) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyLinksAncestor update payment instrument params body links ancestor
swagger:model UpdatePaymentInstrumentParamsBodyLinksAncestor
*/
type UpdatePaymentInstrumentParamsBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument params body links ancestor
func (o *UpdatePaymentInstrumentParamsBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyLinksSelf update payment instrument params body links self
swagger:model UpdatePaymentInstrumentParamsBodyLinksSelf
*/
type UpdatePaymentInstrumentParamsBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument params body links self
func (o *UpdatePaymentInstrumentParamsBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyLinksSuccessor update payment instrument params body links successor
swagger:model UpdatePaymentInstrumentParamsBodyLinksSuccessor
*/
type UpdatePaymentInstrumentParamsBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update payment instrument params body links successor
func (o *UpdatePaymentInstrumentParamsBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyMerchantInformation update payment instrument params body merchant information
swagger:model UpdatePaymentInstrumentParamsBodyMerchantInformation
*/
type UpdatePaymentInstrumentParamsBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *UpdatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this update payment instrument params body merchant information
func (o *UpdatePaymentInstrumentParamsBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor update payment instrument params body merchant information merchant descriptor
swagger:model UpdatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor
*/
type UpdatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor struct {

	// Alternate information for your business. This API field overrides the company entry description value in your CyberSource account.
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this update payment instrument params body merchant information merchant descriptor
func (o *UpdatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyMetaData update payment instrument params body meta data
swagger:model UpdatePaymentInstrumentParamsBodyMetaData
*/
type UpdatePaymentInstrumentParamsBodyMetaData struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this update payment instrument params body meta data
func (o *UpdatePaymentInstrumentParamsBodyMetaData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyMetaData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyMetaData) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyProcessingInformation update payment instrument params body processing information
swagger:model UpdatePaymentInstrumentParamsBodyProcessingInformation
*/
type UpdatePaymentInstrumentParamsBodyProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *UpdatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Indicates that the payments for this customer profile are for the Bill Payment program. Possible values:
	//   * false: Not a Visa Bill Payment.
	//   * true: Visa Bill Payment.
	//
	BillPaymentProgramEnabled *bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this update payment instrument params body processing information
func (o *UpdatePaymentInstrumentParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePaymentInstrumentParamsBodyProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePaymentInstrumentRequest" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions update payment instrument params body processing information bank transfer options
swagger:model UpdatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions
*/
type UpdatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions struct {

	// **Important** This field is required if your processor is TeleCheck.
	//
	// Code that specifies the authorization method for the transaction. Possible values:
	//
	// - **CCD**: corporate cash disbursement. Charge or credit against a business checking account. You can use one-time or recurring CCD transactions to transfer funds to or from a corporate entity. A standing authorization is required for recurring transactions.
	// - **PPD**: prearranged payment and deposit entry. Charge or credit against a personal checking or savings account. You can originate a PPD entry only when the payment and deposit terms between you and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions.
	// - **TEL**: telephone-initiated entry. One-time charge against a personal checking or savings account. You can originate a TEL entry only when there is a business relationship between you and the customer or when the customer initiates a telephone call to you. For a TEL entry, you must obtain a payment authorization from the customer over the telephone. There is no recurring billing option for TEL.
	// - **WEB**: internet-initiated entry—charge against a personal checking or savings account. You can originate a one-time or recurring WEB entry when the customer initiates the transaction over the Internet. For a WEB entry, you must obtain payment authorization from the customer over the Internet.
	//
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this update payment instrument params body processing information bank transfer options
func (o *UpdatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res UpdatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
