// Code generated by go-swagger; DO NOT EDIT.

package payment_instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreatePaymentInstrumentReader is a Reader for the CreatePaymentInstrument structure.
type CreatePaymentInstrumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePaymentInstrumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePaymentInstrumentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePaymentInstrumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreatePaymentInstrumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewCreatePaymentInstrumentFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreatePaymentInstrumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreatePaymentInstrumentCreated creates a CreatePaymentInstrumentCreated with default headers values
func NewCreatePaymentInstrumentCreated() *CreatePaymentInstrumentCreated {
	return &CreatePaymentInstrumentCreated{}
}

/*CreatePaymentInstrumentCreated handles this case with default header values.

A new Payment Instrument has been created.
*/
type CreatePaymentInstrumentCreated struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload *CreatePaymentInstrumentCreatedBody
}

func (o *CreatePaymentInstrumentCreated) Error() string {
	return fmt.Sprintf("[POST /tms/v1/paymentinstruments][%d] createPaymentInstrumentCreated  %+v", 201, o.Payload)
}

func (o *CreatePaymentInstrumentCreated) GetPayload() *CreatePaymentInstrumentCreatedBody {
	return o.Payload
}

func (o *CreatePaymentInstrumentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	o.Payload = new(CreatePaymentInstrumentCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentInstrumentBadRequest creates a CreatePaymentInstrumentBadRequest with default headers values
func NewCreatePaymentInstrumentBadRequest() *CreatePaymentInstrumentBadRequest {
	return &CreatePaymentInstrumentBadRequest{}
}

/*CreatePaymentInstrumentBadRequest handles this case with default header values.

Bad Request. A required header value could be missing.
*/
type CreatePaymentInstrumentBadRequest struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*CreatePaymentInstrumentBadRequestBodyItems0
}

func (o *CreatePaymentInstrumentBadRequest) Error() string {
	return fmt.Sprintf("[POST /tms/v1/paymentinstruments][%d] createPaymentInstrumentBadRequest  %+v", 400, o.Payload)
}

func (o *CreatePaymentInstrumentBadRequest) GetPayload() []*CreatePaymentInstrumentBadRequestBodyItems0 {
	return o.Payload
}

func (o *CreatePaymentInstrumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentInstrumentForbidden creates a CreatePaymentInstrumentForbidden with default headers values
func NewCreatePaymentInstrumentForbidden() *CreatePaymentInstrumentForbidden {
	return &CreatePaymentInstrumentForbidden{}
}

/*CreatePaymentInstrumentForbidden handles this case with default header values.

Forbidden. The profile might not have permission to perform the token operation.
*/
type CreatePaymentInstrumentForbidden struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*CreatePaymentInstrumentForbiddenBodyItems0
}

func (o *CreatePaymentInstrumentForbidden) Error() string {
	return fmt.Sprintf("[POST /tms/v1/paymentinstruments][%d] createPaymentInstrumentForbidden  %+v", 403, o.Payload)
}

func (o *CreatePaymentInstrumentForbidden) GetPayload() []*CreatePaymentInstrumentForbiddenBodyItems0 {
	return o.Payload
}

func (o *CreatePaymentInstrumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentInstrumentFailedDependency creates a CreatePaymentInstrumentFailedDependency with default headers values
func NewCreatePaymentInstrumentFailedDependency() *CreatePaymentInstrumentFailedDependency {
	return &CreatePaymentInstrumentFailedDependency{}
}

/*CreatePaymentInstrumentFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type CreatePaymentInstrumentFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*CreatePaymentInstrumentFailedDependencyBodyItems0
}

func (o *CreatePaymentInstrumentFailedDependency) Error() string {
	return fmt.Sprintf("[POST /tms/v1/paymentinstruments][%d] createPaymentInstrumentFailedDependency  %+v", 424, o.Payload)
}

func (o *CreatePaymentInstrumentFailedDependency) GetPayload() []*CreatePaymentInstrumentFailedDependencyBodyItems0 {
	return o.Payload
}

func (o *CreatePaymentInstrumentFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentInstrumentInternalServerError creates a CreatePaymentInstrumentInternalServerError with default headers values
func NewCreatePaymentInstrumentInternalServerError() *CreatePaymentInstrumentInternalServerError {
	return &CreatePaymentInstrumentInternalServerError{}
}

/*CreatePaymentInstrumentInternalServerError handles this case with default header values.

Unexpected error.
*/
type CreatePaymentInstrumentInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*CreatePaymentInstrumentInternalServerErrorBodyItems0
}

func (o *CreatePaymentInstrumentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tms/v1/paymentinstruments][%d] createPaymentInstrumentInternalServerError  %+v", 500, o.Payload)
}

func (o *CreatePaymentInstrumentInternalServerError) GetPayload() []*CreatePaymentInstrumentInternalServerErrorBodyItems0 {
	return o.Payload
}

func (o *CreatePaymentInstrumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreatePaymentInstrumentBadRequestBodyItems0 create payment instrument bad request body items0
swagger:model CreatePaymentInstrumentBadRequestBodyItems0
*/
type CreatePaymentInstrumentBadRequestBodyItems0 struct {

	// details
	Details *CreatePaymentInstrumentBadRequestBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this create payment instrument bad request body items0
func (o *CreatePaymentInstrumentBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentBadRequestBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentBadRequestBodyItems0Details create payment instrument bad request body items0 details
swagger:model CreatePaymentInstrumentBadRequestBodyItems0Details
*/
type CreatePaymentInstrumentBadRequestBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this create payment instrument bad request body items0 details
func (o *CreatePaymentInstrumentBadRequestBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentBadRequestBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentBadRequestBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentBadRequestBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentBody create payment instrument body
swagger:model CreatePaymentInstrumentBody
*/
type CreatePaymentInstrumentBody struct {

	// links
	Links *CreatePaymentInstrumentParamsBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *CreatePaymentInstrumentParamsBodyBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *CreatePaymentInstrumentParamsBodyBillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *CreatePaymentInstrumentParamsBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *CreatePaymentInstrumentParamsBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *CreatePaymentInstrumentParamsBodyInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *CreatePaymentInstrumentParamsBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// meta data
	MetaData *CreatePaymentInstrumentParamsBodyMetaData `json:"metaData,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *CreatePaymentInstrumentParamsBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this create payment instrument body
func (o *CreatePaymentInstrumentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentBody) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentBody) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentBody) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentBody) validateMetaData(formats strfmt.Registry) error {

	if swag.IsZero(o.MetaData) { // not required
		return nil
	}

	if o.MetaData != nil {
		if err := o.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "metaData")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentBody) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBody tmsV1PaymentInstrumentsPost201Response
swagger:model CreatePaymentInstrumentCreatedBody
*/
type CreatePaymentInstrumentCreatedBody struct {

	// links
	Links *CreatePaymentInstrumentCreatedBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *CreatePaymentInstrumentCreatedBodyBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *CreatePaymentInstrumentCreatedBodyBillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *CreatePaymentInstrumentCreatedBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *CreatePaymentInstrumentCreatedBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *CreatePaymentInstrumentCreatedBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// meta data
	MetaData *CreatePaymentInstrumentCreatedBodyMetaData `json:"metaData,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *CreatePaymentInstrumentCreatedBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this create payment instrument created body
func (o *CreatePaymentInstrumentCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateMetaData(formats strfmt.Registry) error {

	if swag.IsZero(o.MetaData) { // not required
		return nil
	}

	if o.MetaData != nil {
		if err := o.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "metaData")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyBankAccount create payment instrument created body bank account
swagger:model CreatePaymentInstrumentCreatedBodyBankAccount
*/
type CreatePaymentInstrumentCreatedBodyBankAccount struct {

	// Checking account type. Possible values:
	//   * C: checking
	//   * S: savings (USD only)
	//   * X: corporate checking (USD only)
	//   * G: general ledger
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create payment instrument created body bank account
func (o *CreatePaymentInstrumentCreatedBodyBankAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyBillTo create payment instrument created body bill to
swagger:model CreatePaymentInstrumentCreatedBodyBillTo
*/
type CreatePaymentInstrumentCreatedBodyBillTo struct {

	// First line of the billing street address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. For an address in the U.S. or Canada, use the State, Province, and Territory Codes for the United States and Canada.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the billing address. Accepts input in the ISO 3166-1 standard, stores as ISO 3166-1-Alpha-2.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 3
	// Min Length: 2
	Country string `json:"country,omitempty"`

	// Customer’s email address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// Customer’s first name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the billing address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer phone number. When you create a customer profile, the requirements depend on the payment method:
	//   * Credit cards — optional.
	//   * Electronic checks — contact your payment processor representative to find out if this field is required or optional.
	//   * PINless debits — optional.
	//
	// Max Length: 32
	// Min Length: 6
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	// **Example** 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space]
	// [numeric][alpha][numeric]
	// Example A1B 2C3
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this create payment instrument created body bill to
func (o *CreatePaymentInstrumentCreatedBodyBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"country", "body", string(o.Country), 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"email", "body", string(o.Email), 320); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 32); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBillTo) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyBuyerInformation create payment instrument created body buyer information
swagger:model CreatePaymentInstrumentCreatedBodyBuyerInformation
*/
type CreatePaymentInstrumentCreatedBodyBuyerInformation struct {

	// Tax identifier for the customer’s company.
	//
	// **Important**:
	// Contact your TeleCheck representative to find out whether this field is required or optional.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used by the customer. Accepts input in the ISO 4217 standard, stores as ISO 4217 Alpha.
	// Max Length: 3
	// Min Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer.
	//
	// Format: `YYYY-MM-DD` or `YYYYMMDD`
	//
	// Max Length: 10
	// Min Length: 8
	DateOBirth string `json:"dateOBirth,omitempty"`

	// personal identification
	PersonalIdentification []*CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this create payment instrument created body buyer information
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"buyerInformation"+"."+"companyTaxID", "body", string(o.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBuyerInformation) validateDateOBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOBirth) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 10); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createPaymentInstrumentCreated" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0 create payment instrument created body buyer information personal identification items0
swagger:model CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0
*/
type CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0 struct {

	// Customer's identification number.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// Type of personal identification.
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Valid values:
	// - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create payment instrument created body buyer information personal identification items0
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0IssuedBy create payment instrument created body buyer information personal identification items0 issued by
swagger:model CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0IssuedBy
*/
type CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// State or province in which the customer’s driver’s license was issued. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this create payment instrument created body buyer information personal identification items0 issued by
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyBuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyCard create payment instrument created body card
swagger:model CreatePaymentInstrumentCreatedBodyCard
*/
type CreatePaymentInstrumentCreatedBodyCard struct {

	// Two-digit month in which the credit card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.
	//
	// Important:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 2
	// Min Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// **FDC Nashville Global and FDMS South**
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For details, see [Relaxed Requirements for Address Data and Expiration Date.](https://www.cybersource.com/developers/integration_methods/relax_avs/).
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.'
	//
	// Max Length: 4
	// Min Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder.
	// Max Length: 2
	// Min Length: 1
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `MM`.
	// Possible values: `01` through `12`.
	//
	// Max Length: 2
	// Min Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// Max Length: 4
	// Min Length: 4
	StartYear string `json:"startYear,omitempty"`

	// Type of credit card. Possible values:
	//   * **visa** -- Visa (001)
	//   * **mastercard** -- Mastercard (002) - Eurocard—European regional brand of Mastercard
	//   * **american express** -- American Express (003)
	//   * **discover** -- Discover (004)
	//   * **diners club** -- Diners Club (005)
	//   * **carte blanche** -- Carte Blanche (006)
	//   * **jcb** -- JCB (007)
	//   * **optima** -- Optima (008)
	//   * **twinpay credit** -- Twinpay Credit (011)
	//   * **twinpay debit** -- Twinpay Debit (012)
	//   * **walmart** -- Walmart (013)
	//   * **enroute** -- EnRoute (014)
	//   * **lowes consumer** -- Lowes consumer (015)
	//   * **home depot consumer** -- Home Depot consumer (016)
	//   * **mbna** -- MBNA (017)
	//   * **dicks sportswear** -- Dicks Sportswear (018)
	//   * **casual corner** -- Casual Corner (019)
	//   * **sears** -- Sears (020)
	//   * **jal** -- JAL (021)
	//   * **disney** -- Disney (023)
	//   * **maestro uk domestic** -- Maestro (024) - UK Domestic
	//   * **sams club consumer** -- Sams Club consumer (025)
	//   * **sams club business** -- Sams Club business (026)
	//   * **bill me later** -- Bill me later (028)
	//   * **bebe** -- Bebe (029)
	//   * **restoration hardware** -- Restoration Hardware (030)
	//   * **delta online** -- Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * **solo** -- Solo (032)
	//   * **visa electron** -- Visa Electron (033)
	//   * **dankort** -- Dankort (034)
	//   * **laser** -- Laser (035)
	//   * **carte bleue** -- Carte Bleue (036) — formerly Cartes Bancaires
	//   * **carta si** -- Carta Si (037)
	//   * **pinless debit** -- pinless debit (038)
	//   * **encoded account** -- encoded account (039)
	//   * **uatp** -- UATP (040)
	//   * **household** -- Household (041)
	//   * **maestro international** -- Maestro (042) - International
	//   * **ge money uk** -- GE Money UK (043)
	//   * **korean cards** -- Korean cards (044)
	//   * **style** -- Style (045)
	//   * **jcrew** -- JCrew (046)
	//   * **payease china processing ewallet** -- PayEase China processing eWallet (047)
	//   * **payease china processing bank transfer** -- PayEase China processing bank transfer (048)
	//   * **meijer private label** -- Meijer Private Label (049)
	//   * **hipercard** -- Hipercard (050) — supported only by the Comercio Latino processor.
	//   * **aura** -- Aura (051) — supported only by the Comercio Latino processor.
	//   * **redecard** -- Redecard (052)
	//   * **elo** -- Elo (054) — supported only by the Comercio Latino processor.
	//   * **capital one private label** -- Capital One Private Label (055)
	//   * **synchrony private label** -- Synchrony Private Label (056)
	//   * **costco private label** -- Costco Private Label (057)
	//   * **mada** -- mada (060)
	//   * **china union pay** -- China Union Pay (062)
	//   * **falabella private label** -- Falabella private label (063)
	//
	// Required: true
	Type *string `json:"type"`

	// Card Use As Field. Supported value of `pinless debit` only. Only for use with Pinless Debit tokens.
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this create payment instrument created body card
func (o *CreatePaymentInstrumentCreatedBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyCard) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyCard) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyCard) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyCard) validateType(formats strfmt.Registry) error {

	if err := validate.Required("createPaymentInstrumentCreated"+"."+"card"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyCard) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifier create payment instrument created body instrument identifier
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifier
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifier struct {

	// links
	Links *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard `json:"card,omitempty"`

	// The ID of the existing instrument identifier to be linked to the newly created payment instrument.
	// Max Length: 32
	// Min Length: 16
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 16); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 32); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount create payment instrument created body instrument identifier bank account
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier bank account
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard create payment instrument created body instrument identifier card
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier card
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks create payment instrument created body instrument identifier links
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks struct {

	// ancestor
	Ancestor *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSelf `json:"self,omitempty"`

	// successor
	Successor *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier links
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksAncestor create payment instrument created body instrument identifier links ancestor
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksAncestor
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier links ancestor
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksAncestor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSelf create payment instrument created body instrument identifier links self
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSelf
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier links self
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSuccessor create payment instrument created body instrument identifier links successor
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSuccessor
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier links successor
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierMetadata create payment instrument created body instrument identifier metadata
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierMetadata
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier metadata
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation create payment instrument created body instrument identifier processing information
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier processing information
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions create payment instrument created body instrument identifier processing information authorization options
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier processing information authorization options
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator create payment instrument created body instrument identifier processing information authorization options initiator
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier processing information authorization options initiator
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction create payment instrument created body instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this create payment instrument created body instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentCreated"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyLinks create payment instrument created body links
swagger:model CreatePaymentInstrumentCreatedBodyLinks
*/
type CreatePaymentInstrumentCreatedBodyLinks struct {

	// ancestor
	Ancestor *CreatePaymentInstrumentCreatedBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *CreatePaymentInstrumentCreatedBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *CreatePaymentInstrumentCreatedBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this create payment instrument created body links
func (o *CreatePaymentInstrumentCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyLinksAncestor create payment instrument created body links ancestor
swagger:model CreatePaymentInstrumentCreatedBodyLinksAncestor
*/
type CreatePaymentInstrumentCreatedBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument created body links ancestor
func (o *CreatePaymentInstrumentCreatedBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyLinksSelf create payment instrument created body links self
swagger:model CreatePaymentInstrumentCreatedBodyLinksSelf
*/
type CreatePaymentInstrumentCreatedBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument created body links self
func (o *CreatePaymentInstrumentCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyLinksSuccessor create payment instrument created body links successor
swagger:model CreatePaymentInstrumentCreatedBodyLinksSuccessor
*/
type CreatePaymentInstrumentCreatedBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument created body links successor
func (o *CreatePaymentInstrumentCreatedBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyMerchantInformation create payment instrument created body merchant information
swagger:model CreatePaymentInstrumentCreatedBodyMerchantInformation
*/
type CreatePaymentInstrumentCreatedBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *CreatePaymentInstrumentCreatedBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this create payment instrument created body merchant information
func (o *CreatePaymentInstrumentCreatedBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyMerchantInformationMerchantDescriptor create payment instrument created body merchant information merchant descriptor
swagger:model CreatePaymentInstrumentCreatedBodyMerchantInformationMerchantDescriptor
*/
type CreatePaymentInstrumentCreatedBodyMerchantInformationMerchantDescriptor struct {

	// Alternate information for your business. This API field overrides the company entry description value in your CyberSource account.
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this create payment instrument created body merchant information merchant descriptor
func (o *CreatePaymentInstrumentCreatedBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyMetaData create payment instrument created body meta data
swagger:model CreatePaymentInstrumentCreatedBodyMetaData
*/
type CreatePaymentInstrumentCreatedBodyMetaData struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this create payment instrument created body meta data
func (o *CreatePaymentInstrumentCreatedBodyMetaData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyMetaData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyMetaData) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyProcessingInformation create payment instrument created body processing information
swagger:model CreatePaymentInstrumentCreatedBodyProcessingInformation
*/
type CreatePaymentInstrumentCreatedBodyProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *CreatePaymentInstrumentCreatedBodyProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Indicates that the payments for this customer profile are for the Bill Payment program. Possible values:
	//   * false: Not a Visa Bill Payment.
	//   * true: Visa Bill Payment.
	//
	BillPaymentProgramEnabled *bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this create payment instrument created body processing information
func (o *CreatePaymentInstrumentCreatedBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentCreatedBodyProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentCreated" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentCreatedBodyProcessingInformationBankTransferOptions create payment instrument created body processing information bank transfer options
swagger:model CreatePaymentInstrumentCreatedBodyProcessingInformationBankTransferOptions
*/
type CreatePaymentInstrumentCreatedBodyProcessingInformationBankTransferOptions struct {

	// **Important** This field is required if your processor is TeleCheck.
	//
	// Code that specifies the authorization method for the transaction. Possible values:
	//
	// - **CCD**: corporate cash disbursement. Charge or credit against a business checking account. You can use one-time or recurring CCD transactions to transfer funds to or from a corporate entity. A standing authorization is required for recurring transactions.
	// - **PPD**: prearranged payment and deposit entry. Charge or credit against a personal checking or savings account. You can originate a PPD entry only when the payment and deposit terms between you and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions.
	// - **TEL**: telephone-initiated entry. One-time charge against a personal checking or savings account. You can originate a TEL entry only when there is a business relationship between you and the customer or when the customer initiates a telephone call to you. For a TEL entry, you must obtain a payment authorization from the customer over the telephone. There is no recurring billing option for TEL.
	// - **WEB**: internet-initiated entry—charge against a personal checking or savings account. You can originate a one-time or recurring WEB entry when the customer initiates the transaction over the Internet. For a WEB entry, you must obtain payment authorization from the customer over the Internet.
	//
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this create payment instrument created body processing information bank transfer options
func (o *CreatePaymentInstrumentCreatedBodyProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentCreatedBodyProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentCreatedBodyProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentFailedDependencyBodyItems0 create payment instrument failed dependency body items0
swagger:model CreatePaymentInstrumentFailedDependencyBodyItems0
*/
type CreatePaymentInstrumentFailedDependencyBodyItems0 struct {

	// details
	Details *CreatePaymentInstrumentFailedDependencyBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this create payment instrument failed dependency body items0
func (o *CreatePaymentInstrumentFailedDependencyBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentFailedDependencyBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentFailedDependencyBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentFailedDependencyBodyItems0) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentFailedDependencyBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentFailedDependencyBodyItems0Details create payment instrument failed dependency body items0 details
swagger:model CreatePaymentInstrumentFailedDependencyBodyItems0Details
*/
type CreatePaymentInstrumentFailedDependencyBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this create payment instrument failed dependency body items0 details
func (o *CreatePaymentInstrumentFailedDependencyBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentFailedDependencyBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentFailedDependencyBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentFailedDependencyBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentForbiddenBodyItems0 create payment instrument forbidden body items0
swagger:model CreatePaymentInstrumentForbiddenBodyItems0
*/
type CreatePaymentInstrumentForbiddenBodyItems0 struct {

	// details
	Details *CreatePaymentInstrumentForbiddenBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this create payment instrument forbidden body items0
func (o *CreatePaymentInstrumentForbiddenBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentForbiddenBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentForbiddenBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentForbiddenBodyItems0) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentForbiddenBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentForbiddenBodyItems0Details create payment instrument forbidden body items0 details
swagger:model CreatePaymentInstrumentForbiddenBodyItems0Details
*/
type CreatePaymentInstrumentForbiddenBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this create payment instrument forbidden body items0 details
func (o *CreatePaymentInstrumentForbiddenBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentForbiddenBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentForbiddenBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentForbiddenBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentInternalServerErrorBodyItems0 create payment instrument internal server error body items0
swagger:model CreatePaymentInstrumentInternalServerErrorBodyItems0
*/
type CreatePaymentInstrumentInternalServerErrorBodyItems0 struct {

	// details
	Details *CreatePaymentInstrumentInternalServerErrorBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this create payment instrument internal server error body items0
func (o *CreatePaymentInstrumentInternalServerErrorBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentInternalServerErrorBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentInternalServerErrorBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentInternalServerErrorBodyItems0) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentInternalServerErrorBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentInternalServerErrorBodyItems0Details create payment instrument internal server error body items0 details
swagger:model CreatePaymentInstrumentInternalServerErrorBodyItems0Details
*/
type CreatePaymentInstrumentInternalServerErrorBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this create payment instrument internal server error body items0 details
func (o *CreatePaymentInstrumentInternalServerErrorBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentInternalServerErrorBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentInternalServerErrorBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentInternalServerErrorBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyBankAccount create payment instrument params body bank account
swagger:model CreatePaymentInstrumentParamsBodyBankAccount
*/
type CreatePaymentInstrumentParamsBodyBankAccount struct {

	// Checking account type. Possible values:
	//   * C: checking
	//   * S: savings (USD only)
	//   * X: corporate checking (USD only)
	//   * G: general ledger
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create payment instrument params body bank account
func (o *CreatePaymentInstrumentParamsBodyBankAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyBillTo create payment instrument params body bill to
swagger:model CreatePaymentInstrumentParamsBodyBillTo
*/
type CreatePaymentInstrumentParamsBodyBillTo struct {

	// First line of the billing street address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. For an address in the U.S. or Canada, use the State, Province, and Territory Codes for the United States and Canada.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the billing address. Accepts input in the ISO 3166-1 standard, stores as ISO 3166-1-Alpha-2.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 3
	// Min Length: 2
	Country string `json:"country,omitempty"`

	// Customer’s email address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// Customer’s first name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the billing address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer phone number. When you create a customer profile, the requirements depend on the payment method:
	//   * Credit cards — optional.
	//   * Electronic checks — contact your payment processor representative to find out if this field is required or optional.
	//   * PINless debits — optional.
	//
	// Max Length: 32
	// Min Length: 6
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	// **Example** 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space]
	// [numeric][alpha][numeric]
	// Example A1B 2C3
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this create payment instrument params body bill to
func (o *CreatePaymentInstrumentParamsBodyBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"country", "body", string(o.Country), 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"email", "body", string(o.Email), 320); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 32); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBillTo) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyBuyerInformation create payment instrument params body buyer information
swagger:model CreatePaymentInstrumentParamsBodyBuyerInformation
*/
type CreatePaymentInstrumentParamsBodyBuyerInformation struct {

	// Tax identifier for the customer’s company.
	//
	// **Important**:
	// Contact your TeleCheck representative to find out whether this field is required or optional.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used by the customer. Accepts input in the ISO 4217 standard, stores as ISO 4217 Alpha.
	// Max Length: 3
	// Min Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer.
	//
	// Format: `YYYY-MM-DD` or `YYYYMMDD`
	//
	// Max Length: 10
	// Min Length: 8
	DateOBirth string `json:"dateOBirth,omitempty"`

	// personal identification
	PersonalIdentification []*CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this create payment instrument params body buyer information
func (o *CreatePaymentInstrumentParamsBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"buyerInformation"+"."+"companyTaxID", "body", string(o.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBuyerInformation) validateDateOBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOBirth) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 10); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createPaymentInstrumentRequest" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0 create payment instrument params body buyer information personal identification items0
swagger:model CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0
*/
type CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0 struct {

	// Customer's identification number.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// Type of personal identification.
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Valid values:
	// - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create payment instrument params body buyer information personal identification items0
func (o *CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy create payment instrument params body buyer information personal identification items0 issued by
swagger:model CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy
*/
type CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// State or province in which the customer’s driver’s license was issued. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this create payment instrument params body buyer information personal identification items0 issued by
func (o *CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyBuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyCard create payment instrument params body card
swagger:model CreatePaymentInstrumentParamsBodyCard
*/
type CreatePaymentInstrumentParamsBodyCard struct {

	// Two-digit month in which the credit card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.
	//
	// Important:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 2
	// Min Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// **FDC Nashville Global and FDMS South**
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For details, see [Relaxed Requirements for Address Data and Expiration Date.](https://www.cybersource.com/developers/integration_methods/relax_avs/).
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.'
	//
	// Max Length: 4
	// Min Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder.
	// Max Length: 2
	// Min Length: 1
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `MM`.
	// Possible values: `01` through `12`.
	//
	// Max Length: 2
	// Min Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// Max Length: 4
	// Min Length: 4
	StartYear string `json:"startYear,omitempty"`

	// Type of credit card. Possible values:
	//   * **visa** -- Visa (001)
	//   * **mastercard** -- Mastercard (002) - Eurocard—European regional brand of Mastercard
	//   * **american express** -- American Express (003)
	//   * **discover** -- Discover (004)
	//   * **diners club** -- Diners Club (005)
	//   * **carte blanche** -- Carte Blanche (006)
	//   * **jcb** -- JCB (007)
	//   * **optima** -- Optima (008)
	//   * **twinpay credit** -- Twinpay Credit (011)
	//   * **twinpay debit** -- Twinpay Debit (012)
	//   * **walmart** -- Walmart (013)
	//   * **enroute** -- EnRoute (014)
	//   * **lowes consumer** -- Lowes consumer (015)
	//   * **home depot consumer** -- Home Depot consumer (016)
	//   * **mbna** -- MBNA (017)
	//   * **dicks sportswear** -- Dicks Sportswear (018)
	//   * **casual corner** -- Casual Corner (019)
	//   * **sears** -- Sears (020)
	//   * **jal** -- JAL (021)
	//   * **disney** -- Disney (023)
	//   * **maestro uk domestic** -- Maestro (024) - UK Domestic
	//   * **sams club consumer** -- Sams Club consumer (025)
	//   * **sams club business** -- Sams Club business (026)
	//   * **bill me later** -- Bill me later (028)
	//   * **bebe** -- Bebe (029)
	//   * **restoration hardware** -- Restoration Hardware (030)
	//   * **delta online** -- Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * **solo** -- Solo (032)
	//   * **visa electron** -- Visa Electron (033)
	//   * **dankort** -- Dankort (034)
	//   * **laser** -- Laser (035)
	//   * **carte bleue** -- Carte Bleue (036) — formerly Cartes Bancaires
	//   * **carta si** -- Carta Si (037)
	//   * **pinless debit** -- pinless debit (038)
	//   * **encoded account** -- encoded account (039)
	//   * **uatp** -- UATP (040)
	//   * **household** -- Household (041)
	//   * **maestro international** -- Maestro (042) - International
	//   * **ge money uk** -- GE Money UK (043)
	//   * **korean cards** -- Korean cards (044)
	//   * **style** -- Style (045)
	//   * **jcrew** -- JCrew (046)
	//   * **payease china processing ewallet** -- PayEase China processing eWallet (047)
	//   * **payease china processing bank transfer** -- PayEase China processing bank transfer (048)
	//   * **meijer private label** -- Meijer Private Label (049)
	//   * **hipercard** -- Hipercard (050) — supported only by the Comercio Latino processor.
	//   * **aura** -- Aura (051) — supported only by the Comercio Latino processor.
	//   * **redecard** -- Redecard (052)
	//   * **elo** -- Elo (054) — supported only by the Comercio Latino processor.
	//   * **capital one private label** -- Capital One Private Label (055)
	//   * **synchrony private label** -- Synchrony Private Label (056)
	//   * **costco private label** -- Costco Private Label (057)
	//   * **mada** -- mada (060)
	//   * **china union pay** -- China Union Pay (062)
	//   * **falabella private label** -- Falabella private label (063)
	//
	// Required: true
	Type *string `json:"type"`

	// Card Use As Field. Supported value of `pinless debit` only. Only for use with Pinless Debit tokens.
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this create payment instrument params body card
func (o *CreatePaymentInstrumentParamsBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyCard) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyCard) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyCard) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyCard) validateType(formats strfmt.Registry) error {

	if err := validate.Required("createPaymentInstrumentRequest"+"."+"card"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyCard) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifier create payment instrument params body instrument identifier
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifier
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifier struct {

	// links
	Links *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard `json:"card,omitempty"`

	// The ID of the existing instrument identifier to be linked to the newly created payment instrument.
	// Max Length: 32
	// Min Length: 16
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *CreatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 16); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 32); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount create payment instrument params body instrument identifier bank account
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier bank account
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard create payment instrument params body instrument identifier card
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier card
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks create payment instrument params body instrument identifier links
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks struct {

	// ancestor
	Ancestor *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf `json:"self,omitempty"`

	// successor
	Successor *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier links
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor create payment instrument params body instrument identifier links ancestor
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier links ancestor
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf create payment instrument params body instrument identifier links self
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier links self
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor create payment instrument params body instrument identifier links successor
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier links successor
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata create payment instrument params body instrument identifier metadata
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier metadata
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation create payment instrument params body instrument identifier processing information
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier processing information
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions create payment instrument params body instrument identifier processing information authorization options
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier processing information authorization options
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator create payment instrument params body instrument identifier processing information authorization options initiator
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier processing information authorization options initiator
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction create payment instrument params body instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this create payment instrument params body instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createPaymentInstrumentRequest"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyLinks create payment instrument params body links
swagger:model CreatePaymentInstrumentParamsBodyLinks
*/
type CreatePaymentInstrumentParamsBodyLinks struct {

	// ancestor
	Ancestor *CreatePaymentInstrumentParamsBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *CreatePaymentInstrumentParamsBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *CreatePaymentInstrumentParamsBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this create payment instrument params body links
func (o *CreatePaymentInstrumentParamsBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreatePaymentInstrumentParamsBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyLinksAncestor create payment instrument params body links ancestor
swagger:model CreatePaymentInstrumentParamsBodyLinksAncestor
*/
type CreatePaymentInstrumentParamsBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument params body links ancestor
func (o *CreatePaymentInstrumentParamsBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyLinksSelf create payment instrument params body links self
swagger:model CreatePaymentInstrumentParamsBodyLinksSelf
*/
type CreatePaymentInstrumentParamsBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument params body links self
func (o *CreatePaymentInstrumentParamsBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyLinksSuccessor create payment instrument params body links successor
swagger:model CreatePaymentInstrumentParamsBodyLinksSuccessor
*/
type CreatePaymentInstrumentParamsBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create payment instrument params body links successor
func (o *CreatePaymentInstrumentParamsBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyMerchantInformation create payment instrument params body merchant information
swagger:model CreatePaymentInstrumentParamsBodyMerchantInformation
*/
type CreatePaymentInstrumentParamsBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *CreatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this create payment instrument params body merchant information
func (o *CreatePaymentInstrumentParamsBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor create payment instrument params body merchant information merchant descriptor
swagger:model CreatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor
*/
type CreatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor struct {

	// Alternate information for your business. This API field overrides the company entry description value in your CyberSource account.
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this create payment instrument params body merchant information merchant descriptor
func (o *CreatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyMetaData create payment instrument params body meta data
swagger:model CreatePaymentInstrumentParamsBodyMetaData
*/
type CreatePaymentInstrumentParamsBodyMetaData struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this create payment instrument params body meta data
func (o *CreatePaymentInstrumentParamsBodyMetaData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyMetaData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyMetaData) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyProcessingInformation create payment instrument params body processing information
swagger:model CreatePaymentInstrumentParamsBodyProcessingInformation
*/
type CreatePaymentInstrumentParamsBodyProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *CreatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Indicates that the payments for this customer profile are for the Bill Payment program. Possible values:
	//   * false: Not a Visa Bill Payment.
	//   * true: Visa Bill Payment.
	//
	BillPaymentProgramEnabled *bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this create payment instrument params body processing information
func (o *CreatePaymentInstrumentParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePaymentInstrumentParamsBodyProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createPaymentInstrumentRequest" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions create payment instrument params body processing information bank transfer options
swagger:model CreatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions
*/
type CreatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions struct {

	// **Important** This field is required if your processor is TeleCheck.
	//
	// Code that specifies the authorization method for the transaction. Possible values:
	//
	// - **CCD**: corporate cash disbursement. Charge or credit against a business checking account. You can use one-time or recurring CCD transactions to transfer funds to or from a corporate entity. A standing authorization is required for recurring transactions.
	// - **PPD**: prearranged payment and deposit entry. Charge or credit against a personal checking or savings account. You can originate a PPD entry only when the payment and deposit terms between you and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions.
	// - **TEL**: telephone-initiated entry. One-time charge against a personal checking or savings account. You can originate a TEL entry only when there is a business relationship between you and the customer or when the customer initiates a telephone call to you. For a TEL entry, you must obtain a payment authorization from the customer over the telephone. There is no recurring billing option for TEL.
	// - **WEB**: internet-initiated entry—charge against a personal checking or savings account. You can originate a one-time or recurring WEB entry when the customer initiates the transaction over the Internet. For a WEB entry, you must obtain payment authorization from the customer over the Internet.
	//
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this create payment instrument params body processing information bank transfer options
func (o *CreatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res CreatePaymentInstrumentParamsBodyProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
