// Code generated by go-swagger; DO NOT EDIT.

package payment_instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payment instrument API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment instrument API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePaymentInstrument(params *CreatePaymentInstrumentParams) (*CreatePaymentInstrumentCreated, error)

	DeletePaymentInstrument(params *DeletePaymentInstrumentParams) (*DeletePaymentInstrumentNoContent, error)

	GetPaymentInstrument(params *GetPaymentInstrumentParams) (*GetPaymentInstrumentOK, error)

	UpdatePaymentInstrument(params *UpdatePaymentInstrumentParams) (*UpdatePaymentInstrumentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePaymentInstrument creates a payment instrument
*/
func (a *Client) CreatePaymentInstrument(params *CreatePaymentInstrumentParams) (*CreatePaymentInstrumentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPaymentInstrument",
		Method:             "POST",
		PathPattern:        "/tms/v1/paymentinstruments",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePaymentInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentInstrumentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPaymentInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeletePaymentInstrument deletes a payment instrument
*/
func (a *Client) DeletePaymentInstrument(params *DeletePaymentInstrumentParams) (*DeletePaymentInstrumentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePaymentInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePaymentInstrument",
		Method:             "DELETE",
		PathPattern:        "/tms/v1/paymentinstruments/{tokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePaymentInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePaymentInstrumentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePaymentInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentInstrument retrieves a payment instrument
*/
func (a *Client) GetPaymentInstrument(params *GetPaymentInstrumentParams) (*GetPaymentInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPaymentInstrument",
		Method:             "GET",
		PathPattern:        "/tms/v1/paymentinstruments/{tokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaymentInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdatePaymentInstrument updates a payment instrument
*/
func (a *Client) UpdatePaymentInstrument(params *UpdatePaymentInstrumentParams) (*UpdatePaymentInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePaymentInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePaymentInstrument",
		Method:             "PATCH",
		PathPattern:        "/tms/v1/paymentinstruments/{tokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePaymentInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePaymentInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updatePaymentInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
