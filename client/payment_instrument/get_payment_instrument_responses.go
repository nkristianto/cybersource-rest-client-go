// Code generated by go-swagger; DO NOT EDIT.

package payment_instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPaymentInstrumentReader is a Reader for the GetPaymentInstrument structure.
type GetPaymentInstrumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaymentInstrumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaymentInstrumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaymentInstrumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPaymentInstrumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPaymentInstrumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetPaymentInstrumentGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewGetPaymentInstrumentFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPaymentInstrumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPaymentInstrumentOK creates a GetPaymentInstrumentOK with default headers values
func NewGetPaymentInstrumentOK() *GetPaymentInstrumentOK {
	return &GetPaymentInstrumentOK{}
}

/*GetPaymentInstrumentOK handles this case with default header values.

An existing Payment Instrument associated with the supplied `tokenId` has been returned.
*/
type GetPaymentInstrumentOK struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload *GetPaymentInstrumentOKBody
}

func (o *GetPaymentInstrumentOK) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{tokenId}][%d] getPaymentInstrumentOK  %+v", 200, o.Payload)
}

func (o *GetPaymentInstrumentOK) GetPayload() *GetPaymentInstrumentOKBody {
	return o.Payload
}

func (o *GetPaymentInstrumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	o.Payload = new(GetPaymentInstrumentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentBadRequest creates a GetPaymentInstrumentBadRequest with default headers values
func NewGetPaymentInstrumentBadRequest() *GetPaymentInstrumentBadRequest {
	return &GetPaymentInstrumentBadRequest{}
}

/*GetPaymentInstrumentBadRequest handles this case with default header values.

Bad Request. A required header value could be missing.
*/
type GetPaymentInstrumentBadRequest struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetPaymentInstrumentBadRequestBodyItems0
}

func (o *GetPaymentInstrumentBadRequest) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{tokenId}][%d] getPaymentInstrumentBadRequest  %+v", 400, o.Payload)
}

func (o *GetPaymentInstrumentBadRequest) GetPayload() []*GetPaymentInstrumentBadRequestBodyItems0 {
	return o.Payload
}

func (o *GetPaymentInstrumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentForbidden creates a GetPaymentInstrumentForbidden with default headers values
func NewGetPaymentInstrumentForbidden() *GetPaymentInstrumentForbidden {
	return &GetPaymentInstrumentForbidden{}
}

/*GetPaymentInstrumentForbidden handles this case with default header values.

Forbidden. The profile might not have permission to perform the token operation.
*/
type GetPaymentInstrumentForbidden struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetPaymentInstrumentForbiddenBodyItems0
}

func (o *GetPaymentInstrumentForbidden) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{tokenId}][%d] getPaymentInstrumentForbidden  %+v", 403, o.Payload)
}

func (o *GetPaymentInstrumentForbidden) GetPayload() []*GetPaymentInstrumentForbiddenBodyItems0 {
	return o.Payload
}

func (o *GetPaymentInstrumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentNotFound creates a GetPaymentInstrumentNotFound with default headers values
func NewGetPaymentInstrumentNotFound() *GetPaymentInstrumentNotFound {
	return &GetPaymentInstrumentNotFound{}
}

/*GetPaymentInstrumentNotFound handles this case with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type GetPaymentInstrumentNotFound struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetPaymentInstrumentNotFoundBodyItems0
}

func (o *GetPaymentInstrumentNotFound) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{tokenId}][%d] getPaymentInstrumentNotFound  %+v", 404, o.Payload)
}

func (o *GetPaymentInstrumentNotFound) GetPayload() []*GetPaymentInstrumentNotFoundBodyItems0 {
	return o.Payload
}

func (o *GetPaymentInstrumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentGone creates a GetPaymentInstrumentGone with default headers values
func NewGetPaymentInstrumentGone() *GetPaymentInstrumentGone {
	return &GetPaymentInstrumentGone{}
}

/*GetPaymentInstrumentGone handles this case with default header values.

Token Not Available. The token has been deleted.
*/
type GetPaymentInstrumentGone struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetPaymentInstrumentGoneBodyItems0
}

func (o *GetPaymentInstrumentGone) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{tokenId}][%d] getPaymentInstrumentGone  %+v", 410, o.Payload)
}

func (o *GetPaymentInstrumentGone) GetPayload() []*GetPaymentInstrumentGoneBodyItems0 {
	return o.Payload
}

func (o *GetPaymentInstrumentGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentFailedDependency creates a GetPaymentInstrumentFailedDependency with default headers values
func NewGetPaymentInstrumentFailedDependency() *GetPaymentInstrumentFailedDependency {
	return &GetPaymentInstrumentFailedDependency{}
}

/*GetPaymentInstrumentFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type GetPaymentInstrumentFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetPaymentInstrumentFailedDependencyBodyItems0
}

func (o *GetPaymentInstrumentFailedDependency) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{tokenId}][%d] getPaymentInstrumentFailedDependency  %+v", 424, o.Payload)
}

func (o *GetPaymentInstrumentFailedDependency) GetPayload() []*GetPaymentInstrumentFailedDependencyBodyItems0 {
	return o.Payload
}

func (o *GetPaymentInstrumentFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentInternalServerError creates a GetPaymentInstrumentInternalServerError with default headers values
func NewGetPaymentInstrumentInternalServerError() *GetPaymentInstrumentInternalServerError {
	return &GetPaymentInstrumentInternalServerError{}
}

/*GetPaymentInstrumentInternalServerError handles this case with default header values.

Unexpected error.
*/
type GetPaymentInstrumentInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetPaymentInstrumentInternalServerErrorBodyItems0
}

func (o *GetPaymentInstrumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{tokenId}][%d] getPaymentInstrumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPaymentInstrumentInternalServerError) GetPayload() []*GetPaymentInstrumentInternalServerErrorBodyItems0 {
	return o.Payload
}

func (o *GetPaymentInstrumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPaymentInstrumentBadRequestBodyItems0 get payment instrument bad request body items0
swagger:model GetPaymentInstrumentBadRequestBodyItems0
*/
type GetPaymentInstrumentBadRequestBodyItems0 struct {

	// details
	Details *GetPaymentInstrumentBadRequestBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument bad request body items0
func (o *GetPaymentInstrumentBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentBadRequestBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentBadRequestBodyItems0Details get payment instrument bad request body items0 details
swagger:model GetPaymentInstrumentBadRequestBodyItems0Details
*/
type GetPaymentInstrumentBadRequestBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument bad request body items0 details
func (o *GetPaymentInstrumentBadRequestBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentBadRequestBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentFailedDependencyBodyItems0 get payment instrument failed dependency body items0
swagger:model GetPaymentInstrumentFailedDependencyBodyItems0
*/
type GetPaymentInstrumentFailedDependencyBodyItems0 struct {

	// details
	Details *GetPaymentInstrumentFailedDependencyBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument failed dependency body items0
func (o *GetPaymentInstrumentFailedDependencyBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentFailedDependencyBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentFailedDependencyBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentFailedDependencyBodyItems0Details get payment instrument failed dependency body items0 details
swagger:model GetPaymentInstrumentFailedDependencyBodyItems0Details
*/
type GetPaymentInstrumentFailedDependencyBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument failed dependency body items0 details
func (o *GetPaymentInstrumentFailedDependencyBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentFailedDependencyBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentForbiddenBodyItems0 get payment instrument forbidden body items0
swagger:model GetPaymentInstrumentForbiddenBodyItems0
*/
type GetPaymentInstrumentForbiddenBodyItems0 struct {

	// details
	Details *GetPaymentInstrumentForbiddenBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument forbidden body items0
func (o *GetPaymentInstrumentForbiddenBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentForbiddenBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentForbiddenBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentForbiddenBodyItems0Details get payment instrument forbidden body items0 details
swagger:model GetPaymentInstrumentForbiddenBodyItems0Details
*/
type GetPaymentInstrumentForbiddenBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument forbidden body items0 details
func (o *GetPaymentInstrumentForbiddenBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentForbiddenBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentGoneBodyItems0 get payment instrument gone body items0
swagger:model GetPaymentInstrumentGoneBodyItems0
*/
type GetPaymentInstrumentGoneBodyItems0 struct {

	// details
	Details *GetPaymentInstrumentGoneBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument gone body items0
func (o *GetPaymentInstrumentGoneBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentGoneBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentGoneBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentGoneBodyItems0Details get payment instrument gone body items0 details
swagger:model GetPaymentInstrumentGoneBodyItems0Details
*/
type GetPaymentInstrumentGoneBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument gone body items0 details
func (o *GetPaymentInstrumentGoneBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentGoneBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentInternalServerErrorBodyItems0 get payment instrument internal server error body items0
swagger:model GetPaymentInstrumentInternalServerErrorBodyItems0
*/
type GetPaymentInstrumentInternalServerErrorBodyItems0 struct {

	// details
	Details *GetPaymentInstrumentInternalServerErrorBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument internal server error body items0
func (o *GetPaymentInstrumentInternalServerErrorBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentInternalServerErrorBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentInternalServerErrorBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentInternalServerErrorBodyItems0Details get payment instrument internal server error body items0 details
swagger:model GetPaymentInstrumentInternalServerErrorBodyItems0Details
*/
type GetPaymentInstrumentInternalServerErrorBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument internal server error body items0 details
func (o *GetPaymentInstrumentInternalServerErrorBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentInternalServerErrorBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentNotFoundBodyItems0 get payment instrument not found body items0
swagger:model GetPaymentInstrumentNotFoundBodyItems0
*/
type GetPaymentInstrumentNotFoundBodyItems0 struct {

	// details
	Details *GetPaymentInstrumentNotFoundBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument not found body items0
func (o *GetPaymentInstrumentNotFoundBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentNotFoundBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentNotFoundBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentNotFoundBodyItems0Details get payment instrument not found body items0 details
swagger:model GetPaymentInstrumentNotFoundBodyItems0Details
*/
type GetPaymentInstrumentNotFoundBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument not found body items0 details
func (o *GetPaymentInstrumentNotFoundBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentNotFoundBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBody tmsV1PaymentinstrumentsPatch200Response
swagger:model GetPaymentInstrumentOKBody
*/
type GetPaymentInstrumentOKBody struct {

	// links
	Links *GetPaymentInstrumentOKBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetPaymentInstrumentOKBodyBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetPaymentInstrumentOKBodyBillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *GetPaymentInstrumentOKBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *GetPaymentInstrumentOKBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *GetPaymentInstrumentOKBodyInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *GetPaymentInstrumentOKBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// meta data
	MetaData *GetPaymentInstrumentOKBodyMetaData `json:"metaData,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetPaymentInstrumentOKBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this get payment instrument o k body
func (o *GetPaymentInstrumentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateMetaData(formats strfmt.Registry) error {

	if swag.IsZero(o.MetaData) { // not required
		return nil
	}

	if o.MetaData != nil {
		if err := o.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "metaData")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBankAccount get payment instrument o k body bank account
swagger:model GetPaymentInstrumentOKBodyBankAccount
*/
type GetPaymentInstrumentOKBodyBankAccount struct {

	// Checking account type. Possible values:
	//   * C: checking
	//   * S: savings (USD only)
	//   * X: corporate checking (USD only)
	//   * G: general ledger
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument o k body bank account
func (o *GetPaymentInstrumentOKBodyBankAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBillTo get payment instrument o k body bill to
swagger:model GetPaymentInstrumentOKBodyBillTo
*/
type GetPaymentInstrumentOKBodyBillTo struct {

	// First line of the billing street address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. For an address in the U.S. or Canada, use the State, Province, and Territory Codes for the United States and Canada.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the billing address. Accepts input in the ISO 3166-1 standard, stores as ISO 3166-1-Alpha-2.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 3
	// Min Length: 2
	Country string `json:"country,omitempty"`

	// Customer’s email address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// Customer’s first name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the billing address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer phone number. When you create a customer profile, the requirements depend on the payment method:
	//   * Credit cards — optional.
	//   * Electronic checks — contact your payment processor representative to find out if this field is required or optional.
	//   * PINless debits — optional.
	//
	// Max Length: 32
	// Min Length: 6
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	// **Example** 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space]
	// [numeric][alpha][numeric]
	// Example A1B 2C3
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get payment instrument o k body bill to
func (o *GetPaymentInstrumentOKBodyBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"country", "body", string(o.Country), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"email", "body", string(o.Email), 320); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 32); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBillTo) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBuyerInformation get payment instrument o k body buyer information
swagger:model GetPaymentInstrumentOKBodyBuyerInformation
*/
type GetPaymentInstrumentOKBodyBuyerInformation struct {

	// Tax identifier for the customer’s company.
	//
	// **Important**:
	// Contact your TeleCheck representative to find out whether this field is required or optional.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used by the customer. Accepts input in the ISO 4217 standard, stores as ISO 4217 Alpha.
	// Max Length: 3
	// Min Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer.
	//
	// Format: `YYYY-MM-DD` or `YYYYMMDD`
	//
	// Max Length: 10
	// Min Length: 8
	DateOBirth string `json:"dateOBirth,omitempty"`

	// personal identification
	PersonalIdentification []*GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this get payment instrument o k body buyer information
func (o *GetPaymentInstrumentOKBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"buyerInformation"+"."+"companyTaxID", "body", string(o.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformation) validateDateOBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOBirth) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 10); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentInstrumentOK" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 get payment instrument o k body buyer information personal identification items0
swagger:model GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0
*/
type GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 struct {

	// Customer's identification number.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// Type of personal identification.
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Valid values:
	// - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument o k body buyer information personal identification items0
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy get payment instrument o k body buyer information personal identification items0 issued by
swagger:model GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy
*/
type GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// State or province in which the customer’s driver’s license was issued. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this get payment instrument o k body buyer information personal identification items0 issued by
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyCard get payment instrument o k body card
swagger:model GetPaymentInstrumentOKBodyCard
*/
type GetPaymentInstrumentOKBodyCard struct {

	// Two-digit month in which the credit card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.
	//
	// Important:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 2
	// Min Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// **FDC Nashville Global and FDMS South**
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For details, see [Relaxed Requirements for Address Data and Expiration Date.](https://www.cybersource.com/developers/integration_methods/relax_avs/).
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.'
	//
	// Max Length: 4
	// Min Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder.
	// Max Length: 2
	// Min Length: 1
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `MM`.
	// Possible values: `01` through `12`.
	//
	// Max Length: 2
	// Min Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// Max Length: 4
	// Min Length: 4
	StartYear string `json:"startYear,omitempty"`

	// Type of credit card. Possible values:
	//   * **visa** -- Visa (001)
	//   * **mastercard** -- Mastercard (002) - Eurocard—European regional brand of Mastercard
	//   * **american express** -- American Express (003)
	//   * **discover** -- Discover (004)
	//   * **diners club** -- Diners Club (005)
	//   * **carte blanche** -- Carte Blanche (006)
	//   * **jcb** -- JCB (007)
	//   * **optima** -- Optima (008)
	//   * **twinpay credit** -- Twinpay Credit (011)
	//   * **twinpay debit** -- Twinpay Debit (012)
	//   * **walmart** -- Walmart (013)
	//   * **enroute** -- EnRoute (014)
	//   * **lowes consumer** -- Lowes consumer (015)
	//   * **home depot consumer** -- Home Depot consumer (016)
	//   * **mbna** -- MBNA (017)
	//   * **dicks sportswear** -- Dicks Sportswear (018)
	//   * **casual corner** -- Casual Corner (019)
	//   * **sears** -- Sears (020)
	//   * **jal** -- JAL (021)
	//   * **disney** -- Disney (023)
	//   * **maestro uk domestic** -- Maestro (024) - UK Domestic
	//   * **sams club consumer** -- Sams Club consumer (025)
	//   * **sams club business** -- Sams Club business (026)
	//   * **bill me later** -- Bill me later (028)
	//   * **bebe** -- Bebe (029)
	//   * **restoration hardware** -- Restoration Hardware (030)
	//   * **delta online** -- Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * **solo** -- Solo (032)
	//   * **visa electron** -- Visa Electron (033)
	//   * **dankort** -- Dankort (034)
	//   * **laser** -- Laser (035)
	//   * **carte bleue** -- Carte Bleue (036) — formerly Cartes Bancaires
	//   * **carta si** -- Carta Si (037)
	//   * **pinless debit** -- pinless debit (038)
	//   * **encoded account** -- encoded account (039)
	//   * **uatp** -- UATP (040)
	//   * **household** -- Household (041)
	//   * **maestro international** -- Maestro (042) - International
	//   * **ge money uk** -- GE Money UK (043)
	//   * **korean cards** -- Korean cards (044)
	//   * **style** -- Style (045)
	//   * **jcrew** -- JCrew (046)
	//   * **payease china processing ewallet** -- PayEase China processing eWallet (047)
	//   * **payease china processing bank transfer** -- PayEase China processing bank transfer (048)
	//   * **meijer private label** -- Meijer Private Label (049)
	//   * **hipercard** -- Hipercard (050) — supported only by the Comercio Latino processor.
	//   * **aura** -- Aura (051) — supported only by the Comercio Latino processor.
	//   * **redecard** -- Redecard (052)
	//   * **elo** -- Elo (054) — supported only by the Comercio Latino processor.
	//   * **capital one private label** -- Capital One Private Label (055)
	//   * **synchrony private label** -- Synchrony Private Label (056)
	//   * **costco private label** -- Costco Private Label (057)
	//   * **mada** -- mada (060)
	//   * **china union pay** -- China Union Pay (062)
	//   * **falabella private label** -- Falabella private label (063)
	//
	// Required: true
	Type *string `json:"type"`

	// Card Use As Field. Supported value of `pinless debit` only. Only for use with Pinless Debit tokens.
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this get payment instrument o k body card
func (o *GetPaymentInstrumentOKBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateType(formats strfmt.Registry) error {

	if err := validate.Required("getPaymentInstrumentOK"+"."+"card"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyCard) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifier get payment instrument o k body instrument identifier
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifier
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifier struct {

	// links
	Links *GetPaymentInstrumentOKBodyInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *GetPaymentInstrumentOKBodyInstrumentIdentifierCard `json:"card,omitempty"`

	// The ID of the existing instrument identifier to be linked to the newly created payment instrument.
	// Max Length: 32
	// Min Length: 16
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *GetPaymentInstrumentOKBodyInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 16); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 32); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount get payment instrument o k body instrument identifier bank account
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier bank account
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierCard get payment instrument o k body instrument identifier card
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierCard
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier card
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierLinks get payment instrument o k body instrument identifier links
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierLinks
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierLinks struct {

	// ancestor
	Ancestor *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSelf `json:"self,omitempty"`

	// successor
	Successor *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier links
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor get payment instrument o k body instrument identifier links ancestor
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier links ancestor
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSelf get payment instrument o k body instrument identifier links self
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSelf
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier links self
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor get payment instrument o k body instrument identifier links successor
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier links successor
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierMetadata get payment instrument o k body instrument identifier metadata
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierMetadata
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier metadata
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation get payment instrument o k body instrument identifier processing information
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier processing information
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions get payment instrument o k body instrument identifier processing information authorization options
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier processing information authorization options
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator get payment instrument o k body instrument identifier processing information authorization options initiator
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier processing information authorization options initiator
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction get payment instrument o k body instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyLinks get payment instrument o k body links
swagger:model GetPaymentInstrumentOKBodyLinks
*/
type GetPaymentInstrumentOKBodyLinks struct {

	// ancestor
	Ancestor *GetPaymentInstrumentOKBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *GetPaymentInstrumentOKBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *GetPaymentInstrumentOKBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this get payment instrument o k body links
func (o *GetPaymentInstrumentOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyLinksAncestor get payment instrument o k body links ancestor
swagger:model GetPaymentInstrumentOKBodyLinksAncestor
*/
type GetPaymentInstrumentOKBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body links ancestor
func (o *GetPaymentInstrumentOKBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyLinksSelf get payment instrument o k body links self
swagger:model GetPaymentInstrumentOKBodyLinksSelf
*/
type GetPaymentInstrumentOKBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body links self
func (o *GetPaymentInstrumentOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyLinksSuccessor get payment instrument o k body links successor
swagger:model GetPaymentInstrumentOKBodyLinksSuccessor
*/
type GetPaymentInstrumentOKBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body links successor
func (o *GetPaymentInstrumentOKBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyMerchantInformation get payment instrument o k body merchant information
swagger:model GetPaymentInstrumentOKBodyMerchantInformation
*/
type GetPaymentInstrumentOKBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this get payment instrument o k body merchant information
func (o *GetPaymentInstrumentOKBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor get payment instrument o k body merchant information merchant descriptor
swagger:model GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor
*/
type GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor struct {

	// Alternate information for your business. This API field overrides the company entry description value in your CyberSource account.
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this get payment instrument o k body merchant information merchant descriptor
func (o *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyMetaData get payment instrument o k body meta data
swagger:model GetPaymentInstrumentOKBodyMetaData
*/
type GetPaymentInstrumentOKBodyMetaData struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get payment instrument o k body meta data
func (o *GetPaymentInstrumentOKBodyMetaData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMetaData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMetaData) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyProcessingInformation get payment instrument o k body processing information
swagger:model GetPaymentInstrumentOKBodyProcessingInformation
*/
type GetPaymentInstrumentOKBodyProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Indicates that the payments for this customer profile are for the Bill Payment program. Possible values:
	//   * false: Not a Visa Bill Payment.
	//   * true: Visa Bill Payment.
	//
	BillPaymentProgramEnabled *bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this get payment instrument o k body processing information
func (o *GetPaymentInstrumentOKBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions get payment instrument o k body processing information bank transfer options
swagger:model GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions
*/
type GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions struct {

	// **Important** This field is required if your processor is TeleCheck.
	//
	// Code that specifies the authorization method for the transaction. Possible values:
	//
	// - **CCD**: corporate cash disbursement. Charge or credit against a business checking account. You can use one-time or recurring CCD transactions to transfer funds to or from a corporate entity. A standing authorization is required for recurring transactions.
	// - **PPD**: prearranged payment and deposit entry. Charge or credit against a personal checking or savings account. You can originate a PPD entry only when the payment and deposit terms between you and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions.
	// - **TEL**: telephone-initiated entry. One-time charge against a personal checking or savings account. You can originate a TEL entry only when there is a business relationship between you and the customer or when the customer initiates a telephone call to you. For a TEL entry, you must obtain a payment authorization from the customer over the telephone. There is no recurring billing option for TEL.
	// - **WEB**: internet-initiated entry—charge against a personal checking or savings account. You can originate a one-time or recurring WEB entry when the customer initiates the transaction over the Internet. For a WEB entry, you must obtain payment authorization from the customer over the Internet.
	//
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this get payment instrument o k body processing information bank transfer options
func (o *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
