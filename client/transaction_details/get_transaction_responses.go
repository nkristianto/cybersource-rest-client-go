// Code generated by go-swagger; DO NOT EDIT.

package transaction_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTransactionReader is a Reader for the GetTransaction structure.
type GetTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetTransactionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTransactionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionOK creates a GetTransactionOK with default headers values
func NewGetTransactionOK() *GetTransactionOK {
	return &GetTransactionOK{}
}

/*GetTransactionOK handles this case with default header values.

Successful response.
*/
type GetTransactionOK struct {
	Payload *GetTransactionOKBody
}

func (o *GetTransactionOK) Error() string {
	return fmt.Sprintf("[GET /tss/v2/transactions/{id}][%d] getTransactionOK  %+v", 200, o.Payload)
}

func (o *GetTransactionOK) GetPayload() *GetTransactionOKBody {
	return o.Payload
}

func (o *GetTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetTransactionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionNotFound creates a GetTransactionNotFound with default headers values
func NewGetTransactionNotFound() *GetTransactionNotFound {
	return &GetTransactionNotFound{}
}

/*GetTransactionNotFound handles this case with default header values.

The specified resource not found in the system.
*/
type GetTransactionNotFound struct {
}

func (o *GetTransactionNotFound) Error() string {
	return fmt.Sprintf("[GET /tss/v2/transactions/{id}][%d] getTransactionNotFound ", 404)
}

func (o *GetTransactionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTransactionInternalServerError creates a GetTransactionInternalServerError with default headers values
func NewGetTransactionInternalServerError() *GetTransactionInternalServerError {
	return &GetTransactionInternalServerError{}
}

/*GetTransactionInternalServerError handles this case with default header values.

Unexpected server error
*/
type GetTransactionInternalServerError struct {
}

func (o *GetTransactionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tss/v2/transactions/{id}][%d] getTransactionInternalServerError ", 500)
}

func (o *GetTransactionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetTransactionOKBody tssV2TransactionsGet200Response
swagger:model GetTransactionOKBody
*/
type GetTransactionOKBody struct {

	// links
	Links *GetTransactionOKBodyLinks `json:"_links,omitempty"`

	// application information
	ApplicationInformation *GetTransactionOKBodyApplicationInformation `json:"applicationInformation,omitempty"`

	// buyer information
	BuyerInformation *GetTransactionOKBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *GetTransactionOKBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// consumer authentication information
	ConsumerAuthenticationInformation *GetTransactionOKBodyConsumerAuthenticationInformation `json:"consumerAuthenticationInformation,omitempty"`

	// device information
	DeviceInformation *GetTransactionOKBodyDeviceInformation `json:"deviceInformation,omitempty"`

	// error information
	ErrorInformation *GetTransactionOKBodyErrorInformation `json:"errorInformation,omitempty"`

	// fraud marking information
	FraudMarkingInformation *GetTransactionOKBodyFraudMarkingInformation `json:"fraudMarkingInformation,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request. It is also appended to the endpoint of the resource.
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// installment information
	InstallmentInformation *GetTransactionOKBodyInstallmentInformation `json:"installmentInformation,omitempty"`

	// The object containing the custom data that the merchant defines.
	//
	MerchantDefinedInformation []*MerchantDefinedInformationItems0 `json:"merchantDefinedInformation"`

	// Your CyberSource merchant ID.
	MerchantID string `json:"merchantId,omitempty"`

	// merchant information
	MerchantInformation *GetTransactionOKBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	OrderInformation *GetTransactionOKBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *GetTransactionOKBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// point of sale information
	PointOfSaleInformation *GetTransactionOKBodyPointOfSaleInformation `json:"pointOfSaleInformation,omitempty"`

	// processing information
	ProcessingInformation *GetTransactionOKBodyProcessingInformation `json:"processingInformation,omitempty"`

	// processor information
	ProcessorInformation *GetTransactionOKBodyProcessorInformation `json:"processorInformation,omitempty"`

	// The reconciliation id for the submitted transaction. This value is not returned for all processors.
	//
	// Max Length: 60
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// risk information
	RiskInformation *GetTransactionOKBodyRiskInformation `json:"riskInformation,omitempty"`

	// Payment Request Id
	// Max Length: 26
	RootID string `json:"rootId,omitempty"`

	// sender information
	SenderInformation *GetTransactionOKBodySenderInformation `json:"senderInformation,omitempty"`

	// The status of the submitted transaction.
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the
	// time. The `Z` indicates UTC.
	//
	SubmitTimeUTC string `json:"submitTimeUTC,omitempty"`
}

// Validate validates this get transaction o k body
func (o *GetTransactionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateApplicationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsumerAuthenticationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFraudMarkingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstallmentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDefinedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePointOfSaleInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRiskInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRootID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSenderInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateApplicationInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ApplicationInformation) { // not required
		return nil
	}

	if o.ApplicationInformation != nil {
		if err := o.ApplicationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "applicationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateClientReferenceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateConsumerAuthenticationInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
		return nil
	}

	if o.ConsumerAuthenticationInformation != nil {
		if err := o.ConsumerAuthenticationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateDeviceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.DeviceInformation) { // not required
		return nil
	}

	if o.DeviceInformation != nil {
		if err := o.DeviceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "deviceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateErrorInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateFraudMarkingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.FraudMarkingInformation) { // not required
		return nil
	}

	if o.FraudMarkingInformation != nil {
		if err := o.FraudMarkingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "fraudMarkingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"id", "body", string(o.ID), 26); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBody) validateInstallmentInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.InstallmentInformation) { // not required
		return nil
	}

	if o.InstallmentInformation != nil {
		if err := o.InstallmentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "installmentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateMerchantDefinedInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDefinedInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.MerchantDefinedInformation); i++ {
		if swag.IsZero(o.MerchantDefinedInformation[i]) { // not required
			continue
		}

		if o.MerchantDefinedInformation[i] != nil {
			if err := o.MerchantDefinedInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionOK" + "." + "merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetTransactionOKBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateOrderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validatePaymentInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validatePointOfSaleInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.PointOfSaleInformation) { // not required
		return nil
	}

	if o.PointOfSaleInformation != nil {
		if err := o.PointOfSaleInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "pointOfSaleInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateProcessorInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateReconciliationID(formats strfmt.Registry) error {

	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"reconciliationId", "body", string(o.ReconciliationID), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBody) validateRiskInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.RiskInformation) { // not required
		return nil
	}

	if o.RiskInformation != nil {
		if err := o.RiskInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "riskInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBody) validateRootID(formats strfmt.Registry) error {

	if swag.IsZero(o.RootID) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"rootId", "body", string(o.RootID), 26); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBody) validateSenderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.SenderInformation) { // not required
		return nil
	}

	if o.SenderInformation != nil {
		if err := o.SenderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "senderInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBody) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyApplicationInformation get transaction o k body application information
swagger:model GetTransactionOKBodyApplicationInformation
*/
type GetTransactionOKBodyApplicationInformation struct {

	// applications
	Applications []*GetTransactionOKBodyApplicationInformationApplicationsItems0 `json:"applications"`

	// Indicates whether the service request was successful.
	// Possible values:
	//
	// - `-1`: An error occurred.
	// - `0`: The request was declined.
	// - `1`: The request was successful.
	//
	// For details, see `auth_rcode` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	RCode string `json:"rCode,omitempty"`

	// One-word description of the result of the application.
	//
	// For details, see `auth_rflag` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	RFlag string `json:"rFlag,omitempty"`

	// Indicates the reason why a request succeeded or failed and possible action to take if a request fails.
	//
	// For details, see the appendix of reason codes in the documentation for the relevant payment method.
	//
	ReasonCode string `json:"reasonCode,omitempty"`

	// The status of the submitted transaction.
	Status string `json:"status,omitempty"`
}

// Validate validates this get transaction o k body application information
func (o *GetTransactionOKBodyApplicationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyApplicationInformation) validateApplications(formats strfmt.Registry) error {

	if swag.IsZero(o.Applications) { // not required
		return nil
	}

	for i := 0; i < len(o.Applications); i++ {
		if swag.IsZero(o.Applications[i]) { // not required
			continue
		}

		if o.Applications[i] != nil {
			if err := o.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionOK" + "." + "applicationInformation" + "." + "applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyApplicationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyApplicationInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyApplicationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyApplicationInformationApplicationsItems0 get transaction o k body application information applications items0
swagger:model GetTransactionOKBodyApplicationInformationApplicationsItems0
*/
type GetTransactionOKBodyApplicationInformationApplicationsItems0 struct {

	// The CyberSource payment application processed for the transaction.
	//
	Name string `json:"name,omitempty"`

	// Indicates whether the service request was successful.
	// Possible values:
	//
	// - `-1`: An error occurred.
	// - `0`: The request was declined.
	// - `1`: The request was successful.
	//
	RCode string `json:"rCode,omitempty"`

	// One-word description of the result of the application.
	//
	RFlag string `json:"rFlag,omitempty"`

	// Message that explains the reply flag for the application.
	//
	RMessage string `json:"rMessage,omitempty"`

	// 3-digit reason code that indicates why the customer profile payment succeeded or failed.
	ReasonCode int64 `json:"reasonCode,omitempty"`

	// Reference number that you use to reconcile your CyberSource reports with your processor reports.
	//
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// The description for this field is not available.
	ReturnCode int64 `json:"returnCode,omitempty"`

	// The description for this field is not available.
	Status string `json:"status,omitempty"`
}

// Validate validates this get transaction o k body application information applications items0
func (o *GetTransactionOKBodyApplicationInformationApplicationsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyApplicationInformationApplicationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyApplicationInformationApplicationsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyApplicationInformationApplicationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyBuyerInformation get transaction o k body buyer information
swagger:model GetTransactionOKBodyBuyerInformation
*/
type GetTransactionOKBodyBuyerInformation struct {

	// The merchant's password that CyberSource hashes and stores as a hashed password.
	//
	// For details about this field, see the `customer_password` field description in [Decision Manager Developer Guide Using the SCMP API.](https://www.cybersource.com/developers/documentation/fraud_management/)
	//
	// Max Length: 100
	HashedPassword string `json:"hashedPassword,omitempty"`

	// Your identifier for the customer.
	//
	// When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.
	//
	// #### Comercio Latino
	// For recurring payments in Mexico, the value is the customer’s contract number.
	// Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.
	//
	// #### Worldpay VAP
	// For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order
	// given, for a customer account ID value and uses the first value it finds:
	// 1. `customer_account_id` value in the follow-on credit request
	// 2. Customer account ID value that was used for the capture that is being credited
	// 3. Customer account ID value that was used for the original authorization
	// If a customer account ID value cannot be found in any of these locations, then no value is used.
	//
	// For processor-specific information, see the `customer_account_id` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 100
	MerchantCustomerID string `json:"merchantCustomerId,omitempty"`
}

// Validate validates this get transaction o k body buyer information
func (o *GetTransactionOKBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHashedPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyBuyerInformation) validateHashedPassword(formats strfmt.Registry) error {

	if swag.IsZero(o.HashedPassword) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"buyerInformation"+"."+"hashedPassword", "body", string(o.HashedPassword), 100); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyBuyerInformation) validateMerchantCustomerID(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantCustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"buyerInformation"+"."+"merchantCustomerId", "body", string(o.MerchantCustomerID), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyClientReferenceInformation get transaction o k body client reference information
swagger:model GetTransactionOKBodyClientReferenceInformation
*/
type GetTransactionOKBodyClientReferenceInformation struct {

	// The application name of client which is used to submit the request.
	ApplicationName string `json:"applicationName,omitempty"`

	// The description for this field is not available.
	ApplicationUser string `json:"applicationUser,omitempty"`

	// The description for this field is not available.
	ApplicationVersion string `json:"applicationVersion,omitempty"`

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// For information about tracking orders, see "Tracking and Reconciling Your Orders" in [Getting Started with CyberSource Advanced for the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Getting_Started_SCMP/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Brief description of the order or any comment you wish to add to the order.
	// Max Length: 255
	Comments string `json:"comments,omitempty"`
}

// Validate validates this get transaction o k body client reference information
func (o *GetTransactionOKBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"clientReferenceInformation"+"."+"code", "body", string(o.Code), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyClientReferenceInformation) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(o.Comments) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"clientReferenceInformation"+"."+"comments", "body", string(o.Comments), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyConsumerAuthenticationInformation get transaction o k body consumer authentication information
swagger:model GetTransactionOKBodyConsumerAuthenticationInformation
*/
type GetTransactionOKBodyConsumerAuthenticationInformation struct {

	// Cardholder authentication verification value (CAVV).
	// Max Length: 40
	Cavv string `json:"cavv,omitempty"`

	// Raw electronic commerce indicator (ECI).
	//
	// For details, see `eci_raw` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 2
	EciRaw string `json:"eciRaw,omitempty"`

	// Payer auth Transaction identifier.
	TransactionID string `json:"transactionId,omitempty"`

	// Transaction identifier.
	//
	// For details, see `xid` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 40
	Xid string `json:"xid,omitempty"`
}

// Validate validates this get transaction o k body consumer authentication information
func (o *GetTransactionOKBodyConsumerAuthenticationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCavv(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEciRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateXid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyConsumerAuthenticationInformation) validateCavv(formats strfmt.Registry) error {

	if swag.IsZero(o.Cavv) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"consumerAuthenticationInformation"+"."+"cavv", "body", string(o.Cavv), 40); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyConsumerAuthenticationInformation) validateEciRaw(formats strfmt.Registry) error {

	if swag.IsZero(o.EciRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"consumerAuthenticationInformation"+"."+"eciRaw", "body", string(o.EciRaw), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyConsumerAuthenticationInformation) validateXid(formats strfmt.Registry) error {

	if swag.IsZero(o.Xid) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"consumerAuthenticationInformation"+"."+"xid", "body", string(o.Xid), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyConsumerAuthenticationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyConsumerAuthenticationInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyConsumerAuthenticationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyDeviceInformation get transaction o k body device information
swagger:model GetTransactionOKBodyDeviceInformation
*/
type GetTransactionOKBodyDeviceInformation struct {

	// Whether the customer’s browser accepts cookies. This field can contain one of the following values:
	// - `yes`: The customer’s browser accepts cookies.
	// - `no`: The customer’s browser does not accept cookies.
	//
	CookiesAccepted string `json:"cookiesAccepted,omitempty"`

	// DNS resolved hostname from `ipAddress`.
	// Max Length: 60
	HostName string `json:"hostName,omitempty"`

	// IP address of the customer.
	//
	// Max Length: 48
	IPAddress string `json:"ipAddress,omitempty"`
}

// Validate validates this get transaction o k body device information
func (o *GetTransactionOKBodyDeviceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyDeviceInformation) validateHostName(formats strfmt.Registry) error {

	if swag.IsZero(o.HostName) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"deviceInformation"+"."+"hostName", "body", string(o.HostName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyDeviceInformation) validateIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(o.IPAddress) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"deviceInformation"+"."+"ipAddress", "body", string(o.IPAddress), 48); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyDeviceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyDeviceInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyDeviceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyErrorInformation get transaction o k body error information
swagger:model GetTransactionOKBodyErrorInformation
*/
type GetTransactionOKBodyErrorInformation struct {

	// details
	Details []*GetTransactionOKBodyErrorInformationDetailsItems0 `json:"details"`

	// The user-facing description for why a request succeeded or failed.
	//
	Message string `json:"message,omitempty"`

	// 1-word description of why a request succeeded or failed.
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get transaction o k body error information
func (o *GetTransactionOKBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyErrorInformation) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionOK" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyErrorInformationDetailsItems0 get transaction o k body error information details items0
swagger:model GetTransactionOKBodyErrorInformationDetailsItems0
*/
type GetTransactionOKBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get transaction o k body error information details items0
func (o *GetTransactionOKBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyFraudMarkingInformation get transaction o k body fraud marking information
swagger:model GetTransactionOKBodyFraudMarkingInformation
*/
type GetTransactionOKBodyFraudMarkingInformation struct {

	// Reason for adding the transaction to the negative list. This field can contain one of the following values:
	// - fraud_chargeback: You have received a fraudrelated chargeback for the transaction.
	// - non_fraud_chargeback: You have received a non-fraudulent chargeback for the transaction.
	// - suspected: You believe that you will probably receive a chargeback for the transaction.
	// - creditback: You issued a refund to the customer to avoid a chargeback for the transaction.
	//
	// For details, see the `marking_reason` field description in [Decision Manager Using the SCMP API Developer Guide.](https://www.cybersource.com/developers/documentation/fraud_management/)
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get transaction o k body fraud marking information
func (o *GetTransactionOKBodyFraudMarkingInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyFraudMarkingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyFraudMarkingInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyFraudMarkingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyInstallmentInformation get transaction o k body installment information
swagger:model GetTransactionOKBodyInstallmentInformation
*/
type GetTransactionOKBodyInstallmentInformation struct {

	// Number of Installments.
	NumberOfInstallments string `json:"numberOfInstallments,omitempty"`
}

// Validate validates this get transaction o k body installment information
func (o *GetTransactionOKBodyInstallmentInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyInstallmentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyInstallmentInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyInstallmentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyLinks get transaction o k body links
swagger:model GetTransactionOKBodyLinks
*/
type GetTransactionOKBodyLinks struct {

	// related transactions
	RelatedTransactions []*GetTransactionOKBodyLinksRelatedTransactionsItems0 `json:"relatedTransactions"`

	// self
	Self *GetTransactionOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get transaction o k body links
func (o *GetTransactionOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRelatedTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyLinks) validateRelatedTransactions(formats strfmt.Registry) error {

	if swag.IsZero(o.RelatedTransactions) { // not required
		return nil
	}

	for i := 0; i < len(o.RelatedTransactions); i++ {
		if swag.IsZero(o.RelatedTransactions[i]) { // not required
			continue
		}

		if o.RelatedTransactions[i] != nil {
			if err := o.RelatedTransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionOK" + "." + "_links" + "." + "relatedTransactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetTransactionOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyLinksRelatedTransactionsItems0 get transaction o k body links related transactions items0
swagger:model GetTransactionOKBodyLinksRelatedTransactionsItems0
*/
type GetTransactionOKBodyLinksRelatedTransactionsItems0 struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get transaction o k body links related transactions items0
func (o *GetTransactionOKBodyLinksRelatedTransactionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyLinksRelatedTransactionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyLinksRelatedTransactionsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyLinksRelatedTransactionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyLinksSelf get transaction o k body links self
swagger:model GetTransactionOKBodyLinksSelf
*/
type GetTransactionOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get transaction o k body links self
func (o *GetTransactionOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyMerchantInformation get transaction o k body merchant information
swagger:model GetTransactionOKBodyMerchantInformation
*/
type GetTransactionOKBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *GetTransactionOKBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this get transaction o k body merchant information
func (o *GetTransactionOKBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyMerchantInformationMerchantDescriptor get transaction o k body merchant information merchant descriptor
swagger:model GetTransactionOKBodyMerchantInformationMerchantDescriptor
*/
type GetTransactionOKBodyMerchantInformationMerchantDescriptor struct {

	// Merchant's name.
	//
	// For more details about the merchant-related fields, see the `merchant_descriptor` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this get transaction o k body merchant information merchant descriptor
func (o *GetTransactionOKBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyOrderInformation get transaction o k body order information
swagger:model GetTransactionOKBodyOrderInformation
*/
type GetTransactionOKBodyOrderInformation struct {

	// amount details
	AmountDetails *GetTransactionOKBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *GetTransactionOKBodyOrderInformationBillTo `json:"billTo,omitempty"`

	// Transaction Line Item data.
	LineItems []*GetTransactionOKBodyOrderInformationLineItemsItems0 `json:"lineItems"`

	// ship to
	ShipTo *GetTransactionOKBodyOrderInformationShipTo `json:"shipTo,omitempty"`

	// shipping details
	ShippingDetails *GetTransactionOKBodyOrderInformationShippingDetails `json:"shippingDetails,omitempty"`
}

// Validate validates this get transaction o k body order information
func (o *GetTransactionOKBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShippingDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformation) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformation) validateLineItems(formats strfmt.Registry) error {

	if swag.IsZero(o.LineItems) { // not required
		return nil
	}

	for i := 0; i < len(o.LineItems); i++ {
		if swag.IsZero(o.LineItems[i]) { // not required
			continue
		}

		if o.LineItems[i] != nil {
			if err := o.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionOK" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformation) validateShipTo(formats strfmt.Registry) error {

	if swag.IsZero(o.ShipTo) { // not required
		return nil
	}

	if o.ShipTo != nil {
		if err := o.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformation) validateShippingDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.ShippingDetails) { // not required
		return nil
	}

	if o.ShippingDetails != nil {
		if err := o.ShippingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "orderInformation" + "." + "shippingDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyOrderInformationAmountDetails get transaction o k body order information amount details
swagger:model GetTransactionOKBodyOrderInformationAmountDetails
*/
type GetTransactionOKBodyOrderInformationAmountDetails struct {

	// Amount that was authorized.
	//
	// Max Length: 15
	AuthorizedAmount string `json:"authorizedAmount,omitempty"`

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder’s account.
	//
	// Max Length: 12
	SettlementAmount string `json:"settlementAmount,omitempty"`

	// This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account.
	//
	// Max Length: 3
	SettlementCurrency string `json:"settlementCurrency,omitempty"`

	// Total tax amount for all the items in the order.
	//
	// For processor-specific information, see the total_tax_amount field in
	// [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
	//
	// Max Length: 12
	TaxAmount string `json:"taxAmount,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### DCC for First Data
	// Not used.
	//
	// #### Invoicing
	// Grand total for the order, this is required for creating a new invoice.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this get transaction o k body order information amount details
func (o *GetTransactionOKBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizedAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyOrderInformationAmountDetails) validateAuthorizedAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizedAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"authorizedAmount", "body", string(o.AuthorizedAmount), 15); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationAmountDetails) validateSettlementAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.SettlementAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"settlementAmount", "body", string(o.SettlementAmount), 12); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationAmountDetails) validateSettlementCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.SettlementCurrency) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"settlementCurrency", "body", string(o.SettlementCurrency), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationAmountDetails) validateTaxAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TaxAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"taxAmount", "body", string(o.TaxAmount), 12); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", string(o.TotalAmount), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyOrderInformationBillTo get transaction o k body order information bill to
swagger:model GetTransactionOKBodyOrderInformationBillTo
*/
type GetTransactionOKBodyOrderInformationBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate billing street address 1 and billing street address 2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts: This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `bill_address1` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions
	// This value is used for AVS.
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate billing street address 1 and billing street address 2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// For processor-specific information, see the `bill_address2` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// ##### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `bill_state` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	// For processor-specific information, see the company_name field in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `bill_country` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_email` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### Invoicing
	// Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer’s first name. This name must be the same as the name on the card.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_firstname` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. This name must be the same as the name on the card.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// For processor-specific information, see the `customer_lastname` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// For processor-specific information, see the `bill_city` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer’s middle name.
	//
	// Max Length: 60
	MiddleName string `json:"middleName,omitempty"`

	// Customer’s name suffix.
	//
	// Max Length: 60
	NameSuffix string `json:"nameSuffix,omitempty"`

	// Customer’s phone number.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// CyberSource recommends that you include the country code when the order is from outside the U.S.
	//
	// For processor-specific information, see the customer_phone field in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### For Payouts:
	//  This field may be sent only for FDC Compass.
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// For processor-specific information, see the `bill_zip` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`

	// Title.
	//
	// Max Length: 60
	Title string `json:"title,omitempty"`
}

// Validate validates this get transaction o k body order information bill to
func (o *GetTransactionOKBodyOrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"email", "body", string(o.Email), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateMiddleName(formats strfmt.Registry) error {

	if swag.IsZero(o.MiddleName) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"middleName", "body", string(o.MiddleName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateNameSuffix(formats strfmt.Registry) error {

	if swag.IsZero(o.NameSuffix) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"nameSuffix", "body", string(o.NameSuffix), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationBillTo) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(o.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"billTo"+"."+"title", "body", string(o.Title), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyOrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyOrderInformationLineItemsItems0 get transaction o k body order information line items items0
swagger:model GetTransactionOKBodyOrderInformationLineItemsItems0
*/
type GetTransactionOKBodyOrderInformationLineItemsItems0 struct {

	// The description for this field is not available.
	FulfillmentType string `json:"fulfillmentType,omitempty"`

	// Type of product. This value is used to determine the category that the product is in: electronic, handling,
	// physical, service, or shipping. The default value is **default**.
	//
	// For a payment, when you set this field to a value other than default or any of the values related to
	// shipping and handling, below fields _quantity_, _productName_, and _productSKU_ are required.
	//
	// Max Length: 255
	ProductCode string `json:"productCode,omitempty"`

	// For PAYMENT and CAPTURE API, this field is required when above _productCode_ is not **default** or one of the
	// values related to shipping and handling.
	//
	// Max Length: 255
	ProductName string `json:"productName,omitempty"`

	// Identification code for the product. For PAYMENT and CAPTURE API, this field is required when above
	// _productCode_ is not **default** or one of the values related to shipping and/or handling.
	//
	// Max Length: 255
	ProductSku string `json:"productSku,omitempty"`

	// For a payment or capture, this field is required when _productCode_ is not **default** or one of the values
	// related to shipping and handling.
	//
	// Maximum: 9.99999999e+08
	// Minimum: 1
	Quantity int64 `json:"quantity,omitempty"`

	// Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must
	// be in the same currency. The tax amount field is additive.
	//
	// The following example uses a two-exponent currency such as USD:
	//
	// 1. You include each line item in your request.
	//     - 1st line item has `amount=10.00`, `quantity=1`, and `taxAmount=0.80`
	//     - 2nd line item has `amount=20.00`, `quantity=1`, and `taxAmount=1.60`
	// 2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.
	//
	// This field is frequently used for Level II and Level III transactions.
	//
	// For details, see `tax_amount` field description in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 15
	TaxAmount int64 `json:"taxAmount,omitempty"`

	// Per-item price of the product. This value cannot be negative. You can include a decimal point (.), but you
	// cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal
	// places.
	//
	// For processor-specific information, see the amount field in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 15
	UnitPrice float64 `json:"unitPrice,omitempty"`
}

// Validate validates this get transaction o k body order information line items items0
func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductSku(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) validateProductCode(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductCode) { // not required
		return nil
	}

	if err := validate.MaxLength("productCode", "body", string(o.ProductCode), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) validateProductName(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductName) { // not required
		return nil
	}

	if err := validate.MaxLength("productName", "body", string(o.ProductName), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) validateProductSku(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductSku) { // not required
		return nil
	}

	if err := validate.MaxLength("productSku", "body", string(o.ProductSku), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) validateQuantity(formats strfmt.Registry) error {

	if swag.IsZero(o.Quantity) { // not required
		return nil
	}

	if err := validate.MinimumInt("quantity", "body", int64(o.Quantity), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", int64(o.Quantity), 9.99999999e+08, false); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) validateTaxAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TaxAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("taxAmount", "body", string(o.TaxAmount), 15); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) validateUnitPrice(formats strfmt.Registry) error {

	if swag.IsZero(o.UnitPrice) { // not required
		return nil
	}

	if err := validate.MaxLength("unitPrice", "body", fmt.Sprintf("%f", o.UnitPrice), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationLineItemsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyOrderInformationLineItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyOrderInformationShipTo get transaction o k body order information ship to
swagger:model GetTransactionOKBodyOrderInformationShipTo
*/
type GetTransactionOKBodyOrderInformationShipTo struct {

	// First line of the shipping address.
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Second line of the shipping address.
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// ##### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `bill_state` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// For processor-specific information, see the company_name field in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the shipping address. Use the two-character ISO Standard Country Codes.
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// First name of the recipient.
	//
	// **Processor specific maximum length**
	//
	// - Litle: 25
	// - All other processors: 60
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// **Processor-specific maximum length**
	//
	// - Litle: 25
	// - All other processors: 60
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the shipping address.
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Phone number associated with the shipping address.
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the shipping address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// Example 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// Example A1B 2C3
	//
	// **American Express Direct**\
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the
	// remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get transaction o k body order information ship to
func (o *GetTransactionOKBodyOrderInformationShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyOrderInformationShipTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shipTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationShipTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationShipTo) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyOrderInformationShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyOrderInformationShippingDetails get transaction o k body order information shipping details
swagger:model GetTransactionOKBodyOrderInformationShippingDetails
*/
type GetTransactionOKBodyOrderInformationShippingDetails struct {

	// Boolean that indicates whether the customer requested gift wrapping for this
	// purchase. This field can contain one of the following
	// values:
	// - true: The customer requested gift wrapping.
	// - false: The customer did not request gift wrapping.
	//
	GiftWrap bool `json:"giftWrap,omitempty"`

	// Shipping method for the product. Possible values:
	//
	//  - `lowcost`: Lowest-cost service
	//  - `sameday`: Courier or same-day service
	//  - `oneday`: Next-day or overnight service
	//  - `twoday`: Two-day service
	//  - `threeday`: Three-day service
	//  - `pickup`: Store pick-up
	//  - `other`: Other shipping method
	//  - `none`: No shipping method because product is a service or subscription
	//
	// Max Length: 10
	ShippingMethod string `json:"shippingMethod,omitempty"`
}

// Validate validates this get transaction o k body order information shipping details
func (o *GetTransactionOKBodyOrderInformationShippingDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateShippingMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyOrderInformationShippingDetails) validateShippingMethod(formats strfmt.Registry) error {

	if swag.IsZero(o.ShippingMethod) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"orderInformation"+"."+"shippingDetails"+"."+"shippingMethod", "body", string(o.ShippingMethod), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationShippingDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyOrderInformationShippingDetails) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyOrderInformationShippingDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformation get transaction o k body payment information
swagger:model GetTransactionOKBodyPaymentInformation
*/
type GetTransactionOKBodyPaymentInformation struct {

	// account features
	AccountFeatures *GetTransactionOKBodyPaymentInformationAccountFeatures `json:"accountFeatures,omitempty"`

	// bank
	Bank *GetTransactionOKBodyPaymentInformationBank `json:"bank,omitempty"`

	// card
	Card *GetTransactionOKBodyPaymentInformationCard `json:"card,omitempty"`

	// customer
	Customer *GetTransactionOKBodyPaymentInformationCustomer `json:"customer,omitempty"`

	// invoice
	Invoice *GetTransactionOKBodyPaymentInformationInvoice `json:"invoice,omitempty"`

	// payment type
	PaymentType *GetTransactionOKBodyPaymentInformationPaymentType `json:"paymentType,omitempty"`
}

// Validate validates this get transaction o k body payment information
func (o *GetTransactionOKBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBank(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvoice(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyPaymentInformation) validateAccountFeatures(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountFeatures) { // not required
		return nil
	}

	if o.AccountFeatures != nil {
		if err := o.AccountFeatures.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "accountFeatures")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformation) validateBank(formats strfmt.Registry) error {

	if swag.IsZero(o.Bank) { // not required
		return nil
	}

	if o.Bank != nil {
		if err := o.Bank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "bank")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformation) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformation) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformation) validateInvoice(formats strfmt.Registry) error {

	if swag.IsZero(o.Invoice) { // not required
		return nil
	}

	if o.Invoice != nil {
		if err := o.Invoice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "invoice")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformation) validatePaymentType(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentType) { // not required
		return nil
	}

	if o.PaymentType != nil {
		if err := o.PaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationAccountFeatures get transaction o k body payment information account features
swagger:model GetTransactionOKBodyPaymentInformationAccountFeatures
*/
type GetTransactionOKBodyPaymentInformationAccountFeatures struct {

	// Remaining balance on the account.
	//
	// Max Length: 12
	BalanceAmount string `json:"balanceAmount,omitempty"`

	// Currency of the remaining balance on the account. For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details, see `auth_account_balance_currency` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 5
	Currency string `json:"currency,omitempty"`

	// Remaining balance on the account.
	//
	// Max Length: 12
	PreviousBalanceAmount string `json:"previousBalanceAmount,omitempty"`
}

// Validate validates this get transaction o k body payment information account features
func (o *GetTransactionOKBodyPaymentInformationAccountFeatures) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBalanceAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreviousBalanceAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyPaymentInformationAccountFeatures) validateBalanceAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.BalanceAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"accountFeatures"+"."+"balanceAmount", "body", string(o.BalanceAmount), 12); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationAccountFeatures) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"accountFeatures"+"."+"currency", "body", string(o.Currency), 5); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationAccountFeatures) validatePreviousBalanceAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousBalanceAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"accountFeatures"+"."+"previousBalanceAmount", "body", string(o.PreviousBalanceAmount), 12); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationAccountFeatures) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationAccountFeatures) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationAccountFeatures
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationBank get transaction o k body payment information bank
swagger:model GetTransactionOKBodyPaymentInformationBank
*/
type GetTransactionOKBodyPaymentInformationBank struct {

	// account
	Account *GetTransactionOKBodyPaymentInformationBankAccount `json:"account,omitempty"`

	// Country-specific code used to identify the customer’s
	// bank. Required for some countries if you do not or are not
	// allowed to provide the IBAN instead. You can use this field
	// only when scoring a direct debit transaction.
	//
	// For all possible values, see the `bank_code` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	BankCode string `json:"bankCode,omitempty"`

	// Code used to identify the branch of the customer’s bank.
	// Required for some countries if you do not or are not
	// allowed to provide the IBAN. Use this field only when
	// scoring a direct debit transaction.
	//
	// For all possible values, see the `branch_code` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	BranchCode string `json:"branchCode,omitempty"`

	// International Bank Account Number (IBAN) for the bank account. For some countries you can provide this number instead of the traditional bank account information. You can use this field only when scoring a direct debit transaction.
	//
	// For all possible values, see the `bank_iban` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	Iban string `json:"iban,omitempty"`

	// mandate
	Mandate *GetTransactionOKBodyPaymentInformationBankMandate `json:"mandate,omitempty"`

	// Bank routing number. This is also called the transit number.
	//
	// For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	RoutingNumber string `json:"routingNumber,omitempty"`

	// Bank’s SWIFT code. You can use this field only when scoring a direct debit transaction.
	// Required only for crossborder transactions.
	//
	// For all possible values, see the `bank_swiftcode` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	SwiftCode string `json:"swiftCode,omitempty"`
}

// Validate validates this get transaction o k body payment information bank
func (o *GetTransactionOKBodyPaymentInformationBank) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMandate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyPaymentInformationBank) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.Account) { // not required
		return nil
	}

	if o.Account != nil {
		if err := o.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "bank" + "." + "account")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationBank) validateMandate(formats strfmt.Registry) error {

	if swag.IsZero(o.Mandate) { // not required
		return nil
	}

	if o.Mandate != nil {
		if err := o.Mandate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "bank" + "." + "mandate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationBank) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationBank) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationBank
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationBankAccount get transaction o k body payment information bank account
swagger:model GetTransactionOKBodyPaymentInformationBankAccount
*/
type GetTransactionOKBodyPaymentInformationBankAccount struct {

	// Code used to validate the customer’s account number.
	// Required for some countries if you do not or are not
	// allowed to provide the IBAN instead. You may use this
	// field only when scoring a direct debit transaction.
	//
	// For all possible values, see the `bank_check_digit` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	CheckDigit string `json:"checkDigit,omitempty"`

	// Check number.
	//
	// Chase Paymentech Solutions - Optional.
	// CyberSource ACH Service - Not used.
	// RBS WorldPay Atlanta - Optional on debits. Required on credits.
	// TeleCheck - Strongly recommended on debit requests. Optional on credits.
	//
	// Max Length: 8
	CheckNumber string `json:"checkNumber,omitempty"`

	// Identifier for the bank that provided the customer’s encoded account number.
	//
	// To obtain the bank identifier, contact your processor.
	//
	// For details, see `account_encoder_id` request-level field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 3
	EncoderID string `json:"encoderId,omitempty"`

	// Name used on the bank account. You can use this field only when scoring a direct debit transaction
	//
	Name string `json:"name,omitempty"`

	// Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number.
	//
	Prefix string `json:"prefix,omitempty"`

	// Last four digits of the customer’s payment account number.
	//
	Suffix string `json:"suffix,omitempty"`

	// Account type.
	//
	// Possible values:
	//  - **C**: Checking.
	//  - **G**: General ledger. This value is supported only on Wells Fargo ACH.
	//  - **S**: Savings (U.S. dollars only).
	//  - **X**: Corporate checking (U.S. dollars only).
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`
}

// Validate validates this get transaction o k body payment information bank account
func (o *GetTransactionOKBodyPaymentInformationBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCheckNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncoderID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyPaymentInformationBankAccount) validateCheckNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.CheckNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"checkNumber", "body", string(o.CheckNumber), 8); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationBankAccount) validateEncoderID(formats strfmt.Registry) error {

	if swag.IsZero(o.EncoderID) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"encoderId", "body", string(o.EncoderID), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationBankAccount) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"bank"+"."+"account"+"."+"type", "body", string(o.Type), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationBankAccount) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationBankMandate get transaction o k body payment information bank mandate
swagger:model GetTransactionOKBodyPaymentInformationBankMandate
*/
type GetTransactionOKBodyPaymentInformationBankMandate struct {

	// The mandate ID. Required only for the United Kingdom.
	//
	// For details, see the `mandate_id` request field description in [Ingenico ePayments Developer Guide For Direct Debits.](https://apps.cybersource.com/library/documentation/dev_guides/Ingenico_ePayments_Dev/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	ID string `json:"id,omitempty"`

	// Whether the direct debit is the first or last direct debit associated with the mandate, or one in between.
	// Required only for the United Kingdom.
	// Possible values:
	// - `001`: First direct debit associated with this mandate. Use this value if a one-time direct debit).
	// - `002`: Subsequent direct debits associated with this mandate.
	// - `003`: Last direct debit associated with this mandate.
	//
	// For details, see the `direct_debit_recurring_type` request field description in [Ingenico ePayments Developer Guide For Direct Debits.](https://apps.cybersource.com/library/documentation/dev_guides/Ingenico_ePayments_Dev/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	RecurringType string `json:"recurringType,omitempty"`

	// Unique value generated by CyberSource that identifies the transaction. Use this value to identify transactions in the Collections Report, which provides settlement
	// information.
	//
	// For details, see the `direct_debit_reconciliation_reference_number` reply field description in [Ingenico ePayments Developer Guide For Direct Debits.](https://apps.cybersource.com/library/documentation/dev_guides/Ingenico_ePayments_Dev/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	ReferenceNumber string `json:"referenceNumber,omitempty"`
}

// Validate validates this get transaction o k body payment information bank mandate
func (o *GetTransactionOKBodyPaymentInformationBankMandate) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationBankMandate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationBankMandate) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationBankMandate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationCard get transaction o k body payment information card
swagger:model GetTransactionOKBodyPaymentInformationCard
*/
type GetTransactionOKBodyPaymentInformationCard struct {

	// Identifier for the issuing bank that provided the customer’s encoded account number. Contact your processor for the bank’s ID.
	//
	// Max Length: 3
	AccountEncoderID string `json:"accountEncoderId,omitempty"`

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_cc_expmo` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.
	//
	// #### FDC Nashville Global and FDMS South
	// You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_cc_expyr` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.
	//
	// **Note** The issue number is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 5
	IssueNumber string `json:"issueNumber,omitempty"`

	// Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number.
	//
	// Max Length: 6
	Prefix string `json:"prefix,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`. Possible values: 01 through 12.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 4
	StartYear string `json:"startYear,omitempty"`

	// Last four digits of the cardholder’s account number. This field is returned only for tokenized transactions.
	// You can use this value on the receipt that you give to the cardholder.
	//
	// **Note** This field is returned only for CyberSource through VisaNet and FDC Nashville Global.
	//
	// #### CyberSource through VisaNet
	// The value for this field corresponds to the following data in the TC 33 capture file:
	// - Record: CP01 TCRB
	// - Position: 85
	// - Field: American Express last 4 PAN return indicator.
	//
	Suffix string `json:"suffix,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// Type of card to authorize.
	// - 001 Visa
	// - 002 Mastercard
	// - 003 Amex
	// - 004 Discover
	// - 005: Diners Club
	// - 007: JCB
	// - 024: Maestro (UK Domestic)
	// - 039 Encoded account number
	// - 042: Maestro (International)
	//
	// For the complete list of possible values, see `card_type` field description in the [Credit Card Services Using the SCMP API Guide.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	Type string `json:"type,omitempty"`

	// Flag that specifies the type of account associated with the card. The cardholder provides this information
	// during the payment process.
	//
	// #### Cielo and Comercio Latino
	//
	// Possible values:
	//
	//  - CREDIT: Credit card
	//  - DEBIT: Debit card
	//
	// This field is required for:
	//  - Debit transactions on Cielo and Comercio Latino.
	//  - Transactions with Brazilian-issued cards on CyberSource through VisaNet.
	//
	// **Note** The value for this field corresponds to the following data in the TC 33 capture file5:
	// - Record: CP07 TCR0
	// - Position: 51
	// - Field: Combination Card Transaction Identifier
	//
	// This field is supported only for Mastercard transactions in Brazil on CyberSource through VisaNet.
	//
	// Max Length: 20
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this get transaction o k body payment information card
func (o *GetTransactionOKBodyPaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountEncoderID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUseAs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyPaymentInformationCard) validateAccountEncoderID(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountEncoderID) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"card"+"."+"accountEncoderId", "body", string(o.AccountEncoderID), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationCard) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 5); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationCard) validatePrefix(formats strfmt.Registry) error {

	if swag.IsZero(o.Prefix) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"card"+"."+"prefix", "body", string(o.Prefix), 6); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationCard) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationCard) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPaymentInformationCard) validateUseAs(formats strfmt.Registry) error {

	if swag.IsZero(o.UseAs) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"paymentInformation"+"."+"card"+"."+"useAs", "body", string(o.UseAs), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationCustomer get transaction o k body payment information customer
swagger:model GetTransactionOKBodyPaymentInformationCustomer
*/
type GetTransactionOKBodyPaymentInformationCustomer struct {

	// Unique identifier for the customer's card and billing information.
	//
	// When you use Payment Tokenization or Recurring Billing and you include this value in
	// your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer’s card number so it can be applied towards bill payments, recurring payments, or one-time payments. By using this token in a payment API request, the merchant doesn't need to pass in data such as the card number or expiration date in the request itself.
	//
	// For details, see the `subscription_id` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	CustomerID string `json:"customerId,omitempty"`
}

// Validate validates this get transaction o k body payment information customer
func (o *GetTransactionOKBodyPaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationInvoice get transaction o k body payment information invoice
swagger:model GetTransactionOKBodyPaymentInformationInvoice
*/
type GetTransactionOKBodyPaymentInformationInvoice struct {

	// Barcode Number.
	BarcodeNumber string `json:"barcodeNumber,omitempty"`

	// Expiration Date.
	ExpirationDate string `json:"expirationDate,omitempty"`

	// Invoice Number.
	Number string `json:"number,omitempty"`
}

// Validate validates this get transaction o k body payment information invoice
func (o *GetTransactionOKBodyPaymentInformationInvoice) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationInvoice) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationInvoice) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationInvoice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationPaymentType get transaction o k body payment information payment type
swagger:model GetTransactionOKBodyPaymentInformationPaymentType
*/
type GetTransactionOKBodyPaymentInformationPaymentType struct {

	// A Payment Type Authentication Method is the means used to verify that the presenter of the Payment Type credential is an authorized user of the Payment Instrument.
	// Examples: 3DSecure – Verified by Visa, 3DSecure – MasteCard Secure Code
	//
	AuthenticationMethod string `json:"authenticationMethod,omitempty"`

	// funding source
	FundingSource *GetTransactionOKBodyPaymentInformationPaymentTypeFundingSource `json:"fundingSource,omitempty"`

	// A Payment Type is enabled through a Method. Examples: Visa, Master Card, ApplePay, iDeal
	Method string `json:"method,omitempty"`

	// A Payment Type is an agreed means for a payee to receive legal tender from a payer. The way one pays for a commercial financial transaction. Examples: Card, Bank Transfer, Digital, Direct Debit.
	//
	Name string `json:"name,omitempty"`

	// SubType Name is detail information about Payment Type. Examples: For Card, if Credit or Debit or PrePaid. For Bank Transfer, if Online Bank Transfer or Wire Transfers.
	//
	SubTypeName string `json:"subTypeName,omitempty"`
}

// Validate validates this get transaction o k body payment information payment type
func (o *GetTransactionOKBodyPaymentInformationPaymentType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFundingSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyPaymentInformationPaymentType) validateFundingSource(formats strfmt.Registry) error {

	if swag.IsZero(o.FundingSource) { // not required
		return nil
	}

	if o.FundingSource != nil {
		if err := o.FundingSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "paymentInformation" + "." + "paymentType" + "." + "fundingSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationPaymentType) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationPaymentType) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationPaymentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPaymentInformationPaymentTypeFundingSource get transaction o k body payment information payment type funding source
swagger:model GetTransactionOKBodyPaymentInformationPaymentTypeFundingSource
*/
type GetTransactionOKBodyPaymentInformationPaymentTypeFundingSource struct {

	// It is affiliation of funding source such as Visa, Master Card, ACH.
	//
	Affiliations string `json:"affiliations,omitempty"`

	// It is the credential of the funding source. Examples: Credit Card PAN, Checking Account Number
	//
	Credential string `json:"credential,omitempty"`

	// A Payment Type Funding Source is the Financial Account which holds the financial assets used to fund a transaction initiated with a given Payment Type. Examples: Bank of America Debit, Wells Consumer Checking
	//
	Name string `json:"name,omitempty"`

	// It is type of funding source. Examples: US Checking Account, Credit Account, Stored Value Account
	//
	Type string `json:"type,omitempty"`

	// It is underwrite for the given funding source. Examples: Bank of America, Wells Fargo, PayPal
	//
	Underwriter string `json:"underwriter,omitempty"`
}

// Validate validates this get transaction o k body payment information payment type funding source
func (o *GetTransactionOKBodyPaymentInformationPaymentTypeFundingSource) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationPaymentTypeFundingSource) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPaymentInformationPaymentTypeFundingSource) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPaymentInformationPaymentTypeFundingSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyPointOfSaleInformation get transaction o k body point of sale information
swagger:model GetTransactionOKBodyPointOfSaleInformation
*/
type GetTransactionOKBodyPointOfSaleInformation struct {

	// Method of entering credit card information into the POS terminal. Possible values:
	//
	//  - `contact`: Read from direct contact with chip card.
	//  - `contactless`: Read from a contactless interface using chip data.
	//  - `keyed`: Manually keyed into POS terminal.
	//  - `msd`: Read from a contactless interface using magnetic stripe data (MSD).
	//  - `swiped`: Read from credit card magnetic stripe.
	//
	// The contact, contactless, and msd values are supported only for EMV transactions.
	//
	// For details, see the `pos_entry_mode` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 11
	EntryMode string `json:"entryMode,omitempty"`

	// POS terminal’s capability. Possible values:
	//
	//  - `1`: Terminal has a magnetic stripe reader only.
	//  - `2`: Terminal has a magnetic stripe reader and manual entry capability.
	//  - `3`: Terminal has manual entry capability only.
	//  - `4`: Terminal can read chip cards.
	//  - `5`: Terminal can read contactless chip cards.
	//
	// The values of 4 and 5 are supported only for EMV transactions.
	// * Applicable only for CTV for Payouts.
	//
	// For processor-specific details, see the `terminal_capability` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Maximum: 5
	// Minimum: 1
	TerminalCapability int64 `json:"terminalCapability,omitempty"`
}

// Validate validates this get transaction o k body point of sale information
func (o *GetTransactionOKBodyPointOfSaleInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEntryMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTerminalCapability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyPointOfSaleInformation) validateEntryMode(formats strfmt.Registry) error {

	if swag.IsZero(o.EntryMode) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"pointOfSaleInformation"+"."+"entryMode", "body", string(o.EntryMode), 11); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyPointOfSaleInformation) validateTerminalCapability(formats strfmt.Registry) error {

	if swag.IsZero(o.TerminalCapability) { // not required
		return nil
	}

	if err := validate.MinimumInt("getTransactionOK"+"."+"pointOfSaleInformation"+"."+"terminalCapability", "body", int64(o.TerminalCapability), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("getTransactionOK"+"."+"pointOfSaleInformation"+"."+"terminalCapability", "body", int64(o.TerminalCapability), 5, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyPointOfSaleInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyPointOfSaleInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyPointOfSaleInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessingInformation get transaction o k body processing information
swagger:model GetTransactionOKBodyProcessingInformation
*/
type GetTransactionOKBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *GetTransactionOKBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`

	// bank transfer options
	BankTransferOptions *GetTransactionOKBodyProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Payouts transaction type.
	// Required for OCT transactions.
	// This field is a pass-through, which means that CyberSource does not verify the value or
	// modify it in any way before sending it to the processor.
	// **Note** When the request includes this field, this value overrides the information in your CyberSource account.
	//
	// For valid values, see the `invoiceHeader_businessApplicationID` field description in [Payouts Using the Simple Order API.](http://apps.cybersource.com/library/documentation/dev_guides/payouts_SO/Payouts_SO_API.pdf)
	//
	BusinessApplicationID string `json:"businessApplicationId,omitempty"`

	// Type of transaction. Some payment card companies use this information when determining discount rates. When you
	// omit this field for **Ingenico ePayments**, the processor uses the default transaction type they have on file
	// for you instead of the default value listed here.
	//
	// Max Length: 20
	CommerceIndicator string `json:"commerceIndicator,omitempty"`

	// Type of digital payment solution for the transaction. Possible Values:
	//
	//  - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//  - `001`: Apple Pay.
	//  - `004`: Cybersource In-App Solution.
	//  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see "Masterpass" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//  - `006`: Android Pay.
	//  - `007`: Chase Pay.
	//  - `008`: Samsung Pay.
	//  - `012`: Google Pay.
	//
	// Max Length: 12
	PaymentSolution string `json:"paymentSolution,omitempty"`
}

// Validate validates this get transaction o k body processing information
func (o *GetTransactionOKBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommerceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentSolution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyProcessingInformation) validateCommerceIndicator(formats strfmt.Registry) error {

	if swag.IsZero(o.CommerceIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processingInformation"+"."+"commerceIndicator", "body", string(o.CommerceIndicator), 20); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessingInformation) validatePaymentSolution(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentSolution) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processingInformation"+"."+"paymentSolution", "body", string(o.PaymentSolution), 12); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessingInformationAuthorizationOptions get transaction o k body processing information authorization options
swagger:model GetTransactionOKBodyProcessingInformationAuthorizationOptions
*/
type GetTransactionOKBodyProcessingInformationAuthorizationOptions struct {

	// Authorization type. Possible values:
	//
	//  - `AUTOCAPTURE`: automatic capture.
	//  - `STANDARDCAPTURE`: standard capture.
	//  - `VERBAL`: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.
	//
	// #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing
	// Set this field to `AUTOCAPTURE` and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to `STANDARDCAPTURE` and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture. For more information, see the `auth_type` field description in [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### Forced Capture
	// Set this field to `VERBAL` and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.
	//
	// For more information, see "Forced Captures" in [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	//
	// #### Verbal Authorization
	// Set this field to `VERBAL` and include it in the capture request to indicate that the request is for a verbal authorization. For more information, see "Verbal Authorizations" in [Credit Card Services Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html).
	//
	// For processor-specific information, see the `auth_type` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 15
	AuthType string `json:"authType,omitempty"`
}

// Validate validates this get transaction o k body processing information authorization options
func (o *GetTransactionOKBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyProcessingInformationAuthorizationOptions) validateAuthType(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthType) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"authType", "body", string(o.AuthType), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessingInformationBankTransferOptions get transaction o k body processing information bank transfer options
swagger:model GetTransactionOKBodyProcessingInformationBankTransferOptions
*/
type GetTransactionOKBodyProcessingInformationBankTransferOptions struct {

	// Specifies the authorization method for the transaction.
	//
	// Possible values:
	// - `ARC`: account receivable conversion
	// - `CCD`: corporate cash disbursement
	// - `POP`: point of purchase conversion
	// - `PPD`: prearranged payment and deposit entry
	// - `TEL`: telephone-initiated entry
	// - `WEB`: internet-initiated entry
	//
	// For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	SecCode string `json:"secCode,omitempty"`
}

// Validate validates this get transaction o k body processing information bank transfer options
func (o *GetTransactionOKBodyProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessorInformation get transaction o k body processor information
swagger:model GetTransactionOKBodyProcessorInformation
*/
type GetTransactionOKBodyProcessorInformation struct {

	// ach verification
	AchVerification *GetTransactionOKBodyProcessorInformationAchVerification `json:"achVerification,omitempty"`

	// Authorization code. Returned only when the processor returns this value.
	//
	ApprovalCode string `json:"approvalCode,omitempty"`

	// avs
	Avs *GetTransactionOKBodyProcessorInformationAvs `json:"avs,omitempty"`

	// card verification
	CardVerification *GetTransactionOKBodyProcessorInformationCardVerification `json:"cardVerification,omitempty"`

	// electronic verification results
	ElectronicVerificationResults *GetTransactionOKBodyProcessorInformationElectronicVerificationResults `json:"electronicVerificationResults,omitempty"`

	// The description for this field is not available.
	NetworkTransactionID string `json:"networkTransactionId,omitempty"`

	// processor
	Processor *GetTransactionOKBodyProcessorInformationProcessor `json:"processor,omitempty"`

	// The description for this field is not available.
	ProviderTransactionID string `json:"providerTransactionId,omitempty"`

	// For most processors, this is the error message sent directly from the bank. Returned only when the processor
	// returns this value.
	//
	// **Important** Do not use this field to evaluate the result of the authorization.
	//
	// #### AIBMS
	// If this value is `08`, you can accept the transaction if the customer provides you with identification.
	//
	// #### Atos
	// This value is the response code sent from Atos and it might also include the response code from the bank.
	// Format: `aa,bb` with the two values separated by a comma and where:
	// - `aa` is the two-digit error message from Atos.
	// - `bb` is the optional two-digit error message from the bank.
	//
	// #### Comercio Latino
	// This value is the status code and the error or
	// response code received from the processor
	// separated by a colon.
	// Format: [status code]:E[error code] or
	// [status code]:R[response code]
	// Example `2:R06`
	//
	// #### JCN Gateway
	// Processor-defined detail error code. The associated response category code is in the `responseCategoryCode` field.
	//
	// Max Length: 10
	ResponseCode string `json:"responseCode,omitempty"`

	// Used by Visa only and contains the response source/reason code that identifies the source of the response decision.
	//
	// Max Length: 1
	ResponseCodeSource string `json:"responseCodeSource,omitempty"`

	// Response ID sent from the processor.
	//
	ResponseID string `json:"responseId,omitempty"`

	// This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.
	//
	// #### American Express Direct
	//
	// System trace audit number (STAN). This value identifies the transaction and is useful when investigating a
	// chargeback dispute.
	//
	// #### CyberSource through VisaNet
	//
	// System trace number that must be printed on the customer’s receipt.
	//
	// For details, see `receipt_number` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 6
	SystemTraceAuditNumber string `json:"systemTraceAuditNumber,omitempty"`

	// Network transaction identifier (TID). You can use this value to identify a specific transaction when you are
	// discussing the transaction with your processor. Not all processors provide this value.
	//
	// #### Cielo
	// For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.
	//
	// #### Comercio Latino
	// For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.
	//
	// #### CyberSource through VisaNet and GPN
	// For details about this value for CyberSource through VisaNet and GPN, see "Network Transaction Identifiers" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 50
	TransactionID string `json:"transactionId,omitempty"`
}

// Validate validates this get transaction o k body processor information
func (o *GetTransactionOKBodyProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAchVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAvs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCardVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateElectronicVerificationResults(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseCodeSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSystemTraceAuditNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateAchVerification(formats strfmt.Registry) error {

	if swag.IsZero(o.AchVerification) { // not required
		return nil
	}

	if o.AchVerification != nil {
		if err := o.AchVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processorInformation" + "." + "achVerification")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateAvs(formats strfmt.Registry) error {

	if swag.IsZero(o.Avs) { // not required
		return nil
	}

	if o.Avs != nil {
		if err := o.Avs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processorInformation" + "." + "avs")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateCardVerification(formats strfmt.Registry) error {

	if swag.IsZero(o.CardVerification) { // not required
		return nil
	}

	if o.CardVerification != nil {
		if err := o.CardVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processorInformation" + "." + "cardVerification")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateElectronicVerificationResults(formats strfmt.Registry) error {

	if swag.IsZero(o.ElectronicVerificationResults) { // not required
		return nil
	}

	if o.ElectronicVerificationResults != nil {
		if err := o.ElectronicVerificationResults.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processorInformation" + "." + "electronicVerificationResults")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateProcessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Processor) { // not required
		return nil
	}

	if o.Processor != nil {
		if err := o.Processor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "processorInformation" + "." + "processor")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateResponseCode(formats strfmt.Registry) error {

	if swag.IsZero(o.ResponseCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"responseCode", "body", string(o.ResponseCode), 10); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateResponseCodeSource(formats strfmt.Registry) error {

	if swag.IsZero(o.ResponseCodeSource) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"responseCodeSource", "body", string(o.ResponseCodeSource), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateSystemTraceAuditNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.SystemTraceAuditNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"systemTraceAuditNumber", "body", string(o.SystemTraceAuditNumber), 6); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformation) validateTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.TransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"transactionId", "body", string(o.TransactionID), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessorInformationAchVerification get transaction o k body processor information ach verification
swagger:model GetTransactionOKBodyProcessorInformationAchVerification
*/
type GetTransactionOKBodyProcessorInformationAchVerification struct {

	// Results from the ACH verification service.
	// For details about this service and the possible values for the results, see "ACH Verification" and "Verification Codes" in the [Electronic Check Services Using the SCMP API](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	//
	// Max Length: 2
	ResultCode string `json:"resultCode,omitempty"`

	// Raw results from the ACH verification service.
	// For details about this service and the possible values for the raw results, see "ACH Verification" and "Verification Codes" in the [Electronic Check Services Using the SCMP API](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	//
	// Max Length: 10
	ResultCodeRaw string `json:"resultCodeRaw,omitempty"`
}

// Validate validates this get transaction o k body processor information ach verification
func (o *GetTransactionOKBodyProcessorInformationAchVerification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResultCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResultCodeRaw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyProcessorInformationAchVerification) validateResultCode(formats strfmt.Registry) error {

	if swag.IsZero(o.ResultCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"achVerification"+"."+"resultCode", "body", string(o.ResultCode), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationAchVerification) validateResultCodeRaw(formats strfmt.Registry) error {

	if swag.IsZero(o.ResultCodeRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"achVerification"+"."+"resultCodeRaw", "body", string(o.ResultCodeRaw), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationAchVerification) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationAchVerification) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessorInformationAchVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessorInformationAvs get transaction o k body processor information avs
swagger:model GetTransactionOKBodyProcessorInformationAvs
*/
type GetTransactionOKBodyProcessorInformationAvs struct {

	// AVS result code.
	//
	// Max Length: 1
	Code string `json:"code,omitempty"`

	// AVS result code sent directly from the processor. Returned only when the processor returns this value.
	// Important Do not use this field to evaluate the result of AVS. Use for debugging purposes only.
	//
	// Max Length: 10
	CodeRaw string `json:"codeRaw,omitempty"`
}

// Validate validates this get transaction o k body processor information avs
func (o *GetTransactionOKBodyProcessorInformationAvs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCodeRaw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyProcessorInformationAvs) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"avs"+"."+"code", "body", string(o.Code), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationAvs) validateCodeRaw(formats strfmt.Registry) error {

	if swag.IsZero(o.CodeRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"avs"+"."+"codeRaw", "body", string(o.CodeRaw), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationAvs) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationAvs) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessorInformationAvs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessorInformationCardVerification get transaction o k body processor information card verification
swagger:model GetTransactionOKBodyProcessorInformationCardVerification
*/
type GetTransactionOKBodyProcessorInformationCardVerification struct {

	// CVN result code.
	//
	// For details, see the `auth_cv_result` reply field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 1
	ResultCode string `json:"resultCode,omitempty"`
}

// Validate validates this get transaction o k body processor information card verification
func (o *GetTransactionOKBodyProcessorInformationCardVerification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResultCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyProcessorInformationCardVerification) validateResultCode(formats strfmt.Registry) error {

	if swag.IsZero(o.ResultCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"cardVerification"+"."+"resultCode", "body", string(o.ResultCode), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationCardVerification) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationCardVerification) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessorInformationCardVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessorInformationElectronicVerificationResults get transaction o k body processor information electronic verification results
swagger:model GetTransactionOKBodyProcessorInformationElectronicVerificationResults
*/
type GetTransactionOKBodyProcessorInformationElectronicVerificationResults struct {

	// Mapped Electronic Verification response code for the customer’s email address.
	//
	// For details, see `auth_ev_email` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 1
	Email string `json:"email,omitempty"`

	// Raw Electronic Verification response code from the processor for the customer’s email address.
	// Max Length: 1
	EmailRaw string `json:"emailRaw,omitempty"`

	// Mapped Electronic Verification response code for the customer’s name.
	//
	// Max Length: 30
	Name string `json:"name,omitempty"`

	// Raw Electronic Verification response code from the processor for the customer’s name.
	//
	// Max Length: 30
	NameRaw string `json:"nameRaw,omitempty"`

	// Mapped Electronic Verification response code for the customer’s phone number.
	//
	// For details, see `auth_ev_phone_number` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 1
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Raw Electronic Verification response code from the processor for the customer’s phone number.
	// Max Length: 1
	PhoneNumberRaw string `json:"phoneNumberRaw,omitempty"`

	// Mapped Electronic Verification response code for the customer’s postal code.
	//
	// For details, see `auth_ev_postal_code` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 1
	PostalCode string `json:"postalCode,omitempty"`

	// Raw Electronic Verification response code from the processor for the customer’s postal code.
	// Max Length: 1
	PostalCodeRaw string `json:"postalCodeRaw,omitempty"`

	// Mapped Electronic Verification response code for the customer’s street address.
	//
	// For details, see `auth_ev_street` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 1
	Street string `json:"street,omitempty"`

	// Raw Electronic Verification response code from the processor for the customer’s street address.
	// Max Length: 1
	StreetRaw string `json:"streetRaw,omitempty"`
}

// Validate validates this get transaction o k body processor information electronic verification results
func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmailRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNameRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumberRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCodeRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStreetRaw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"email", "body", string(o.Email), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validateEmailRaw(formats strfmt.Registry) error {

	if swag.IsZero(o.EmailRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"emailRaw", "body", string(o.EmailRaw), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"name", "body", string(o.Name), 30); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validateNameRaw(formats strfmt.Registry) error {

	if swag.IsZero(o.NameRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"nameRaw", "body", string(o.NameRaw), 30); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"phoneNumber", "body", string(o.PhoneNumber), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validatePhoneNumberRaw(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumberRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"phoneNumberRaw", "body", string(o.PhoneNumberRaw), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"postalCode", "body", string(o.PostalCode), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validatePostalCodeRaw(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCodeRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"postalCodeRaw", "body", string(o.PostalCodeRaw), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validateStreet(formats strfmt.Registry) error {

	if swag.IsZero(o.Street) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"street", "body", string(o.Street), 1); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) validateStreetRaw(formats strfmt.Registry) error {

	if swag.IsZero(o.StreetRaw) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"electronicVerificationResults"+"."+"streetRaw", "body", string(o.StreetRaw), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationElectronicVerificationResults) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessorInformationElectronicVerificationResults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyProcessorInformationProcessor get transaction o k body processor information processor
swagger:model GetTransactionOKBodyProcessorInformationProcessor
*/
type GetTransactionOKBodyProcessorInformationProcessor struct {

	// Name of the Processor.
	//
	// Max Length: 30
	Name string `json:"name,omitempty"`
}

// Validate validates this get transaction o k body processor information processor
func (o *GetTransactionOKBodyProcessorInformationProcessor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyProcessorInformationProcessor) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"processorInformation"+"."+"processor"+"."+"name", "body", string(o.Name), 30); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationProcessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyProcessorInformationProcessor) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyProcessorInformationProcessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyRiskInformation get transaction o k body risk information
swagger:model GetTransactionOKBodyRiskInformation
*/
type GetTransactionOKBodyRiskInformation struct {

	// Time that the transaction was submitted in local time.
	LocalTime string `json:"localTime,omitempty"`

	// passive profile
	PassiveProfile *GetTransactionOKBodyRiskInformationPassiveProfile `json:"passiveProfile,omitempty"`

	// passive rules
	PassiveRules []*GetTransactionOKBodyRiskInformationPassiveRulesItems0 `json:"passiveRules"`

	// profile
	Profile *GetTransactionOKBodyRiskInformationProfile `json:"profile,omitempty"`

	// rules
	Rules []*GetTransactionOKBodyRiskInformationRulesItems0 `json:"rules"`

	// score
	Score *GetTransactionOKBodyRiskInformationScore `json:"score,omitempty"`
}

// Validate validates this get transaction o k body risk information
func (o *GetTransactionOKBodyRiskInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassiveProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassiveRules(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyRiskInformation) validatePassiveProfile(formats strfmt.Registry) error {

	if swag.IsZero(o.PassiveProfile) { // not required
		return nil
	}

	if o.PassiveProfile != nil {
		if err := o.PassiveProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "riskInformation" + "." + "passiveProfile")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyRiskInformation) validatePassiveRules(formats strfmt.Registry) error {

	if swag.IsZero(o.PassiveRules) { // not required
		return nil
	}

	for i := 0; i < len(o.PassiveRules); i++ {
		if swag.IsZero(o.PassiveRules[i]) { // not required
			continue
		}

		if o.PassiveRules[i] != nil {
			if err := o.PassiveRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionOK" + "." + "riskInformation" + "." + "passiveRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetTransactionOKBodyRiskInformation) validateProfile(formats strfmt.Registry) error {

	if swag.IsZero(o.Profile) { // not required
		return nil
	}

	if o.Profile != nil {
		if err := o.Profile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "riskInformation" + "." + "profile")
			}
			return err
		}
	}

	return nil
}

func (o *GetTransactionOKBodyRiskInformation) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(o.Rules) { // not required
		return nil
	}

	for i := 0; i < len(o.Rules); i++ {
		if swag.IsZero(o.Rules[i]) { // not required
			continue
		}

		if o.Rules[i] != nil {
			if err := o.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTransactionOK" + "." + "riskInformation" + "." + "rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetTransactionOKBodyRiskInformation) validateScore(formats strfmt.Registry) error {

	if swag.IsZero(o.Score) { // not required
		return nil
	}

	if o.Score != nil {
		if err := o.Score.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getTransactionOK" + "." + "riskInformation" + "." + "score")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyRiskInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyRiskInformationPassiveProfile get transaction o k body risk information passive profile
swagger:model GetTransactionOKBodyRiskInformationPassiveProfile
*/
type GetTransactionOKBodyRiskInformationPassiveProfile struct {

	// Decision returned by the profile; this field contains one of these values:
	// - ACCEPT
	// - REJECT
	// - REVIEW
	//
	Decision string `json:"decision,omitempty"`

	// The name of the profile.
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this get transaction o k body risk information passive profile
func (o *GetTransactionOKBodyRiskInformationPassiveProfile) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationPassiveProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationPassiveProfile) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyRiskInformationPassiveProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyRiskInformationPassiveRulesItems0 Names of one or more rules that were processed, and the decisions made by the rules.
swagger:model GetTransactionOKBodyRiskInformationPassiveRulesItems0
*/
type GetTransactionOKBodyRiskInformationPassiveRulesItems0 struct {

	// Summarizes the result for the rule according to the setting that you chose in the Profile Editor.
	// This field can contain one of the following values:
	// - `IGNORE`
	// - `REVIEW`
	// - `REJECT`
	// - `ACCEPT`
	//
	// Max Length: 255
	Decision string `json:"decision,omitempty"`

	// Description of the rule as it appears in the Profile Editor.
	// Max Length: 255
	Name string `json:"name,omitempty"`
}

// Validate validates this get transaction o k body risk information passive rules items0
func (o *GetTransactionOKBodyRiskInformationPassiveRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDecision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyRiskInformationPassiveRulesItems0) validateDecision(formats strfmt.Registry) error {

	if swag.IsZero(o.Decision) { // not required
		return nil
	}

	if err := validate.MaxLength("decision", "body", string(o.Decision), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyRiskInformationPassiveRulesItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(o.Name), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationPassiveRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationPassiveRulesItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyRiskInformationPassiveRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyRiskInformationProfile get transaction o k body risk information profile
swagger:model GetTransactionOKBodyRiskInformationProfile
*/
type GetTransactionOKBodyRiskInformationProfile struct {

	// Decision returned by the profile; this field contains one of these values:
	// - ACCEPT
	// - REJECT
	// - REVIEW
	//
	Decision string `json:"decision,omitempty"`

	// The name of the profile.
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this get transaction o k body risk information profile
func (o *GetTransactionOKBodyRiskInformationProfile) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationProfile) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationProfile) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyRiskInformationProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyRiskInformationRulesItems0 Names of one or more rules that were processed, and the decisions made by the rules.
swagger:model GetTransactionOKBodyRiskInformationRulesItems0
*/
type GetTransactionOKBodyRiskInformationRulesItems0 struct {

	// Summarizes the result for the rule according to the setting that you chose in the Profile Editor.
	// This field can contain one of the following values:
	// - `IGNORE`
	// - `REVIEW`
	// - `REJECT`
	// - `ACCEPT`
	//
	// Max Length: 255
	Decision string `json:"decision,omitempty"`

	// Description of the rule as it appears in the Profile Editor.
	// Max Length: 255
	Name string `json:"name,omitempty"`
}

// Validate validates this get transaction o k body risk information rules items0
func (o *GetTransactionOKBodyRiskInformationRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDecision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodyRiskInformationRulesItems0) validateDecision(formats strfmt.Registry) error {

	if swag.IsZero(o.Decision) { // not required
		return nil
	}

	if err := validate.MaxLength("decision", "body", string(o.Decision), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetTransactionOKBodyRiskInformationRulesItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(o.Name), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationRulesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationRulesItems0) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyRiskInformationRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodyRiskInformationScore get transaction o k body risk information score
swagger:model GetTransactionOKBodyRiskInformationScore
*/
type GetTransactionOKBodyRiskInformationScore struct {

	// Array of factor codes.
	FactorCodes []string `json:"factorCodes"`

	// The description for this field is not available.
	//
	Result int64 `json:"result,omitempty"`
}

// Validate validates this get transaction o k body risk information score
func (o *GetTransactionOKBodyRiskInformationScore) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationScore) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodyRiskInformationScore) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodyRiskInformationScore
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetTransactionOKBodySenderInformation get transaction o k body sender information
swagger:model GetTransactionOKBodySenderInformation
*/
type GetTransactionOKBodySenderInformation struct {

	// Reference number generated by you that uniquely identifies the sender.
	// Max Length: 19
	ReferenceNumber string `json:"referenceNumber,omitempty"`
}

// Validate validates this get transaction o k body sender information
func (o *GetTransactionOKBodySenderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTransactionOKBodySenderInformation) validateReferenceNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.ReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getTransactionOK"+"."+"senderInformation"+"."+"referenceNumber", "body", string(o.ReferenceNumber), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTransactionOKBodySenderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTransactionOKBodySenderInformation) UnmarshalBinary(b []byte) error {
	var res GetTransactionOKBodySenderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*MerchantDefinedInformationItems0 merchant defined information items0
swagger:model MerchantDefinedInformationItems0
*/
type MerchantDefinedInformationItems0 struct {

	// The number you assign for as the key for your merchant-defined data field. Valid values are 0 to 100.
	//
	// For example, to set or access the key for the 2nd merchant-defined data field in the array, you would reference `merchantDefinedInformation[1].key`.
	//
	// #### CyberSource through VisaNet
	// For installment payments with Mastercard in Brazil, use `merchantDefinedInformation[0].key` and
	// `merchantDefinedInformation[1].key` for data that you want to provide to the issuer to identify the
	// transaction.
	//
	// For details, see the `merchant_defined_data1` request-level field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 50
	Key string `json:"key,omitempty"`

	// The value you assign for your merchant-defined data field.
	//
	// For details, see `merchant_defined_data1` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// **Warning** Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not
	// limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV,
	// CVC2, CVV2, CID, CVN). In the event CyberSource discovers that a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, CyberSource will immediately suspend the merchant's account, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.
	//
	// #### CyberSource through VisaNet
	// For installment payments with Mastercard in Brazil, use `merchantDefinedInformation[0].value` and
	// `merchantDefinedInformation[1].value` for data that you want to provide to the issuer to identify the
	// transaction. For details, see "Installment Payments on CyberSource through VisaNet" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// For details, see "Installment Payments on CyberSource through VisaNet" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// For installment payments with Mastercard in Brazil:
	// - The value for merchantDefinedInformation[0].value corresponds to the following data in the TC 33 capture file5:
	//   - Record: CP07 TCR5
	//   - Position: 25-44
	//   - Field: Reference Field 2
	// - The value for merchantDefinedInformation[1].value corresponds to the following data in the TC 33 capture file5:
	//   - Record: CP07 TCR5
	//   - Position: 45-64
	//   - Field: Reference Field 3
	//
	// Max Length: 255
	Value string `json:"value,omitempty"`
}

// Validate validates this merchant defined information items0
func (o *MerchantDefinedInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *MerchantDefinedInformationItems0) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(o.Key) { // not required
		return nil
	}

	if err := validate.MaxLength("key", "body", string(o.Key), 50); err != nil {
		return err
	}

	return nil
}

func (o *MerchantDefinedInformationItems0) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(o.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("value", "body", string(o.Value), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *MerchantDefinedInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *MerchantDefinedInformationItems0) UnmarshalBinary(b []byte) error {
	var res MerchantDefinedInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
