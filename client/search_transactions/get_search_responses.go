// Code generated by go-swagger; DO NOT EDIT.

package search_transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSearchReader is a Reader for the GetSearch structure.
type GetSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSearchOK creates a GetSearchOK with default headers values
func NewGetSearchOK() *GetSearchOK {
	return &GetSearchOK{}
}

/*GetSearchOK handles this case with default header values.

Successful response.
*/
type GetSearchOK struct {
	Payload *GetSearchOKBody
}

func (o *GetSearchOK) Error() string {
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchOK  %+v", 200, o.Payload)
}

func (o *GetSearchOK) GetPayload() *GetSearchOKBody {
	return o.Payload
}

func (o *GetSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchNotFound creates a GetSearchNotFound with default headers values
func NewGetSearchNotFound() *GetSearchNotFound {
	return &GetSearchNotFound{}
}

/*GetSearchNotFound handles this case with default header values.

The specified resource not found in the system.
*/
type GetSearchNotFound struct {
}

func (o *GetSearchNotFound) Error() string {
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchNotFound ", 404)
}

func (o *GetSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSearchInternalServerError creates a GetSearchInternalServerError with default headers values
func NewGetSearchInternalServerError() *GetSearchInternalServerError {
	return &GetSearchInternalServerError{}
}

/*GetSearchInternalServerError handles this case with default header values.

Unexpected server error.
*/
type GetSearchInternalServerError struct {
}

func (o *GetSearchInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tss/v2/searches/{searchId}][%d] getSearchInternalServerError ", 500)
}

func (o *GetSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetSearchOKBody tssV2TransactionsPost201Response
swagger:model GetSearchOKBody
*/
type GetSearchOKBody struct {

	// embedded
	Embedded *GetSearchOKBodyEmbedded `json:"_embedded,omitempty"`

	// links
	Links *GetSearchOKBodyLinks `json:"_links,omitempty"`

	// Results for this page, this could be below the limit.
	Count int64 `json:"count,omitempty"`

	// Limit on number of results.
	Limit int64 `json:"limit,omitempty"`

	// The description for this field is not available.
	//
	Name string `json:"name,omitempty"`

	// offset.
	Offset int64 `json:"offset,omitempty"`

	// transaction search query string.
	Query string `json:"query,omitempty"`

	// save or not save.
	Save bool `json:"save,omitempty"`

	// An unique identification number assigned by CyberSource to identify each Search request.
	// Max Length: 60
	SearchID string `json:"searchId,omitempty"`

	// A comma separated list of the following form - fieldName1 asc or desc, fieldName2 asc or desc, etc.
	Sort string `json:"sort,omitempty"`

	// The status of the submitted transaction.
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the
	// time. The `Z` indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`

	// Time Zone in ISO format.
	Timezone string `json:"timezone,omitempty"`

	// Total number of results.
	TotalCount int64 `json:"totalCount,omitempty"`
}

// Validate validates this get search o k body
func (o *GetSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSearchID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBody) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBody) validateSearchID(formats strfmt.Registry) error {

	if swag.IsZero(o.SearchID) { // not required
		return nil
	}

	if err := validate.MaxLength("getSearchOK"+"."+"searchId", "body", string(o.SearchID), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBody) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbedded get search o k body embedded
swagger:model GetSearchOKBodyEmbedded
*/
type GetSearchOKBodyEmbedded struct {

	// transaction search summary
	TransactionSummaries []*GetSearchOKBodyEmbeddedTransactionSummariesItems0 `json:"transactionSummaries"`
}

// Validate validates this get search o k body embedded
func (o *GetSearchOKBodyEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactionSummaries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbedded) validateTransactionSummaries(formats strfmt.Registry) error {

	if swag.IsZero(o.TransactionSummaries) { // not required
		return nil
	}

	for i := 0; i < len(o.TransactionSummaries); i++ {
		if swag.IsZero(o.TransactionSummaries[i]) { // not required
			continue
		}

		if o.TransactionSummaries[i] != nil {
			if err := o.TransactionSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchOK" + "." + "_embedded" + "." + "transactionSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbedded) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0 get search o k body embedded transaction summaries items0
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0 struct {

	// links
	Links *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links `json:"_links,omitempty"`

	// application information
	ApplicationInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation `json:"applicationInformation,omitempty"`

	// buyer information
	BuyerInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation `json:"buyerInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// consumer authentication information
	ConsumerAuthenticationInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation `json:"consumerAuthenticationInformation,omitempty"`

	// device information
	DeviceInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation `json:"deviceInformation,omitempty"`

	// fraud marking information
	FraudMarkingInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation `json:"fraudMarkingInformation,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request. It is also appended to the endpoint of the resource.
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The object containing the custom data that the merchant defines.
	//
	MerchantDefinedInformation []*GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0 `json:"merchantDefinedInformation"`

	// Your CyberSource merchant ID.
	MerchantID string `json:"merchantId,omitempty"`

	// merchant information
	MerchantInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	OrderInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation `json:"paymentInformation,omitempty"`

	// point of sale information
	PointOfSaleInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation `json:"pointOfSaleInformation,omitempty"`

	// processing information
	ProcessingInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation `json:"processingInformation,omitempty"`

	// processor information
	ProcessorInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation `json:"processorInformation,omitempty"`

	// risk information
	RiskInformation *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation `json:"riskInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the
	// time. The `Z` indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateApplicationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsumerAuthenticationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFraudMarkingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDefinedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePointOfSaleInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRiskInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateApplicationInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ApplicationInformation) { // not required
		return nil
	}

	if o.ApplicationInformation != nil {
		if err := o.ApplicationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateClientReferenceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateConsumerAuthenticationInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
		return nil
	}

	if o.ConsumerAuthenticationInformation != nil {
		if err := o.ConsumerAuthenticationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateDeviceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.DeviceInformation) { // not required
		return nil
	}

	if o.DeviceInformation != nil {
		if err := o.DeviceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateFraudMarkingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.FraudMarkingInformation) { // not required
		return nil
	}

	if o.FraudMarkingInformation != nil {
		if err := o.FraudMarkingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fraudMarkingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", string(o.ID), 26); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateMerchantDefinedInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDefinedInformation) { // not required
		return nil
	}

	for i := 0; i < len(o.MerchantDefinedInformation); i++ {
		if swag.IsZero(o.MerchantDefinedInformation[i]) { // not required
			continue
		}

		if o.MerchantDefinedInformation[i] != nil {
			if err := o.MerchantDefinedInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateOrderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validatePaymentInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validatePointOfSaleInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.PointOfSaleInformation) { // not required
		return nil
	}

	if o.PointOfSaleInformation != nil {
		if err := o.PointOfSaleInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSaleInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateProcessorInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) validateRiskInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.RiskInformation) { // not required
		return nil
	}

	if o.RiskInformation != nil {
		if err := o.RiskInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation get search o k body embedded transaction summaries items0 application information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation struct {

	// applications
	Applications []*GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0 `json:"applications"`

	// Indicates whether the service request was successful.
	// Possible values:
	//
	// - `-1`: An error occurred.
	// - `0`: The request was declined.
	// - `1`: The request was successful.
	//
	// For details, see `auth_rcode` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	RCode string `json:"rCode,omitempty"`

	// One-word description of the result of the application.
	//
	// For details, see `auth_rflag` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	RFlag string `json:"rFlag,omitempty"`

	// Indicates the reason why a request succeeded or failed and possible action to take if a request fails.
	//
	// For details, see the appendix of reason codes in the documentation for the relevant payment method.
	//
	ReasonCode string `json:"reasonCode,omitempty"`

	// The status of the submitted transaction.
	Status string `json:"status,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 application information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) validateApplications(formats strfmt.Registry) error {

	if swag.IsZero(o.Applications) { // not required
		return nil
	}

	for i := 0; i < len(o.Applications); i++ {
		if swag.IsZero(o.Applications[i]) { // not required
			continue
		}

		if o.Applications[i] != nil {
			if err := o.Applications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicationInformation" + "." + "applications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0 get search o k body embedded transaction summaries items0 application information applications items0
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0 struct {

	// The CyberSource payment application processed for the transaction.
	//
	Name string `json:"name,omitempty"`

	// Indicates whether the service request was successful.
	// Possible values:
	//
	// - `-1`: An error occurred.
	// - `0`: The request was declined.
	// - `1`: The request was successful.
	//
	RCode string `json:"rCode,omitempty"`

	// One-word description of the result of the application.
	//
	RFlag string `json:"rFlag,omitempty"`

	// Message that explains the reply flag for the application.
	//
	RMessage string `json:"rMessage,omitempty"`

	// 3-digit reason code that indicates why the customer profile payment succeeded or failed.
	ReasonCode string `json:"reasonCode,omitempty"`

	// Reference number that you use to reconcile your CyberSource reports with your processor reports.
	//
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// The description for this field is not available.
	ReturnCode string `json:"returnCode,omitempty"`

	// The description for this field is not available.
	Status string `json:"status,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 application information applications items0
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ApplicationInformationApplicationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation get search o k body embedded transaction summaries items0 buyer information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation struct {

	// Your identifier for the customer.
	//
	// When a subscription or customer profile is being created, the maximum length for this field for most processors is 30. Otherwise, the maximum length is 100.
	//
	// #### Comercio Latino
	// For recurring payments in Mexico, the value is the customer’s contract number.
	// Note Before you request the authorization, you must inform the issuer of the customer contract numbers that will be used for recurring transactions.
	//
	// #### Worldpay VAP
	// For a follow-on credit with Worldpay VAP, CyberSource checks the following locations, in the order
	// given, for a customer account ID value and uses the first value it finds:
	// 1. `customer_account_id` value in the follow-on credit request
	// 2. Customer account ID value that was used for the capture that is being credited
	// 3. Customer account ID value that was used for the original authorization
	// If a customer account ID value cannot be found in any of these locations, then no value is used.
	//
	// For processor-specific information, see the `customer_account_id` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 100
	MerchantCustomerID string `json:"merchantCustomerId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 buyer information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) validateMerchantCustomerID(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantCustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"merchantCustomerId", "body", string(o.MerchantCustomerID), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0BuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation get search o k body embedded transaction summaries items0 client reference information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation struct {

	// The application name of client which is used to submit the request.
	ApplicationName string `json:"applicationName,omitempty"`

	// The description for this field is not available.
	ApplicationUser string `json:"applicationUser,omitempty"`

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// For information about tracking orders, see "Tracking and Reconciling Your Orders" in [Getting Started with CyberSource Advanced for the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Getting_Started_SCMP/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 client reference information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("clientReferenceInformation"+"."+"code", "body", string(o.Code), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation get search o k body embedded transaction summaries items0 consumer authentication information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation struct {

	// Payer auth Transaction identifier.
	TransactionID string `json:"transactionId,omitempty"`

	// Transaction identifier.
	//
	// For details, see `xid` request field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 40
	Xid string `json:"xid,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 consumer authentication information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateXid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) validateXid(formats strfmt.Registry) error {

	if swag.IsZero(o.Xid) { // not required
		return nil
	}

	if err := validate.MaxLength("consumerAuthenticationInformation"+"."+"xid", "body", string(o.Xid), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ConsumerAuthenticationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation get search o k body embedded transaction summaries items0 device information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation struct {

	// IP address of the customer.
	//
	// Max Length: 48
	IPAddress string `json:"ipAddress,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 device information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) validateIPAddress(formats strfmt.Registry) error {

	if swag.IsZero(o.IPAddress) { // not required
		return nil
	}

	if err := validate.MaxLength("deviceInformation"+"."+"ipAddress", "body", string(o.IPAddress), 48); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0DeviceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation get search o k body embedded transaction summaries items0 fraud marking information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation struct {

	// Reason for adding the transaction to the negative list. This field can contain one of the following values:
	// - fraud_chargeback: You have received a fraudrelated chargeback for the transaction.
	// - non_fraud_chargeback: You have received a non-fraudulent chargeback for the transaction.
	// - suspected: You believe that you will probably receive a chargeback for the transaction.
	// - creditback: You issued a refund to the customer to avoid a chargeback for the transaction.
	//
	// For details, see the `marking_reason` field description in [Decision Manager Using the SCMP API Developer Guide.](https://www.cybersource.com/developers/documentation/fraud_management/)
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 fraud marking information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0FraudMarkingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0Links get search o k body embedded transaction summaries items0 links
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0Links
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0Links struct {

	// transaction detail
	TransactionDetail *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail `json:"transactionDetail,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 links
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTransactionDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) validateTransactionDetail(formats strfmt.Registry) error {

	if swag.IsZero(o.TransactionDetail) { // not required
		return nil
	}

	if o.TransactionDetail != nil {
		if err := o.TransactionDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "transactionDetail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0Links) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail get search o k body embedded transaction summaries items0 links transaction detail
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 links transaction detail
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0LinksTransactionDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0 get search o k body embedded transaction summaries items0 merchant defined information items0
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0 struct {

	// The number you assign for as the key for your merchant-defined data field. Valid values are 0 to 100.
	//
	// For example, to set or access the key for the 2nd merchant-defined data field in the array, you would reference `merchantDefinedInformation[1].key`.
	//
	// #### CyberSource through VisaNet
	// For installment payments with Mastercard in Brazil, use `merchantDefinedInformation[0].key` and
	// `merchantDefinedInformation[1].key` for data that you want to provide to the issuer to identify the
	// transaction.
	//
	// For details, see the `merchant_defined_data1` request-level field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 50
	Key string `json:"key,omitempty"`

	// The value you assign for your merchant-defined data field.
	//
	// For details, see `merchant_defined_data1` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// **Warning** Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not
	// limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV,
	// CVC2, CVV2, CID, CVN). In the event CyberSource discovers that a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, CyberSource will immediately suspend the merchant's account, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.
	//
	// #### CyberSource through VisaNet
	// For installment payments with Mastercard in Brazil, use `merchantDefinedInformation[0].value` and
	// `merchantDefinedInformation[1].value` for data that you want to provide to the issuer to identify the
	// transaction. For details, see "Installment Payments on CyberSource through VisaNet" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// For details, see "Installment Payments on CyberSource through VisaNet" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// For installment payments with Mastercard in Brazil:
	// - The value for merchantDefinedInformation[0].value corresponds to the following data in the TC 33 capture file5:
	//   - Record: CP07 TCR5
	//   - Position: 25-44
	//   - Field: Reference Field 2
	// - The value for merchantDefinedInformation[1].value corresponds to the following data in the TC 33 capture file5:
	//   - Record: CP07 TCR5
	//   - Position: 45-64
	//   - Field: Reference Field 3
	//
	// Max Length: 255
	Value string `json:"value,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 merchant defined information items0
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(o.Key) { // not required
		return nil
	}

	if err := validate.MaxLength("key", "body", string(o.Key), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(o.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("value", "body", string(o.Value), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantDefinedInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation get search o k body embedded transaction summaries items0 merchant information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation struct {

	// An unique identification number assigned by CyberSource to identify the submitted request. It is also appended to the endpoint of the resource.
	// Max Length: 26
	ResellerID string `json:"resellerId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 merchant information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResellerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) validateResellerID(formats strfmt.Registry) error {

	if swag.IsZero(o.ResellerID) { // not required
		return nil
	}

	if err := validate.MaxLength("merchantInformation"+"."+"resellerId", "body", string(o.ResellerID), 26); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0MerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation get search o k body embedded transaction summaries items0 order information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation struct {

	// amount details
	AmountDetails *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo `json:"billTo,omitempty"`

	// ship to
	ShipTo *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo `json:"shipTo,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 order information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) validateAmountDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) validateShipTo(formats strfmt.Registry) error {

	if swag.IsZero(o.ShipTo) { // not required
		return nil
	}

	if o.ShipTo != nil {
		if err := o.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderInformation" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails get search o k body embedded transaction summaries items0 order information amount details
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### DCC for First Data
	// Not used.
	//
	// #### Invoicing
	// Grand total for the order, this is required for creating a new invoice.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 order information amount details
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", string(o.TotalAmount), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo get search o k body embedded transaction summaries items0 order information bill to
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo struct {

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `bill_country` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_email` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### Invoicing
	// Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer’s first name. This name must be the same as the name on the card.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_firstname` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. This name must be the same as the name on the card.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// For processor-specific information, see the `customer_lastname` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Customer’s phone number.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// CyberSource recommends that you include the country code when the order is from outside the U.S.
	//
	// For processor-specific information, see the customer_phone field in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 order information bill to
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"email", "body", string(o.Email), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo get search o k body embedded transaction summaries items0 order information ship to
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo struct {

	// First line of the shipping address.
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Country of the shipping address. Use the two-character ISO Standard Country Codes.
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// First name of the recipient.
	//
	// **Processor specific maximum length**
	//
	// - Litle: 25
	// - All other processors: 60
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// **Processor-specific maximum length**
	//
	// - Litle: 25
	// - All other processors: 60
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Phone number associated with the shipping address.
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 order information ship to
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("orderInformation"+"."+"shipTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0OrderInformationShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation get search o k body embedded transaction summaries items0 payment information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation struct {

	// card
	Card *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard `json:"card,omitempty"`

	// customer
	Customer *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer `json:"customer,omitempty"`

	// payment type
	PaymentType *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType `json:"paymentType,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) validatePaymentType(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentType) { // not required
		return nil
	}

	if o.PaymentType != nil {
		if err := o.PaymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentInformation" + "." + "paymentType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard get search o k body embedded transaction summaries items0 payment information card
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard struct {

	// Bank Identification Number (BIN). This is the initial four to six numbers on a credit card account number.
	//
	// Max Length: 6
	Prefix string `json:"prefix,omitempty"`

	// Last four digits of the cardholder’s account number. This field is returned only for tokenized transactions.
	// You can use this value on the receipt that you give to the cardholder.
	//
	// **Note** This field is returned only for CyberSource through VisaNet and FDC Nashville Global.
	//
	// #### CyberSource through VisaNet
	// The value for this field corresponds to the following data in the TC 33 capture file:
	// - Record: CP01 TCRB
	// - Position: 85
	// - Field: American Express last 4 PAN return indicator.
	//
	Suffix string `json:"suffix,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// Type of card to authorize.
	// - 001 Visa
	// - 002 Mastercard
	// - 003 Amex
	// - 004 Discover
	// - 005: Diners Club
	// - 007: JCB
	// - 024: Maestro (UK Domestic)
	// - 039 Encoded account number
	// - 042: Maestro (International)
	//
	// For the complete list of possible values, see `card_type` field description in the [Credit Card Services Using the SCMP API Guide.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information card
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) validatePrefix(formats strfmt.Registry) error {

	if swag.IsZero(o.Prefix) { // not required
		return nil
	}

	if err := validate.MaxLength("paymentInformation"+"."+"card"+"."+"prefix", "body", string(o.Prefix), 6); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer get search o k body embedded transaction summaries items0 payment information customer
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer struct {

	// Unique identifier for the customer's card and billing information.
	//
	// When you use Payment Tokenization or Recurring Billing and you include this value in
	// your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer’s card number so it can be applied towards bill payments, recurring payments, or one-time payments. By using this token in a payment API request, the merchant doesn't need to pass in data such as the card number or expiration date in the request itself.
	//
	// For details, see the `subscription_id` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	CustomerID string `json:"customerId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information customer
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType get search o k body embedded transaction summaries items0 payment information payment type
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType struct {

	// A Payment Type is enabled through a Method. Examples: Visa, Master Card, ApplePay, iDeal
	Method string `json:"method,omitempty"`

	// A Payment Type is an agreed means for a payee to receive legal tender from a payer. The way one pays for a commercial financial transaction. Examples: Card, Bank Transfer, Digital, Direct Debit.
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 payment information payment type
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PaymentInformationPaymentType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation get search o k body embedded transaction summaries items0 point of sale information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation struct {

	// Value created by the client software that uniquely identifies the POS device.
	// CyberSource does not forward this value to the processor. Instead, the value is forwarded to
	// the CyberSource reporting functionality.
	//
	// This field is supported only for specific CyberSource integrations. For details, see the `pos_device_id` field description
	// in the [Card-Present Processing Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	DeviceID string `json:"deviceId,omitempty"`

	// partner
	Partner *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner `json:"partner,omitempty"`

	// Identifier for the terminal at your retail location. You can define this value yourself, but consult the
	// processor for requirements.
	//
	// #### FDC Nashville Global
	// To have your account configured to support this field, contact CyberSource Customer Support. This value must be
	// a value that FDC Nashville Global issued to you.
	//
	// For details, see the `terminal_id` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// **For Payouts**: This field is applicable for CtV.
	//
	// Max Length: 8
	TerminalID string `json:"terminalId,omitempty"`

	// Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that
	// is installed on the POS terminal.
	//
	// CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource
	// reporting functionality.
	//
	// This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
	//
	// For details, see the `terminal_serial_number` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 32
	TerminalSerialNumber string `json:"terminalSerialNumber,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 point of sale information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePartner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTerminalID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTerminalSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) validatePartner(formats strfmt.Registry) error {

	if swag.IsZero(o.Partner) { // not required
		return nil
	}

	if o.Partner != nil {
		if err := o.Partner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pointOfSaleInformation" + "." + "partner")
			}
			return err
		}
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) validateTerminalID(formats strfmt.Registry) error {

	if swag.IsZero(o.TerminalID) { // not required
		return nil
	}

	if err := validate.MaxLength("pointOfSaleInformation"+"."+"terminalId", "body", string(o.TerminalID), 8); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) validateTerminalSerialNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.TerminalSerialNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("pointOfSaleInformation"+"."+"terminalSerialNumber", "body", string(o.TerminalSerialNumber), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner get search o k body embedded transaction summaries items0 point of sale information partner
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner struct {

	// Value that links the previous transaction to the current follow-on request. This value is assigned by the client
	// software that is installed on the POS terminal, which makes it available to the terminal’s software and to
	// CyberSource. Therefore, you can use this value to reconcile transactions between CyberSource and the terminal’s
	// software.
	//
	// CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource
	// reporting functionality.
	//
	// This field is supported only on American Express Direct, FDC Nashville Global, and SIX.
	//
	// Max Length: 32
	OriginalTransactionID string `json:"originalTransactionId,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 point of sale information partner
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOriginalTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) validateOriginalTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.OriginalTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("pointOfSaleInformation"+"."+"partner"+"."+"originalTransactionId", "body", string(o.OriginalTransactionID), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0PointOfSaleInformationPartner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation get search o k body embedded transaction summaries items0 processing information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation struct {

	// Payouts transaction type.
	// Required for OCT transactions.
	// This field is a pass-through, which means that CyberSource does not verify the value or
	// modify it in any way before sending it to the processor.
	// **Note** When the request includes this field, this value overrides the information in your CyberSource account.
	//
	// For valid values, see the `invoiceHeader_businessApplicationID` field description in [Payouts Using the Simple Order API.](http://apps.cybersource.com/library/documentation/dev_guides/payouts_SO/Payouts_SO_API.pdf)
	//
	BusinessApplicationID string `json:"businessApplicationId,omitempty"`

	// Type of digital payment solution for the transaction. Possible Values:
	//
	//  - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//  - `001`: Apple Pay.
	//  - `004`: Cybersource In-App Solution.
	//  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see "Masterpass" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//  - `006`: Android Pay.
	//  - `007`: Chase Pay.
	//  - `008`: Samsung Pay.
	//  - `012`: Google Pay.
	//
	// Max Length: 12
	PaymentSolution string `json:"paymentSolution,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 processing information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentSolution(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) validatePaymentSolution(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentSolution) { // not required
		return nil
	}

	if err := validate.MaxLength("processingInformation"+"."+"paymentSolution", "body", string(o.PaymentSolution), 12); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation get search o k body embedded transaction summaries items0 processor information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation struct {

	// processor
	Processor *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor `json:"processor,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 processor information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProcessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) validateProcessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Processor) { // not required
		return nil
	}

	if o.Processor != nil {
		if err := o.Processor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processorInformation" + "." + "processor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor get search o k body embedded transaction summaries items0 processor information processor
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor struct {

	// Name of the Processor.
	//
	// Max Length: 30
	Name string `json:"name,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 processor information processor
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("processorInformation"+"."+"processor"+"."+"name", "body", string(o.Name), 30); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0ProcessorInformationProcessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation get search o k body embedded transaction summaries items0 risk information
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation struct {

	// providers
	Providers *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders `json:"providers,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 risk information
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) validateProviders(formats strfmt.Registry) error {

	if swag.IsZero(o.Providers) { // not required
		return nil
	}

	if o.Providers != nil {
		if err := o.Providers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation" + "." + "providers")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders get search o k body embedded transaction summaries items0 risk information providers
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders struct {

	// fingerprint
	Fingerprint *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint `json:"fingerprint,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 risk information providers
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) validateFingerprint(formats strfmt.Registry) error {

	if swag.IsZero(o.Fingerprint) { // not required
		return nil
	}

	if o.Fingerprint != nil {
		if err := o.Fingerprint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("riskInformation" + "." + "providers" + "." + "fingerprint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProviders
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint get search o k body embedded transaction summaries items0 risk information providers fingerprint
swagger:model GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint
*/
type GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint struct {

	// The unique identifier of the device that is returned in the `riskInformation.providers.fingerprint.device_fingerprint_hash` API reply field.
	//
	// NOTE: For details about the value of this field, see the `decision_provider_#_field_#_value` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
	//
	// For more details about this field, see the `device_fingerprint_hash` field description in the _CyberSource Decision Manager Device Fingerprinting Guide_on the [CyberSource Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link)
	//
	// Max Length: 255
	Hash string `json:"hash,omitempty"`

	// The device identifier generated from attributes collected during profiling. Returned by a 3rd party when you use device fingerprinting.
	//
	// For details, see the `device_fingerprint_smart_id` field description in [CyberSource Decision Manager Device Fingerprinting Guide.](https://www.cybersource.com/developers/documentation/fraud_management)
	//
	// Max Length: 255
	SmartID string `json:"smartId,omitempty"`

	// Customer’s true IP address detected by the application.
	//
	// For details, see the `true_ipaddress` field description in [CyberSource Decision Manager Device Fingerprinting Guide.](https://www.cybersource.com/developers/documentation/fraud_management)
	//
	// Max Length: 255
	TrueIpaddress string `json:"true_ipaddress,omitempty"`
}

// Validate validates this get search o k body embedded transaction summaries items0 risk information providers fingerprint
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSmartID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTrueIpaddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) validateHash(formats strfmt.Registry) error {

	if swag.IsZero(o.Hash) { // not required
		return nil
	}

	if err := validate.MaxLength("riskInformation"+"."+"providers"+"."+"fingerprint"+"."+"hash", "body", string(o.Hash), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) validateSmartID(formats strfmt.Registry) error {

	if swag.IsZero(o.SmartID) { // not required
		return nil
	}

	if err := validate.MaxLength("riskInformation"+"."+"providers"+"."+"fingerprint"+"."+"smartId", "body", string(o.SmartID), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) validateTrueIpaddress(formats strfmt.Registry) error {

	if swag.IsZero(o.TrueIpaddress) { // not required
		return nil
	}

	if err := validate.MaxLength("riskInformation"+"."+"providers"+"."+"fingerprint"+"."+"true_ipaddress", "body", string(o.TrueIpaddress), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyEmbeddedTransactionSummariesItems0RiskInformationProvidersFingerprint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyLinks get search o k body links
swagger:model GetSearchOKBodyLinks
*/
type GetSearchOKBodyLinks struct {

	// self
	Self *GetSearchOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get search o k body links
func (o *GetSearchOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSearchOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchOKBodyLinksSelf get search o k body links self
swagger:model GetSearchOKBodyLinksSelf
*/
type GetSearchOKBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this get search o k body links self
func (o *GetSearchOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetSearchOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
