// Code generated by go-swagger; DO NOT EDIT.

package report_downloads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDownloadReportParams creates a new DownloadReportParams object
// with the default values initialized.
func NewDownloadReportParams() *DownloadReportParams {
	var ()
	return &DownloadReportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadReportParamsWithTimeout creates a new DownloadReportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDownloadReportParamsWithTimeout(timeout time.Duration) *DownloadReportParams {
	var ()
	return &DownloadReportParams{

		timeout: timeout,
	}
}

// NewDownloadReportParamsWithContext creates a new DownloadReportParams object
// with the default values initialized, and the ability to set a context for a request
func NewDownloadReportParamsWithContext(ctx context.Context) *DownloadReportParams {
	var ()
	return &DownloadReportParams{

		Context: ctx,
	}
}

// NewDownloadReportParamsWithHTTPClient creates a new DownloadReportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDownloadReportParamsWithHTTPClient(client *http.Client) *DownloadReportParams {
	var ()
	return &DownloadReportParams{
		HTTPClient: client,
	}
}

/*DownloadReportParams contains all the parameters to send to the API endpoint
for the download report operation typically these are written to a http.Request
*/
type DownloadReportParams struct {

	/*OrganizationID
	  Valid Cybersource Organization Id

	*/
	OrganizationID *string
	/*ReportDate
	  Valid date on which to download the report in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	**Example date format:**
	  - yyyy-MM-dd


	*/
	ReportDate strfmt.Date
	/*ReportName
	  Name of the report to download

	*/
	ReportName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the download report params
func (o *DownloadReportParams) WithTimeout(timeout time.Duration) *DownloadReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download report params
func (o *DownloadReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download report params
func (o *DownloadReportParams) WithContext(ctx context.Context) *DownloadReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download report params
func (o *DownloadReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download report params
func (o *DownloadReportParams) WithHTTPClient(client *http.Client) *DownloadReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download report params
func (o *DownloadReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationID adds the organizationID to the download report params
func (o *DownloadReportParams) WithOrganizationID(organizationID *string) *DownloadReportParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the download report params
func (o *DownloadReportParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithReportDate adds the reportDate to the download report params
func (o *DownloadReportParams) WithReportDate(reportDate strfmt.Date) *DownloadReportParams {
	o.SetReportDate(reportDate)
	return o
}

// SetReportDate adds the reportDate to the download report params
func (o *DownloadReportParams) SetReportDate(reportDate strfmt.Date) {
	o.ReportDate = reportDate
}

// WithReportName adds the reportName to the download report params
func (o *DownloadReportParams) WithReportName(reportName string) *DownloadReportParams {
	o.SetReportName(reportName)
	return o
}

// SetReportName adds the reportName to the download report params
func (o *DownloadReportParams) SetReportName(reportName string) {
	o.ReportName = reportName
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}

	}

	// query param reportDate
	qrReportDate := o.ReportDate
	qReportDate := qrReportDate.String()
	if qReportDate != "" {
		if err := r.SetQueryParam("reportDate", qReportDate); err != nil {
			return err
		}
	}

	// query param reportName
	qrReportName := o.ReportName
	qReportName := qrReportName
	if qReportName != "" {
		if err := r.SetQueryParam("reportName", qReportName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
