// Code generated by go-swagger; DO NOT EDIT.

package reversal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAuthReversalParams creates a new AuthReversalParams object
// with the default values initialized.
func NewAuthReversalParams() *AuthReversalParams {
	var ()
	return &AuthReversalParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAuthReversalParamsWithTimeout creates a new AuthReversalParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAuthReversalParamsWithTimeout(timeout time.Duration) *AuthReversalParams {
	var ()
	return &AuthReversalParams{

		timeout: timeout,
	}
}

// NewAuthReversalParamsWithContext creates a new AuthReversalParams object
// with the default values initialized, and the ability to set a context for a request
func NewAuthReversalParamsWithContext(ctx context.Context) *AuthReversalParams {
	var ()
	return &AuthReversalParams{

		Context: ctx,
	}
}

// NewAuthReversalParamsWithHTTPClient creates a new AuthReversalParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAuthReversalParamsWithHTTPClient(client *http.Client) *AuthReversalParams {
	var ()
	return &AuthReversalParams{
		HTTPClient: client,
	}
}

/*AuthReversalParams contains all the parameters to send to the API endpoint
for the auth reversal operation typically these are written to a http.Request
*/
type AuthReversalParams struct {

	/*AuthReversalRequest*/
	AuthReversalRequest AuthReversalBody
	/*ID
	  The payment ID returned from a previous payment request.

	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the auth reversal params
func (o *AuthReversalParams) WithTimeout(timeout time.Duration) *AuthReversalParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the auth reversal params
func (o *AuthReversalParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the auth reversal params
func (o *AuthReversalParams) WithContext(ctx context.Context) *AuthReversalParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the auth reversal params
func (o *AuthReversalParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the auth reversal params
func (o *AuthReversalParams) WithHTTPClient(client *http.Client) *AuthReversalParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the auth reversal params
func (o *AuthReversalParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthReversalRequest adds the authReversalRequest to the auth reversal params
func (o *AuthReversalParams) WithAuthReversalRequest(authReversalRequest AuthReversalBody) *AuthReversalParams {
	o.SetAuthReversalRequest(authReversalRequest)
	return o
}

// SetAuthReversalRequest adds the authReversalRequest to the auth reversal params
func (o *AuthReversalParams) SetAuthReversalRequest(authReversalRequest AuthReversalBody) {
	o.AuthReversalRequest = authReversalRequest
}

// WithID adds the id to the auth reversal params
func (o *AuthReversalParams) WithID(id string) *AuthReversalParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the auth reversal params
func (o *AuthReversalParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *AuthReversalParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.AuthReversalRequest); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
