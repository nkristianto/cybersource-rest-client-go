// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetReportByReportIDReader is a Reader for the GetReportByReportID structure.
type GetReportByReportIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportByReportIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportByReportIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportByReportIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReportByReportIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetReportByReportIDOK creates a GetReportByReportIDOK with default headers values
func NewGetReportByReportIDOK() *GetReportByReportIDOK {
	return &GetReportByReportIDOK{}
}

/*GetReportByReportIDOK handles this case with default header values.

OK
*/
type GetReportByReportIDOK struct {
	Payload *GetReportByReportIDOKBody
}

func (o *GetReportByReportIDOK) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/reports/{reportId}][%d] getReportByReportIdOK  %+v", 200, o.Payload)
}

func (o *GetReportByReportIDOK) GetPayload() *GetReportByReportIDOKBody {
	return o.Payload
}

func (o *GetReportByReportIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetReportByReportIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByReportIDBadRequest creates a GetReportByReportIDBadRequest with default headers values
func NewGetReportByReportIDBadRequest() *GetReportByReportIDBadRequest {
	return &GetReportByReportIDBadRequest{}
}

/*GetReportByReportIDBadRequest handles this case with default header values.

Invalid Request
*/
type GetReportByReportIDBadRequest struct {
	Payload *GetReportByReportIDBadRequestBody
}

func (o *GetReportByReportIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/reports/{reportId}][%d] getReportByReportIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetReportByReportIDBadRequest) GetPayload() *GetReportByReportIDBadRequestBody {
	return o.Payload
}

func (o *GetReportByReportIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetReportByReportIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportByReportIDNotFound creates a GetReportByReportIDNotFound with default headers values
func NewGetReportByReportIDNotFound() *GetReportByReportIDNotFound {
	return &GetReportByReportIDNotFound{}
}

/*GetReportByReportIDNotFound handles this case with default header values.

No Reports Found
*/
type GetReportByReportIDNotFound struct {
}

func (o *GetReportByReportIDNotFound) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/reports/{reportId}][%d] getReportByReportIdNotFound ", 404)
}

func (o *GetReportByReportIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetReportByReportIDBadRequestBody reportingV3ReportsIdPost400Response
//
// HTTP status code for client application
swagger:model GetReportByReportIDBadRequestBody
*/
type GetReportByReportIDBadRequestBody struct {

	// Error field list
	//
	// Required: true
	Details []*DetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get report by report ID bad request body
func (o *GetReportByReportIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetReportByReportIDBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getReportByReportIdBadRequest"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getReportByReportIdBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetReportByReportIDBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getReportByReportIdBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetReportByReportIDBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getReportByReportIdBadRequest"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetReportByReportIDBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getReportByReportIdBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getReportByReportIdBadRequest"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetReportByReportIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReportByReportIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetReportByReportIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetReportByReportIDOKBody reportingV3ReportsIdGet200Response
//
// Report Log
swagger:model GetReportByReportIDOKBody
*/
type GetReportByReportIDOKBody struct {

	// Id for selected group.
	GroupID string `json:"groupId,omitempty"`

	// CyberSource merchant id
	OrganizationID string `json:"organizationId,omitempty"`

	// Report definition Id
	ReportDefinitionID string `json:"reportDefinitionId,omitempty"`

	// Report End Time Value
	// Format: date-time
	ReportEndTime strfmt.DateTime `json:"reportEndTime,omitempty"`

	// List of Integer Values
	ReportFields []string `json:"reportFields"`

	// List of filters to apply
	ReportFilters map[string][]string `json:"reportFilters,omitempty"`

	// Report Frequency Value
	//
	// Valid values:
	// - DAILY
	// - WEEKLY
	// - MONTHLY
	// - ADHOC
	//
	ReportFrequency string `json:"reportFrequency,omitempty"`

	// Report ID Value
	ReportID string `json:"reportId,omitempty"`

	// Report Format
	//
	// Valid values:
	// - application/xml
	// - text/csv
	//
	ReportMimeType string `json:"reportMimeType,omitempty"`

	// Report Name
	ReportName string `json:"reportName,omitempty"`

	// report preferences
	ReportPreferences *GetReportByReportIDOKBodyReportPreferences `json:"reportPreferences,omitempty"`

	// Report Start Time Value
	// Format: date-time
	ReportStartTime strfmt.DateTime `json:"reportStartTime,omitempty"`

	// Report Status Value
	//
	// Valid values:
	// - COMPLETED
	// - PENDING
	// - QUEUED
	// - RUNNING
	// - ERROR
	// - NO_DATA
	// - RERUN
	//
	ReportStatus string `json:"reportStatus,omitempty"`

	// Time Zone Value
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this get report by report ID o k body
func (o *GetReportByReportIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReportEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReportPreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReportStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetReportByReportIDOKBody) validateReportEndTime(formats strfmt.Registry) error {

	if swag.IsZero(o.ReportEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("getReportByReportIdOK"+"."+"reportEndTime", "body", "date-time", o.ReportEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetReportByReportIDOKBody) validateReportPreferences(formats strfmt.Registry) error {

	if swag.IsZero(o.ReportPreferences) { // not required
		return nil
	}

	if o.ReportPreferences != nil {
		if err := o.ReportPreferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getReportByReportIdOK" + "." + "reportPreferences")
			}
			return err
		}
	}

	return nil
}

func (o *GetReportByReportIDOKBody) validateReportStartTime(formats strfmt.Registry) error {

	if swag.IsZero(o.ReportStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("getReportByReportIdOK"+"."+"reportStartTime", "body", "date-time", o.ReportStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetReportByReportIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReportByReportIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetReportByReportIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetReportByReportIDOKBodyReportPreferences Report Preferences
swagger:model GetReportByReportIDOKBodyReportPreferences
*/
type GetReportByReportIDOKBodyReportPreferences struct {

	// Specify the field naming convention to be followed in reports (applicable to only csv report formats)
	//
	// Valid values:
	// - SOAPI
	// - SCMP
	//
	FieldNameConvention string `json:"fieldNameConvention,omitempty"`

	// Indicator to determine whether negative sign infront of amount for all refunded transaction
	SignedAmounts bool `json:"signedAmounts,omitempty"`
}

// Validate validates this get report by report ID o k body report preferences
func (o *GetReportByReportIDOKBodyReportPreferences) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetReportByReportIDOKBodyReportPreferences) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReportByReportIDOKBodyReportPreferences) UnmarshalBinary(b []byte) error {
	var res GetReportByReportIDOKBodyReportPreferences
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
