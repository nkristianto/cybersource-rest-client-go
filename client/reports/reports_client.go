// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new reports API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reports API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateReport(params *CreateReportParams) (*CreateReportCreated, error)

	GetReportByReportID(params *GetReportByReportIDParams) (*GetReportByReportIDOK, error)

	SearchReports(params *SearchReportsParams) (*SearchReportsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateReport creates adhoc report

  Create a one-time report. You must specify the
type of report in reportDefinitionName. For a list of values for
reportDefinitionName, see the [Reporting Developer Guide](https://www.cybersource.com/developers/documentation/reporting_and_reconciliation)

*/
func (a *Client) CreateReport(params *CreateReportParams) (*CreateReportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createReport",
		Method:             "POST",
		PathPattern:        "/reporting/v3/reports",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReportCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportByReportID gets report based on report Id

  Download a report using the reportId value. If
you donâ€™t already know this value, you can obtain it using the
Retrieve available reports call.

*/
func (a *Client) GetReportByReportID(params *GetReportByReportIDParams) (*GetReportByReportIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportByReportIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportByReportId",
		Method:             "GET",
		PathPattern:        "/reporting/v3/reports/{reportId}",
		ProducesMediaTypes: []string{"application/hal+json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportByReportIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportByReportIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getReportByReportId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchReports retrieves available reports

  Retrieve a list of the available reports to which
you are subscribed. This will also give you the reportId value,
which you can also use to download a report.

*/
func (a *Client) SearchReports(params *SearchReportsParams) (*SearchReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchReportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchReports",
		Method:             "GET",
		PathPattern:        "/reporting/v3/reports",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchReportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchReportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchReports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
