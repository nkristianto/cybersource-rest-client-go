// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchReportsParams creates a new SearchReportsParams object
// with the default values initialized.
func NewSearchReportsParams() *SearchReportsParams {
	var ()
	return &SearchReportsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchReportsParamsWithTimeout creates a new SearchReportsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchReportsParamsWithTimeout(timeout time.Duration) *SearchReportsParams {
	var ()
	return &SearchReportsParams{

		timeout: timeout,
	}
}

// NewSearchReportsParamsWithContext creates a new SearchReportsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchReportsParamsWithContext(ctx context.Context) *SearchReportsParams {
	var ()
	return &SearchReportsParams{

		Context: ctx,
	}
}

// NewSearchReportsParamsWithHTTPClient creates a new SearchReportsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchReportsParamsWithHTTPClient(client *http.Client) *SearchReportsParams {
	var ()
	return &SearchReportsParams{
		HTTPClient: client,
	}
}

/*SearchReportsParams contains all the parameters to send to the API endpoint
for the search reports operation typically these are written to a http.Request
*/
type SearchReportsParams struct {

	/*EndTime
	  Valid report End Time in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	**Example date format:**
	  - yyyy-MM-dd'T'HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)


	*/
	EndTime strfmt.DateTime
	/*OrganizationID
	  Valid Cybersource Organization Id

	*/
	OrganizationID *string
	/*ReportDefinitionID
	  Valid Report Definition Id

	*/
	ReportDefinitionID *int32
	/*ReportFrequency
	  Valid Report Frequency

	Valid values:
	- DAILY
	- WEEKLY
	- MONTHLY
	- ADHOC


	*/
	ReportFrequency *string
	/*ReportMimeType
	  Valid Report Format

	Valid values:
	- application/xml
	- text/csv


	*/
	ReportMimeType *string
	/*ReportName
	  Valid Report Name

	*/
	ReportName *string
	/*ReportStatus
	  Valid Report Status

	Valid values:
	- COMPLETED
	- PENDING
	- QUEUED
	- RUNNING
	- ERROR
	- NO_DATA


	*/
	ReportStatus *string
	/*StartTime
	  Valid report Start Time in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	**Example date format:**
	  - yyyy-MM-dd'T'HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)


	*/
	StartTime strfmt.DateTime
	/*TimeQueryType
	  Specify time you would like to search

	Valid values:
	- reportTimeFrame
	- executedTime


	*/
	TimeQueryType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search reports params
func (o *SearchReportsParams) WithTimeout(timeout time.Duration) *SearchReportsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search reports params
func (o *SearchReportsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search reports params
func (o *SearchReportsParams) WithContext(ctx context.Context) *SearchReportsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search reports params
func (o *SearchReportsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search reports params
func (o *SearchReportsParams) WithHTTPClient(client *http.Client) *SearchReportsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search reports params
func (o *SearchReportsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the search reports params
func (o *SearchReportsParams) WithEndTime(endTime strfmt.DateTime) *SearchReportsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the search reports params
func (o *SearchReportsParams) SetEndTime(endTime strfmt.DateTime) {
	o.EndTime = endTime
}

// WithOrganizationID adds the organizationID to the search reports params
func (o *SearchReportsParams) WithOrganizationID(organizationID *string) *SearchReportsParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the search reports params
func (o *SearchReportsParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithReportDefinitionID adds the reportDefinitionID to the search reports params
func (o *SearchReportsParams) WithReportDefinitionID(reportDefinitionID *int32) *SearchReportsParams {
	o.SetReportDefinitionID(reportDefinitionID)
	return o
}

// SetReportDefinitionID adds the reportDefinitionId to the search reports params
func (o *SearchReportsParams) SetReportDefinitionID(reportDefinitionID *int32) {
	o.ReportDefinitionID = reportDefinitionID
}

// WithReportFrequency adds the reportFrequency to the search reports params
func (o *SearchReportsParams) WithReportFrequency(reportFrequency *string) *SearchReportsParams {
	o.SetReportFrequency(reportFrequency)
	return o
}

// SetReportFrequency adds the reportFrequency to the search reports params
func (o *SearchReportsParams) SetReportFrequency(reportFrequency *string) {
	o.ReportFrequency = reportFrequency
}

// WithReportMimeType adds the reportMimeType to the search reports params
func (o *SearchReportsParams) WithReportMimeType(reportMimeType *string) *SearchReportsParams {
	o.SetReportMimeType(reportMimeType)
	return o
}

// SetReportMimeType adds the reportMimeType to the search reports params
func (o *SearchReportsParams) SetReportMimeType(reportMimeType *string) {
	o.ReportMimeType = reportMimeType
}

// WithReportName adds the reportName to the search reports params
func (o *SearchReportsParams) WithReportName(reportName *string) *SearchReportsParams {
	o.SetReportName(reportName)
	return o
}

// SetReportName adds the reportName to the search reports params
func (o *SearchReportsParams) SetReportName(reportName *string) {
	o.ReportName = reportName
}

// WithReportStatus adds the reportStatus to the search reports params
func (o *SearchReportsParams) WithReportStatus(reportStatus *string) *SearchReportsParams {
	o.SetReportStatus(reportStatus)
	return o
}

// SetReportStatus adds the reportStatus to the search reports params
func (o *SearchReportsParams) SetReportStatus(reportStatus *string) {
	o.ReportStatus = reportStatus
}

// WithStartTime adds the startTime to the search reports params
func (o *SearchReportsParams) WithStartTime(startTime strfmt.DateTime) *SearchReportsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the search reports params
func (o *SearchReportsParams) SetStartTime(startTime strfmt.DateTime) {
	o.StartTime = startTime
}

// WithTimeQueryType adds the timeQueryType to the search reports params
func (o *SearchReportsParams) WithTimeQueryType(timeQueryType string) *SearchReportsParams {
	o.SetTimeQueryType(timeQueryType)
	return o
}

// SetTimeQueryType adds the timeQueryType to the search reports params
func (o *SearchReportsParams) SetTimeQueryType(timeQueryType string) {
	o.TimeQueryType = timeQueryType
}

// WriteToRequest writes these params to a swagger request
func (o *SearchReportsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endTime
	qrEndTime := o.EndTime
	qEndTime := qrEndTime.String()
	if qEndTime != "" {
		if err := r.SetQueryParam("endTime", qEndTime); err != nil {
			return err
		}
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}

	}

	if o.ReportDefinitionID != nil {

		// query param reportDefinitionId
		var qrReportDefinitionID int32
		if o.ReportDefinitionID != nil {
			qrReportDefinitionID = *o.ReportDefinitionID
		}
		qReportDefinitionID := swag.FormatInt32(qrReportDefinitionID)
		if qReportDefinitionID != "" {
			if err := r.SetQueryParam("reportDefinitionId", qReportDefinitionID); err != nil {
				return err
			}
		}

	}

	if o.ReportFrequency != nil {

		// query param reportFrequency
		var qrReportFrequency string
		if o.ReportFrequency != nil {
			qrReportFrequency = *o.ReportFrequency
		}
		qReportFrequency := qrReportFrequency
		if qReportFrequency != "" {
			if err := r.SetQueryParam("reportFrequency", qReportFrequency); err != nil {
				return err
			}
		}

	}

	if o.ReportMimeType != nil {

		// query param reportMimeType
		var qrReportMimeType string
		if o.ReportMimeType != nil {
			qrReportMimeType = *o.ReportMimeType
		}
		qReportMimeType := qrReportMimeType
		if qReportMimeType != "" {
			if err := r.SetQueryParam("reportMimeType", qReportMimeType); err != nil {
				return err
			}
		}

	}

	if o.ReportName != nil {

		// query param reportName
		var qrReportName string
		if o.ReportName != nil {
			qrReportName = *o.ReportName
		}
		qReportName := qrReportName
		if qReportName != "" {
			if err := r.SetQueryParam("reportName", qReportName); err != nil {
				return err
			}
		}

	}

	if o.ReportStatus != nil {

		// query param reportStatus
		var qrReportStatus string
		if o.ReportStatus != nil {
			qrReportStatus = *o.ReportStatus
		}
		qReportStatus := qrReportStatus
		if qReportStatus != "" {
			if err := r.SetQueryParam("reportStatus", qReportStatus); err != nil {
				return err
			}
		}

	}

	// query param startTime
	qrStartTime := o.StartTime
	qStartTime := qrStartTime.String()
	if qStartTime != "" {
		if err := r.SetQueryParam("startTime", qStartTime); err != nil {
			return err
		}
	}

	// query param timeQueryType
	qrTimeQueryType := o.TimeQueryType
	qTimeQueryType := qrTimeQueryType
	if qTimeQueryType != "" {
		if err := r.SetQueryParam("timeQueryType", qTimeQueryType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
