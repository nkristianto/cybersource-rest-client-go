// Code generated by go-swagger; DO NOT EDIT.

package payer_authentication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidateAuthenticationResultsReader is a Reader for the ValidateAuthenticationResults structure.
type ValidateAuthenticationResultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateAuthenticationResultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewValidateAuthenticationResultsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewValidateAuthenticationResultsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewValidateAuthenticationResultsBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewValidateAuthenticationResultsCreated creates a ValidateAuthenticationResultsCreated with default headers values
func NewValidateAuthenticationResultsCreated() *ValidateAuthenticationResultsCreated {
	return &ValidateAuthenticationResultsCreated{}
}

/*ValidateAuthenticationResultsCreated handles this case with default header values.

Successful response
*/
type ValidateAuthenticationResultsCreated struct {
	Payload *ValidateAuthenticationResultsCreatedBody
}

func (o *ValidateAuthenticationResultsCreated) Error() string {
	return fmt.Sprintf("[POST /risk/v1/authentication-results][%d] validateAuthenticationResultsCreated  %+v", 201, o.Payload)
}

func (o *ValidateAuthenticationResultsCreated) GetPayload() *ValidateAuthenticationResultsCreatedBody {
	return o.Payload
}

func (o *ValidateAuthenticationResultsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ValidateAuthenticationResultsCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateAuthenticationResultsBadRequest creates a ValidateAuthenticationResultsBadRequest with default headers values
func NewValidateAuthenticationResultsBadRequest() *ValidateAuthenticationResultsBadRequest {
	return &ValidateAuthenticationResultsBadRequest{}
}

/*ValidateAuthenticationResultsBadRequest handles this case with default header values.

Invalid request.
*/
type ValidateAuthenticationResultsBadRequest struct {
	Payload *ValidateAuthenticationResultsBadRequestBody
}

func (o *ValidateAuthenticationResultsBadRequest) Error() string {
	return fmt.Sprintf("[POST /risk/v1/authentication-results][%d] validateAuthenticationResultsBadRequest  %+v", 400, o.Payload)
}

func (o *ValidateAuthenticationResultsBadRequest) GetPayload() *ValidateAuthenticationResultsBadRequestBody {
	return o.Payload
}

func (o *ValidateAuthenticationResultsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ValidateAuthenticationResultsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateAuthenticationResultsBadGateway creates a ValidateAuthenticationResultsBadGateway with default headers values
func NewValidateAuthenticationResultsBadGateway() *ValidateAuthenticationResultsBadGateway {
	return &ValidateAuthenticationResultsBadGateway{}
}

/*ValidateAuthenticationResultsBadGateway handles this case with default header values.

Unexpected system error or system timeout.
*/
type ValidateAuthenticationResultsBadGateway struct {
	Payload *ValidateAuthenticationResultsBadGatewayBody
}

func (o *ValidateAuthenticationResultsBadGateway) Error() string {
	return fmt.Sprintf("[POST /risk/v1/authentication-results][%d] validateAuthenticationResultsBadGateway  %+v", 502, o.Payload)
}

func (o *ValidateAuthenticationResultsBadGateway) GetPayload() *ValidateAuthenticationResultsBadGatewayBody {
	return o.Payload
}

func (o *ValidateAuthenticationResultsBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ValidateAuthenticationResultsBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ValidateAuthenticationResultsBadGatewayBody riskV1AuthenticationResultsPost502Response
swagger:model ValidateAuthenticationResultsBadGatewayBody
*/
type ValidateAuthenticationResultsBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this validate authentication results bad gateway body
func (o *ValidateAuthenticationResultsBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsBadRequestBody riskV1AuthenticationResultsPost400Response
swagger:model ValidateAuthenticationResultsBadRequestBody
*/
type ValidateAuthenticationResultsBadRequestBody struct {

	// details
	Details []*DetailsItems0 `json:"details"`

	// The message describing the reason of the status. Value is:
	// - Encountered a Payer Authentication problem. Payer could not be authenticated.
	//
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible Values:
	// - `MISSING_FIELD`
	// - `INVALID_DATA`
	//
	Reason string `json:"reason,omitempty"`

	// The status for payerAuthentication 201 enroll and validate calls. Value is:
	// - `INVALID_REQUEST`
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this validate authentication results bad request body
func (o *ValidateAuthenticationResultsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validateAuthenticationResultsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsBody validate authentication results body
swagger:model ValidateAuthenticationResultsBody
*/
type ValidateAuthenticationResultsBody struct {

	// client reference information
	ClientReferenceInformation *ValidateAuthenticationResultsParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// consumer authentication information
	ConsumerAuthenticationInformation *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation `json:"consumerAuthenticationInformation,omitempty"`

	// order information
	OrderInformation *ValidateAuthenticationResultsParamsBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *ValidateAuthenticationResultsParamsBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// processing information
	ProcessingInformation *ValidateAuthenticationResultsParamsBodyProcessingInformation `json:"processingInformation,omitempty"`
}

// Validate validates this validate authentication results body
func (o *ValidateAuthenticationResultsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsumerAuthenticationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsBody) validateClientReferenceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsBody) validateConsumerAuthenticationInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
		return nil
	}

	if o.ConsumerAuthenticationInformation != nil {
		if err := o.ConsumerAuthenticationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsBody) validateOrderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsBody) validatePaymentInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsBody) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsCreatedBody riskV1AuthenticationResultsPost201Response
swagger:model ValidateAuthenticationResultsCreatedBody
*/
type ValidateAuthenticationResultsCreatedBody struct {

	// links
	Links *ValidateAuthenticationResultsCreatedBodyLinks `json:"_links,omitempty"`

	// client reference information
	ClientReferenceInformation *ValidateAuthenticationResultsCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// consumer authentication information
	ConsumerAuthenticationInformation *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation `json:"consumerAuthenticationInformation,omitempty"`

	// error information
	ErrorInformation *ValidateAuthenticationResultsCreatedBodyErrorInformation `json:"errorInformation,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request. It is also appended to the endpoint of the resource.
	//
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The message describing the reason of the status. Value is:
	// - The cardholder is enrolled in Payer Authentication. Please authenticate
	// the cardholder before continuing with the transaction.
	//
	Message string `json:"message,omitempty"`

	// The status for payerAuthentication 201 enroll and validate calls. Possible values are:
	// - `AUTHENTICATION_SUCCESSFUL`
	// - `PENDING_AUTHENTICATION`
	// - `INVALID_REQUEST`
	// - `AUTHENTICATION_FAILED`
	//
	Status string `json:"status,omitempty"`

	// Time that the transaction was submitted in local time.
	SubmitTimeLocal string `json:"submitTimeLocal,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this validate authentication results created body
func (o *ValidateAuthenticationResultsCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConsumerAuthenticationInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsCreatedBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateAuthenticationResultsCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateAuthenticationResultsCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBody) validateConsumerAuthenticationInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ConsumerAuthenticationInformation) { // not required
		return nil
	}

	if o.ConsumerAuthenticationInformation != nil {
		if err := o.ConsumerAuthenticationInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateAuthenticationResultsCreated" + "." + "consumerAuthenticationInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBody) validateErrorInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateAuthenticationResultsCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"id", "body", string(o.ID), 26); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBody) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsCreatedBodyClientReferenceInformation validate authentication results created body client reference information
swagger:model ValidateAuthenticationResultsCreatedBodyClientReferenceInformation
*/
type ValidateAuthenticationResultsCreatedBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**\
	// Required field.
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this validate authentication results created body client reference information
func (o *ValidateAuthenticationResultsCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"clientReferenceInformation"+"."+"code", "body", string(o.Code), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation validate authentication results created body consumer authentication information
swagger:model ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation
*/
type ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation struct {

	// Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK.
	//
	AcsRenderingType string `json:"acsRenderingType,omitempty"`

	// Unique transaction identifier assigned by the ACS to identify a single transaction.
	//
	// Max Length: 36
	AcsTransactionID string `json:"acsTransactionId,omitempty"`

	// Raw authentication data that comes from the cardissuing bank. Primary authentication field that
	// indicates if authentication was successful and if liability shift occurred. You should examine first the
	// result of this field. This field contains one of these values:
	// - `-1`: Invalid PARes.
	// - `0`: Successful validation.
	// - `1`: Cardholder is not participating, but the attempt to authenticate was recorded.
	// - `6`: Issuer unable to perform authentication.
	// - `9`: Cardholder did not complete authentication.
	//
	AuthenticationResult string `json:"authenticationResult,omitempty"`

	// Message that explains the authenticationResult reply field.
	//
	AuthenticationStatusMsg string `json:"authenticationStatusMsg,omitempty"`

	// The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow
	//
	AuthorizationPayload string `json:"authorizationPayload,omitempty"`

	// Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and
	// Discover transactions after the customer is authenticated. The value is in base64. When you
	// request the card authorization service, CyberSource automatically converts the value, not the field name,
	// to the format required by your payment processor.
	//
	// Max Length: 255
	Cavv string `json:"cavv,omitempty"`

	// Field that is returned only when the CAVV is generated, which occurs when paresStatus
	// contains the values Y (successful authentication) or A (attempted authentication). If
	// you use the ATOS processor, send the value of this field in the `cavv_algorithm` request field of the
	// authorization service. This field contains one of these values:
	// - `2`: Visa, American Express, JCB, Diners Club, and Discover
	// - `3`: Mastercard
	//
	// Max Length: 1
	CavvAlgorithm string `json:"cavvAlgorithm,omitempty"`

	// The directory server error code indicating a problem with this transaction.
	//
	// Max Length: 3
	DirectoryServerErrorCode string `json:"directoryServerErrorCode,omitempty"`

	// Directory server text and additional detail about the error for this transaction.
	//
	// Max Length: 4096
	DirectoryServerErrorDescription string `json:"directoryServerErrorDescription,omitempty"`

	// The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results.
	// For Cybersource Through Visanet Gateway:
	// The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID
	//
	// Max Length: 36
	DirectoryServerTransactionID string `json:"directoryServerTransactionId,omitempty"`

	// Note This field applies only to non-U.S-issued cards.
	//
	// For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB,
	// Diners Club, and Discover transactions when the card is not enrolled. For more information, see
	// "Interpreting the Reply," page 22.
	//
	// If you are not using the CyberSource payment services, you must send this value to your payment
	// processor in the subsequent request for card authorization. This field contains one of these values:
	// - `06`: The card can be enrolled. Liability shift.
	// - `07`: The card cannot be enrolled. No liability shift.
	//
	// For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB,
	// Diners Club, and Discover transactions. The field is absent when authentication fails.
	// You must send this value to your payment processor in the subsequent request for card authorization.
	// This field contains one of these values:
	// - `05`: Successful authentication
	// - `06`: Authentication attempted
	// - `07`: Failed authentication (No response from the merchant because of a problem.)
	//
	Eci string `json:"eci,omitempty"`

	// ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover.
	// The field is absent when authentication fails. If your payment processor is Streamline, you must pass the
	// value of this field instead of the value of `eci` or `ucafCollectionIndicator`.
	//
	// This field can contain one of these values:
	// - `01`: Authentication attempted (Mastercard)
	// - `02`: Successful authentication (Mastercard)
	// - `05`: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover)
	// - `06`: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover)
	//
	EciRaw string `json:"eciRaw,omitempty"`

	// Indicator used to differentiate Internet transactions from other types. The authentication failed if this field
	// is not returned. For Visa, if your payment processor is Streamline, Barclays, AIBMS, or FDC Germany,
	// you receive the value vbv_failure instead of internet when eci is 07.
	// The value of this field is passed automatically to the authorization service if you request the services
	// together. This field contains one of these values:
	// - `aesk`: American Express SafeKey authentication verified successfully.
	// - `aesk_attempted`: Card not enrolled in American Express SafeKey, but the attempt to authenticate was recorded.
	// - `dipb`: Discover ProtectBuy authentication verified successfully.
	// - `dipb_attempted`: Card not enrolled in Discover ProtectBuy, but the attempt to authenticate was recorded.
	// - `internet`: Authentication was not verified successfully.
	// - `js`: J/Secure authentication verified successfully.
	// - `js_attempted`: Card not enrolled in J/Secure, but the attempt to authenticate was recorded.
	// - `moto`: Mail or telephone order.
	// - `pb_attempted`: Card not enrolled in Diners Club ProtectBuy, but the attempt to authenticate was recorded.
	// - `recurring`: Recurring transaction.
	// - `spa`: Mastercard Identity Check authentication verified successfully.
	// - `spa_failure`: Mastercard Identity Check failed authentication.
	// - `vbv`: Visa Secure authentication verified successfully.
	// - `vbv_attempted`: Card not enrolled in Visa Secure, but the attempt to authenticate was recorded.
	// - `vbv_failure`: Visa Secure authentication unavailable.
	//
	Indicator string `json:"indicator,omitempty"`

	// Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1.
	// When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2.
	// One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button.
	//
	// Max Length: 2
	InteractionCounter string `json:"interactionCounter,omitempty"`

	// Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway
	// Processing, you need to send the value of this field in your authorization request. This field can contain
	// one of these values:
	// - `A`: Proof of authentication attempt was generated.
	// - `N`: Customer failed or canceled authentication. Transaction denied.
	// - `U`: Authentication not completed regardless of the reason.
	// - `Y`: Customer was successfully authenticated.
	//
	ParesStatus string `json:"paresStatus,omitempty"`

	// SDK unique transaction identifier that is generated on each new transaction.
	//
	// Max Length: 36
	SdkTransactionID string `json:"sdkTransactionId,omitempty"`

	// This field contains the 3D Secure version that was used to process the transaction. For example, 1.0.2 or 2.0.0.
	//
	SpecificationVersion string `json:"specificationVersion,omitempty"`

	// Unique transaction identifier assigned by the 3DS Server to identify a single transaction.
	//
	// Max Length: 36
	ThreeDSServerTransactionID string `json:"threeDSServerTransactionId,omitempty"`

	// AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check
	// transactions after the customer is authenticated. The value is in base64.
	// Include the data in the card authorization request.
	//
	UcafAuthenticationData string `json:"ucafAuthenticationData,omitempty"`

	// For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the
	// customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator.
	// This field can contain these values: 0, 1.
	//
	// For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check
	// transactions. The field is absent when authentication fails. You must send this value to your payment
	// processor in the request for card authorization. This field contain one of these values:
	// - `0`: Authentication data not collected, and customer authentication was not completed.
	// - `1`: Authentication data not collected because customer authentication was not completed.
	// - `2`: Authentication data collected because customer completed authentication.
	//
	// Max Length: 1
	UcafCollectionIndicator float64 `json:"ucafCollectionIndicator,omitempty"`

	// Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.
	//
	// Possible Values:
	//
	// Y - 3DS Requestor is whitelisted by cardholder
	//
	// N - 3DS Requestor is not whitelisted by cardholder
	//
	// Max Length: 1
	WhiteListStatus string `json:"whiteListStatus,omitempty"`

	// This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS
	//
	// Max Length: 2
	WhiteListStatusSource string `json:"whiteListStatusSource,omitempty"`

	// Transaction identifier generated by CyberSource for successful enrollment or validation checks.
	// Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes.
	// CyberSource forwards the XID with the card authorization service to these payment processors in these cases:
	// - Barclays
	// - Streamline (when the **ecommerceIndicator**`=spa`)
	//
	Xid string `json:"xid,omitempty"`
}

// Validate validates this validate authentication results created body consumer authentication information
func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAcsTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCavv(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCavvAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirectoryServerErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirectoryServerErrorDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirectoryServerTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInteractionCounter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSdkTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThreeDSServerTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUcafCollectionIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWhiteListStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWhiteListStatusSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateAcsTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.AcsTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"acsTransactionId", "body", string(o.AcsTransactionID), 36); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateCavv(formats strfmt.Registry) error {

	if swag.IsZero(o.Cavv) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"cavv", "body", string(o.Cavv), 255); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateCavvAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(o.CavvAlgorithm) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"cavvAlgorithm", "body", string(o.CavvAlgorithm), 1); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateDirectoryServerErrorCode(formats strfmt.Registry) error {

	if swag.IsZero(o.DirectoryServerErrorCode) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"directoryServerErrorCode", "body", string(o.DirectoryServerErrorCode), 3); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateDirectoryServerErrorDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.DirectoryServerErrorDescription) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"directoryServerErrorDescription", "body", string(o.DirectoryServerErrorDescription), 4096); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateDirectoryServerTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.DirectoryServerTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"directoryServerTransactionId", "body", string(o.DirectoryServerTransactionID), 36); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateInteractionCounter(formats strfmt.Registry) error {

	if swag.IsZero(o.InteractionCounter) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"interactionCounter", "body", string(o.InteractionCounter), 2); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateSdkTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.SdkTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"sdkTransactionId", "body", string(o.SdkTransactionID), 36); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateThreeDSServerTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.ThreeDSServerTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"threeDSServerTransactionId", "body", string(o.ThreeDSServerTransactionID), 36); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateUcafCollectionIndicator(formats strfmt.Registry) error {

	if swag.IsZero(o.UcafCollectionIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"ucafCollectionIndicator", "body", fmt.Sprintf("%f", o.UcafCollectionIndicator), 1); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateWhiteListStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.WhiteListStatus) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"whiteListStatus", "body", string(o.WhiteListStatus), 1); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) validateWhiteListStatusSource(formats strfmt.Registry) error {

	if swag.IsZero(o.WhiteListStatusSource) { // not required
		return nil
	}

	if err := validate.MaxLength("validateAuthenticationResultsCreated"+"."+"consumerAuthenticationInformation"+"."+"whiteListStatusSource", "body", string(o.WhiteListStatusSource), 2); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsCreatedBodyConsumerAuthenticationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsCreatedBodyErrorInformation validate authentication results created body error information
swagger:model ValidateAuthenticationResultsCreatedBodyErrorInformation
*/
type ValidateAuthenticationResultsCreatedBodyErrorInformation struct {

	// details
	Details []*ValidateAuthenticationResultsCreatedBodyErrorInformationDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status. Possible values are:
	// - `INVALID_MERCHANT_CONFIGURATION`
	// - `PENDING_AUTHENTICATION`
	// - `AUTHENTICATION_FAILED`
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this validate authentication results created body error information
func (o *ValidateAuthenticationResultsCreatedBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyErrorInformation) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validateAuthenticationResultsCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsCreatedBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsCreatedBodyErrorInformationDetailsItems0 validate authentication results created body error information details items0
swagger:model ValidateAuthenticationResultsCreatedBodyErrorInformationDetailsItems0
*/
type ValidateAuthenticationResultsCreatedBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this validate authentication results created body error information details items0
func (o *ValidateAuthenticationResultsCreatedBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsCreatedBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsCreatedBodyLinks validate authentication results created body links
swagger:model ValidateAuthenticationResultsCreatedBodyLinks
*/
type ValidateAuthenticationResultsCreatedBodyLinks struct {

	// self
	Self *ValidateAuthenticationResultsCreatedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this validate authentication results created body links
func (o *ValidateAuthenticationResultsCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateAuthenticationResultsCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsCreatedBodyLinksSelf validate authentication results created body links self
swagger:model ValidateAuthenticationResultsCreatedBodyLinksSelf
*/
type ValidateAuthenticationResultsCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this validate authentication results created body links self
func (o *ValidateAuthenticationResultsCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyClientReferenceInformation validate authentication results params body client reference information
swagger:model ValidateAuthenticationResultsParamsBodyClientReferenceInformation
*/
type ValidateAuthenticationResultsParamsBodyClientReferenceInformation struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**\
	// Required field.
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Required: true
	// Max Length: 50
	Code *string `json:"code"`
}

// Validate validates this validate authentication results params body client reference information
func (o *ValidateAuthenticationResultsParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("validateRequest"+"."+"clientReferenceInformation"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	if err := validate.MaxLength("validateRequest"+"."+"clientReferenceInformation"+"."+"code", "body", string(*o.Code), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation validate authentication results params body consumer authentication information
swagger:model ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation
*/
type ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation struct {

	// Payer authentication transaction identifier passed to link the check enrollment
	// and validate authentication messages.
	// **Note**: Required for Standard integration for enroll service.
	// Required for Hybrid integration for validate service.
	//
	// Max Length: 20
	AuthenticationTransactionID string `json:"authenticationTransactionId,omitempty"`

	// Indicates the type of authentication that will be used to challenge the card holder.
	//
	// Possible Values:
	//
	// 01 - Static
	//
	// 02 - Dynamic
	//
	// 03 - OOB (Out of Band)
	//
	// 04 - Decoupled
	// **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time.
	//
	// Max Length: 2
	AuthenticationType string `json:"authenticationType,omitempty"`

	// This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows;
	// CH - Challenge
	// FR - Frictionless
	// FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer).
	//
	// Max Length: 2
	EffectiveAuthenticationType string `json:"effectiveAuthenticationType,omitempty"`

	// Payer authentication result (PARes) message returned by the card-issuing bank.
	// If you need to show proof of enrollment checking, you may need to
	// decrypt and parse the string for the information required by the payment card company.
	// For more information, see "Storing Payer Authentication Data," page 160.
	// Important The value is in base64. You must remove all carriage returns and line feeds before
	// adding the PARes to the request.
	//
	// Required: true
	SignedPares *string `json:"signedPares"`

	// Provides additional information as to why the PAResStatus has a specific value.
	//
	// Max Length: 2
	SignedParesStatusReason string `json:"signedParesStatusReason,omitempty"`

	// Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.
	//
	// Possible Values:
	//
	// Y - 3DS Requestor is whitelisted by cardholder
	//
	// N - 3DS Requestor is not whitelisted by cardholder
	//
	// Max Length: 1
	WhiteListStatus string `json:"whiteListStatus,omitempty"`
}

// Validate validates this validate authentication results params body consumer authentication information
func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthenticationTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEffectiveAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignedPares(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignedParesStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWhiteListStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) validateAuthenticationTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthenticationTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"consumerAuthenticationInformation"+"."+"authenticationTransactionId", "body", string(o.AuthenticationTransactionID), 20); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) validateAuthenticationType(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthenticationType) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"consumerAuthenticationInformation"+"."+"authenticationType", "body", string(o.AuthenticationType), 2); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) validateEffectiveAuthenticationType(formats strfmt.Registry) error {

	if swag.IsZero(o.EffectiveAuthenticationType) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"consumerAuthenticationInformation"+"."+"effectiveAuthenticationType", "body", string(o.EffectiveAuthenticationType), 2); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) validateSignedPares(formats strfmt.Registry) error {

	if err := validate.Required("validateRequest"+"."+"consumerAuthenticationInformation"+"."+"signedPares", "body", o.SignedPares); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) validateSignedParesStatusReason(formats strfmt.Registry) error {

	if swag.IsZero(o.SignedParesStatusReason) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"consumerAuthenticationInformation"+"."+"signedParesStatusReason", "body", string(o.SignedParesStatusReason), 2); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) validateWhiteListStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.WhiteListStatus) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"consumerAuthenticationInformation"+"."+"whiteListStatus", "body", string(o.WhiteListStatus), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyConsumerAuthenticationInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyOrderInformation validate authentication results params body order information
swagger:model ValidateAuthenticationResultsParamsBodyOrderInformation
*/
type ValidateAuthenticationResultsParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// line items
	LineItems []*ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0 `json:"lineItems"`
}

// Validate validates this validate authentication results params body order information
func (o *ValidateAuthenticationResultsParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyOrderInformation) validateLineItems(formats strfmt.Registry) error {

	if swag.IsZero(o.LineItems) { // not required
		return nil
	}

	for i := 0; i < len(o.LineItems); i++ {
		if swag.IsZero(o.LineItems[i]) { // not required
			continue
		}

		if o.LineItems[i] != nil {
			if err := o.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validateRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails Contains `currency` and `totalAmount` for this order.
swagger:model ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails
*/
type ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency.
	//
	// Required: true
	// Max Length: 3
	Currency *string `json:"currency"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// Required: true
	// Max Length: 19
	TotalAmount *string `json:"totalAmount"`
}

// Validate validates this validate authentication results params body order information amount details
func (o *ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("validateRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", o.Currency); err != nil {
		return err
	}

	if err := validate.MaxLength("validateRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", string(*o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {

	if err := validate.Required("validateRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", o.TotalAmount); err != nil {
		return err
	}

	if err := validate.MaxLength("validateRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", string(*o.TotalAmount), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0 validate authentication results params body order information line items items0
swagger:model ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0
*/
type ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0 struct {

	// Number of units for this order. Must be a non-negative integer.
	//
	// The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values
	// related to shipping and/or handling.
	//
	// Maximum: 9.99999999e+08
	// Minimum: 1
	Quantity int64 `json:"quantity,omitempty"`

	// Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must
	// be in the same currency. The tax amount field is additive.
	//
	// The following example uses a two-exponent currency such as USD:
	//
	//  1. You include each line item in your request.
	//  ..- 1st line item has amount=10.00, quantity=1, and taxAmount=0.80
	//  ..- 2nd line item has amount=20.00, quantity=1, and taxAmount=1.60
	//  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.
	//
	// Optional field.
	//
	// Max Length: 15
	TaxAmount string `json:"taxAmount,omitempty"`

	// Per-item price of the product. This value for this field cannot be negative.
	//
	// You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// You can include a decimal point (.), but you cannot include any other special characters.
	// The value is truncated to the correct number of decimal places.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either
	// the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)
	//
	// #### Zero Amount Authorizations
	// If your processor supports zero amount authorizations, you can set this field to 0 for the
	// authorization to check if the card is lost or stolen.
	//
	// #### Maximum Field Lengths
	// For GPN and JCN Gateway: Decimal (10)
	// All other processors: Decimal (15)
	//
	// Required: true
	// Max Length: 15
	UnitPrice *string `json:"unitPrice"`
}

// Validate validates this validate authentication results params body order information line items items0
func (o *ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0) validateQuantity(formats strfmt.Registry) error {

	if swag.IsZero(o.Quantity) { // not required
		return nil
	}

	if err := validate.MinimumInt("quantity", "body", int64(o.Quantity), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", int64(o.Quantity), 9.99999999e+08, false); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0) validateTaxAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TaxAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("taxAmount", "body", string(o.TaxAmount), 15); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0) validateUnitPrice(formats strfmt.Registry) error {

	if err := validate.Required("unitPrice", "body", o.UnitPrice); err != nil {
		return err
	}

	if err := validate.MaxLength("unitPrice", "body", string(*o.UnitPrice), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyOrderInformationLineItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyPaymentInformation validate authentication results params body payment information
swagger:model ValidateAuthenticationResultsParamsBodyPaymentInformation
*/
type ValidateAuthenticationResultsParamsBodyPaymentInformation struct {

	// card
	Card *ValidateAuthenticationResultsParamsBodyPaymentInformationCard `json:"card,omitempty"`

	// fluid data
	FluidData *ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData `json:"fluidData,omitempty"`

	// tokenized card
	TokenizedCard *ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard `json:"tokenizedCard,omitempty"`
}

// Validate validates this validate authentication results params body payment information
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFluidData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformation) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformation) validateFluidData(formats strfmt.Registry) error {

	if swag.IsZero(o.FluidData) { // not required
		return nil
	}

	if o.FluidData != nil {
		if err := o.FluidData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "paymentInformation" + "." + "fluidData")
			}
			return err
		}
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformation) validateTokenizedCard(formats strfmt.Registry) error {

	if swag.IsZero(o.TokenizedCard) { // not required
		return nil
	}

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateRequest" + "." + "paymentInformation" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyPaymentInformationCard validate authentication results params body payment information card
swagger:model ValidateAuthenticationResultsParamsBodyPaymentInformationCard
*/
type ValidateAuthenticationResultsParamsBodyPaymentInformationCard struct {

	// description: The BIN is the first six digits of the card's Primary Account Number (PAN).
	//
	// Max Length: 6
	Bin string `json:"bin,omitempty"`

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`. Leading 0 is required.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value
	// (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is
	// in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause
	// the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.
	//
	// #### FDMS Nashville
	// Required field.
	//
	// #### GPX
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the payment card expires.
	//
	// Format: `YYYY`.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.
	//
	// #### FDMS Nashville
	// Required field.
	//
	// #### FDC Nashville Global and FDMS South
	// You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.
	//
	// #### GPX
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// #### FDMS Nashville
	// Required. String (19)
	//
	// #### GPX
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// #### All other processors
	// Required if `pointOfSaleInformation.entryMode=keyed`. However, this field is optional if your account is configured
	// for relaxed requirements for address data and expiration date. **Important** It is your responsibility to determine
	// whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	Number string `json:"number,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is
	// optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.
	//
	// Possible values:
	// - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron.
	// - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard.
	// - `003`: American Express
	// - `004`: Discover
	// - `005`: Diners Club
	// - `006`: Carte Blanche[^1]
	// - `007`: JCB[^1]
	// - `014`: Enroute[^1]
	// - `021`: JAL[^1]
	// - `024`: Maestro (UK Domestic)[^1]
	// - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types.
	// - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types.
	// - `034`: Dankort[^1]
	// - `036`: Cartes Bancaires[^1]
	// - `037`: Carta Si[^1]
	// - `039`: Encoded account number[^1]
	// - `040`: UATP[^1]
	// - `042`: Maestro (International)[^1]
	// - `050`: Hipercard[^2,3]
	// - `051`: Aura
	// - `054`: Elo[^3]
	// - `062`: China UnionPay
	//
	// [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit.
	// [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.
	// [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.
	//
	// #### Used by
	// **Authorization**
	// Required for Carte Blanche and JCB.
	// Optional for all other card types.
	//
	// #### Card Present reply
	// This field is included in the reply message when the client software that is installed on the POS terminal uses
	// the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to
	// have your account enabled to receive these fields in the credit reply message.
	//
	// Returned by the Credit service.
	//
	// This reply field is only supported by the following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// #### GPX
	// This field only supports transactions from the following card types:
	// - Visa
	// - Mastercard
	// - AMEX
	// - Discover
	// - Diners
	// - JCB
	// - Union Pay International
	//
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this validate authentication results params body payment information card
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationCard) validateBin(formats strfmt.Registry) error {

	if swag.IsZero(o.Bin) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"card"+"."+"bin", "body", string(o.Bin), 6); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"card"+"."+"number", "body", string(o.Number), 20); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationCard) validateType(formats strfmt.Registry) error {

	if err := validate.Required("validateRequest"+"."+"paymentInformation"+"."+"card"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyPaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData validate authentication results params body payment information fluid data
swagger:model ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData
*/
type ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData struct {

	// The identifier for a payment solution, which is sending the encrypted payment data for decryption.
	// Valid values:
	// - Samsung Pay: `RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ=`
	//
	// **Note**: For other payment solutions, the value may be specific to the customer's mobile device. For example,
	// the descriptor for a Bluefin payment encryption would be a device-generated descriptor.
	//
	// #### Used by
	// **Authorization and Standalone Credits**
	// Required for authorizations and standalone credits that use Bluefin PCI P2PE.
	//
	// #### Card Present processing
	// Format of the encrypted payment data. The value for Bluefin PCI P2PE is `Ymx1ZWZpbg==`.
	//
	// Max Length: 128
	Descriptor string `json:"descriptor,omitempty"`

	// Encoding method used to encrypt the payment data.
	//
	// Valid value: Base64
	//
	// Max Length: 6
	Encoding string `json:"encoding,omitempty"`

	// The encoded or encrypted value that a payment solution returns for an authorization request. For details about the valid values for a key, see [Creating an Online Authorization](https://developer.cybersource.com/api/developer-guides/dita-payments/CreatingOnlineAuth.html)
	//
	KeySerialNumber string `json:"keySerialNumber,omitempty"`

	// Represents the encrypted payment data BLOB. The entry for this field is dependent on the payment solution a merchant uses.
	//
	// #### Used by
	// **Authorization and Standalone Credits**
	// Required for authorizations and standalone credits that use Bluefin PCI P2PE.
	//
	// #### Card Present processing
	// This field represents the encrypted Bluefin PCI P2PE payment data. Obtain the encrypted payment data from a Bluefin-supported device.
	//
	// Required: true
	// Max Length: 3072
	Value *string `json:"value"`
}

// Validate validates this validate authentication results params body payment information fluid data
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncoding(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData) validateDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.Descriptor) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"fluidData"+"."+"descriptor", "body", string(o.Descriptor), 128); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData) validateEncoding(formats strfmt.Registry) error {

	if swag.IsZero(o.Encoding) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"fluidData"+"."+"encoding", "body", string(o.Encoding), 6); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("validateRequest"+"."+"paymentInformation"+"."+"fluidData"+"."+"value", "body", o.Value); err != nil {
		return err
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"fluidData"+"."+"value", "body", string(*o.Value), 3072); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyPaymentInformationFluidData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard validate authentication results params body payment information tokenized card
swagger:model ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard
*/
type ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard struct {

	// One of two possible meanings:
	// - The two-digit month in which a token expires.
	// - The two-digit month in which a card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (`card_type=039`), if there is no expiration date on the card, use `12`.\
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### Samsung Pay and Apple Pay
	// Month in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.
	//
	// For processor-specific information, see the `customer_cc_expmo` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// One of two possible meanings:
	// - The four-digit year in which a token expires.
	// - The four-digit year in which a card expires.
	// Format: `YYYY`
	// Possible values: `1900` through `3000`
	// Data type: Non-negative integer
	//
	// **NOTE** The meaning of this field is dependent on the payment processor that is returning the value in an authorization reply. Please see the processor-specific details below.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (1900 through
	// 3000) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (`card_ type=039`), if there is no expiration date on the card, use `2021`.
	//
	// #### FDC Nashville Global and FDMS South
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of
	// the year.
	//
	// #### Samsung Pay and Apple Pay
	// Year in which the token expires. CyberSource includes this field in the reply message when it decrypts the payment blob for the tokenized transaction.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction
	// you are requesting.
	//
	// For processor-specific information, see the `customer_cc_expyr` or `token_expiration_year` field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Customer’s payment network token value.
	//
	// Max Length: 20
	Number string `json:"number,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// **IMPORTANT** It is strongly recommended that you include the card type field in request messages even if it is
	// optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.
	//
	// Possible values:
	// - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron.
	// - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard.
	// - `003`: American Express
	// - `004`: Discover
	// - `005`: Diners Club
	// - `006`: Carte Blanche[^1]
	// - `007`: JCB[^1]
	// - `014`: Enroute[^1]
	// - `021`: JAL[^1]
	// - `024`: Maestro (UK Domestic)[^1]
	// - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types.
	// - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types.
	// - `034`: Dankort[^1]
	// - `036`: Cartes Bancaires[^1]
	// - `037`: Carta Si[^1]
	// - `039`: Encoded account number[^1]
	// - `040`: UATP[^1]
	// - `042`: Maestro (International)[^1]
	// - `050`: Hipercard[^2,3]
	// - `051`: Aura
	// - `054`: Elo[^3]
	// - `062`: China UnionPay
	//
	// [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit.
	// [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.
	// [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit.
	//
	// #### Used by
	// **Authorization**
	// Required for Carte Blanche and JCB.
	// Optional for all other card types.
	//
	// #### Card Present reply
	// This field is included in the reply message when the client software that is installed on the POS terminal uses
	// the token management service (TMS) to retrieve tokenized payment details. You must contact customer support to
	// have your account enabled to receive these fields in the credit reply message.
	//
	// Returned by the Credit service.
	//
	// This reply field is only supported by the following processors:
	// - American Express Direct
	// - Credit Mutuel-CIC
	// - FDC Nashville Global
	// - OmniPay Direct
	// - SIX
	//
	// #### GPX
	// This field only supports transactions from the following card types:
	// - Visa
	// - Mastercard
	// - AMEX
	// - Discover
	// - Diners
	// - JCB
	// - Union Pay International
	//
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this validate authentication results params body payment information tokenized card
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"number", "body", string(o.Number), 20); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard) validateType(formats strfmt.Registry) error {

	if err := validate.Required("validateRequest"+"."+"paymentInformation"+"."+"tokenizedCard"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyPaymentInformationTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ValidateAuthenticationResultsParamsBodyProcessingInformation validate authentication results params body processing information
swagger:model ValidateAuthenticationResultsParamsBodyProcessingInformation
*/
type ValidateAuthenticationResultsParamsBodyProcessingInformation struct {

	// Type of digital payment solution for the transaction. Possible Values:
	//
	//  - `visacheckout`: Visa Checkout. This value is required for Visa Checkout transactions. For details, see `payment_solution` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)
	//  - `001`: Apple Pay.
	//  - `004`: Cybersource In-App Solution.
	//  - `005`: Masterpass. This value is required for Masterpass transactions on OmniPay Direct. For details, see "Masterpass" in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//  - `006`: Android Pay.
	//  - `007`: Chase Pay.
	//  - `008`: Samsung Pay.
	//  - `012`: Google Pay.
	//
	// Max Length: 12
	PaymentSolution string `json:"paymentSolution,omitempty"`

	// Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in
	// the Visa Checkout **callID** field.
	//
	// For details, see the `vc_order_id` field description in [Visa Checkout Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/VCO_SCMP_API/html/)
	//
	// Max Length: 48
	VisaCheckoutID string `json:"visaCheckoutId,omitempty"`
}

// Validate validates this validate authentication results params body processing information
func (o *ValidateAuthenticationResultsParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVisaCheckoutID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyProcessingInformation) validatePaymentSolution(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentSolution) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"processingInformation"+"."+"paymentSolution", "body", string(o.PaymentSolution), 12); err != nil {
		return err
	}

	return nil
}

func (o *ValidateAuthenticationResultsParamsBodyProcessingInformation) validateVisaCheckoutID(formats strfmt.Registry) error {

	if swag.IsZero(o.VisaCheckoutID) { // not required
		return nil
	}

	if err := validate.MaxLength("validateRequest"+"."+"processingInformation"+"."+"visaCheckoutId", "body", string(o.VisaCheckoutID), 48); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateAuthenticationResultsParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res ValidateAuthenticationResultsParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
