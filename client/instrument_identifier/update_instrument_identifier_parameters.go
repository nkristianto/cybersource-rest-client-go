// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateInstrumentIdentifierParams creates a new UpdateInstrumentIdentifierParams object
// with the default values initialized.
func NewUpdateInstrumentIdentifierParams() *UpdateInstrumentIdentifierParams {
	var ()
	return &UpdateInstrumentIdentifierParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateInstrumentIdentifierParamsWithTimeout creates a new UpdateInstrumentIdentifierParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateInstrumentIdentifierParamsWithTimeout(timeout time.Duration) *UpdateInstrumentIdentifierParams {
	var ()
	return &UpdateInstrumentIdentifierParams{

		timeout: timeout,
	}
}

// NewUpdateInstrumentIdentifierParamsWithContext creates a new UpdateInstrumentIdentifierParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateInstrumentIdentifierParamsWithContext(ctx context.Context) *UpdateInstrumentIdentifierParams {
	var ()
	return &UpdateInstrumentIdentifierParams{

		Context: ctx,
	}
}

// NewUpdateInstrumentIdentifierParamsWithHTTPClient creates a new UpdateInstrumentIdentifierParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateInstrumentIdentifierParamsWithHTTPClient(client *http.Client) *UpdateInstrumentIdentifierParams {
	var ()
	return &UpdateInstrumentIdentifierParams{
		HTTPClient: client,
	}
}

/*UpdateInstrumentIdentifierParams contains all the parameters to send to the API endpoint
for the update instrument identifier operation typically these are written to a http.Request
*/
type UpdateInstrumentIdentifierParams struct {

	/*ProfileID
	  The id of a profile containing user specific TMS configuration.

	*/
	ProfileID string
	/*TokenID
	  The TokenId of an Instrument Identifier.

	*/
	TokenID string
	/*UpdateInstrumentIdentifierRequest
	  Specify the previous transaction ID to update.

	*/
	UpdateInstrumentIdentifierRequest UpdateInstrumentIdentifierBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) WithTimeout(timeout time.Duration) *UpdateInstrumentIdentifierParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) WithContext(ctx context.Context) *UpdateInstrumentIdentifierParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) WithHTTPClient(client *http.Client) *UpdateInstrumentIdentifierParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProfileID adds the profileID to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) WithProfileID(profileID string) *UpdateInstrumentIdentifierParams {
	o.SetProfileID(profileID)
	return o
}

// SetProfileID adds the profileId to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) SetProfileID(profileID string) {
	o.ProfileID = profileID
}

// WithTokenID adds the tokenID to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) WithTokenID(tokenID string) *UpdateInstrumentIdentifierParams {
	o.SetTokenID(tokenID)
	return o
}

// SetTokenID adds the tokenId to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) SetTokenID(tokenID string) {
	o.TokenID = tokenID
}

// WithUpdateInstrumentIdentifierRequest adds the updateInstrumentIdentifierRequest to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) WithUpdateInstrumentIdentifierRequest(updateInstrumentIdentifierRequest UpdateInstrumentIdentifierBody) *UpdateInstrumentIdentifierParams {
	o.SetUpdateInstrumentIdentifierRequest(updateInstrumentIdentifierRequest)
	return o
}

// SetUpdateInstrumentIdentifierRequest adds the updateInstrumentIdentifierRequest to the update instrument identifier params
func (o *UpdateInstrumentIdentifierParams) SetUpdateInstrumentIdentifierRequest(updateInstrumentIdentifierRequest UpdateInstrumentIdentifierBody) {
	o.UpdateInstrumentIdentifierRequest = updateInstrumentIdentifierRequest
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateInstrumentIdentifierParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param profile-id
	if err := r.SetHeaderParam("profile-id", o.ProfileID); err != nil {
		return err
	}

	// path param tokenId
	if err := r.SetPathParam("tokenId", o.TokenID); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.UpdateInstrumentIdentifierRequest); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
