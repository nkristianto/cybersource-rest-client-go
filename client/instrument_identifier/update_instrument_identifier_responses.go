// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateInstrumentIdentifierReader is a Reader for the UpdateInstrumentIdentifier structure.
type UpdateInstrumentIdentifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInstrumentIdentifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInstrumentIdentifierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInstrumentIdentifierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInstrumentIdentifierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInstrumentIdentifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewUpdateInstrumentIdentifierGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewUpdateInstrumentIdentifierFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInstrumentIdentifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateInstrumentIdentifierOK creates a UpdateInstrumentIdentifierOK with default headers values
func NewUpdateInstrumentIdentifierOK() *UpdateInstrumentIdentifierOK {
	return &UpdateInstrumentIdentifierOK{}
}

/*UpdateInstrumentIdentifierOK handles this case with default header values.

The updated Instrument Identifier has been returned.
*/
type UpdateInstrumentIdentifierOK struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload *UpdateInstrumentIdentifierOKBody
}

func (o *UpdateInstrumentIdentifierOK) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/instrumentidentifiers/{tokenId}][%d] updateInstrumentIdentifierOK  %+v", 200, o.Payload)
}

func (o *UpdateInstrumentIdentifierOK) GetPayload() *UpdateInstrumentIdentifierOKBody {
	return o.Payload
}

func (o *UpdateInstrumentIdentifierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	o.Payload = new(UpdateInstrumentIdentifierOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstrumentIdentifierBadRequest creates a UpdateInstrumentIdentifierBadRequest with default headers values
func NewUpdateInstrumentIdentifierBadRequest() *UpdateInstrumentIdentifierBadRequest {
	return &UpdateInstrumentIdentifierBadRequest{}
}

/*UpdateInstrumentIdentifierBadRequest handles this case with default header values.

Bad Request. A required header value could be missing.
*/
type UpdateInstrumentIdentifierBadRequest struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdateInstrumentIdentifierBadRequestBodyItems0
}

func (o *UpdateInstrumentIdentifierBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/instrumentidentifiers/{tokenId}][%d] updateInstrumentIdentifierBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInstrumentIdentifierBadRequest) GetPayload() []*UpdateInstrumentIdentifierBadRequestBodyItems0 {
	return o.Payload
}

func (o *UpdateInstrumentIdentifierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstrumentIdentifierForbidden creates a UpdateInstrumentIdentifierForbidden with default headers values
func NewUpdateInstrumentIdentifierForbidden() *UpdateInstrumentIdentifierForbidden {
	return &UpdateInstrumentIdentifierForbidden{}
}

/*UpdateInstrumentIdentifierForbidden handles this case with default header values.

Forbidden. The profile might not have permission to perform the token operation.
*/
type UpdateInstrumentIdentifierForbidden struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdateInstrumentIdentifierForbiddenBodyItems0
}

func (o *UpdateInstrumentIdentifierForbidden) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/instrumentidentifiers/{tokenId}][%d] updateInstrumentIdentifierForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInstrumentIdentifierForbidden) GetPayload() []*UpdateInstrumentIdentifierForbiddenBodyItems0 {
	return o.Payload
}

func (o *UpdateInstrumentIdentifierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstrumentIdentifierNotFound creates a UpdateInstrumentIdentifierNotFound with default headers values
func NewUpdateInstrumentIdentifierNotFound() *UpdateInstrumentIdentifierNotFound {
	return &UpdateInstrumentIdentifierNotFound{}
}

/*UpdateInstrumentIdentifierNotFound handles this case with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type UpdateInstrumentIdentifierNotFound struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdateInstrumentIdentifierNotFoundBodyItems0
}

func (o *UpdateInstrumentIdentifierNotFound) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/instrumentidentifiers/{tokenId}][%d] updateInstrumentIdentifierNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInstrumentIdentifierNotFound) GetPayload() []*UpdateInstrumentIdentifierNotFoundBodyItems0 {
	return o.Payload
}

func (o *UpdateInstrumentIdentifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstrumentIdentifierGone creates a UpdateInstrumentIdentifierGone with default headers values
func NewUpdateInstrumentIdentifierGone() *UpdateInstrumentIdentifierGone {
	return &UpdateInstrumentIdentifierGone{}
}

/*UpdateInstrumentIdentifierGone handles this case with default header values.

Token Not Available. The token has been deleted.
*/
type UpdateInstrumentIdentifierGone struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdateInstrumentIdentifierGoneBodyItems0
}

func (o *UpdateInstrumentIdentifierGone) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/instrumentidentifiers/{tokenId}][%d] updateInstrumentIdentifierGone  %+v", 410, o.Payload)
}

func (o *UpdateInstrumentIdentifierGone) GetPayload() []*UpdateInstrumentIdentifierGoneBodyItems0 {
	return o.Payload
}

func (o *UpdateInstrumentIdentifierGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstrumentIdentifierFailedDependency creates a UpdateInstrumentIdentifierFailedDependency with default headers values
func NewUpdateInstrumentIdentifierFailedDependency() *UpdateInstrumentIdentifierFailedDependency {
	return &UpdateInstrumentIdentifierFailedDependency{}
}

/*UpdateInstrumentIdentifierFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type UpdateInstrumentIdentifierFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdateInstrumentIdentifierFailedDependencyBodyItems0
}

func (o *UpdateInstrumentIdentifierFailedDependency) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/instrumentidentifiers/{tokenId}][%d] updateInstrumentIdentifierFailedDependency  %+v", 424, o.Payload)
}

func (o *UpdateInstrumentIdentifierFailedDependency) GetPayload() []*UpdateInstrumentIdentifierFailedDependencyBodyItems0 {
	return o.Payload
}

func (o *UpdateInstrumentIdentifierFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstrumentIdentifierInternalServerError creates a UpdateInstrumentIdentifierInternalServerError with default headers values
func NewUpdateInstrumentIdentifierInternalServerError() *UpdateInstrumentIdentifierInternalServerError {
	return &UpdateInstrumentIdentifierInternalServerError{}
}

/*UpdateInstrumentIdentifierInternalServerError handles this case with default header values.

Unexpected error.
*/
type UpdateInstrumentIdentifierInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*UpdateInstrumentIdentifierInternalServerErrorBodyItems0
}

func (o *UpdateInstrumentIdentifierInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /tms/v1/instrumentidentifiers/{tokenId}][%d] updateInstrumentIdentifierInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInstrumentIdentifierInternalServerError) GetPayload() []*UpdateInstrumentIdentifierInternalServerErrorBodyItems0 {
	return o.Payload
}

func (o *UpdateInstrumentIdentifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateInstrumentIdentifierBadRequestBodyItems0 update instrument identifier bad request body items0
swagger:model UpdateInstrumentIdentifierBadRequestBodyItems0
*/
type UpdateInstrumentIdentifierBadRequestBodyItems0 struct {

	// details
	Details *UpdateInstrumentIdentifierBadRequestBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update instrument identifier bad request body items0
func (o *UpdateInstrumentIdentifierBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierBadRequestBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierBadRequestBodyItems0Details update instrument identifier bad request body items0 details
swagger:model UpdateInstrumentIdentifierBadRequestBodyItems0Details
*/
type UpdateInstrumentIdentifierBadRequestBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update instrument identifier bad request body items0 details
func (o *UpdateInstrumentIdentifierBadRequestBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierBadRequestBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierBadRequestBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierBadRequestBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierBody update instrument identifier body
swagger:model UpdateInstrumentIdentifierBody
*/
type UpdateInstrumentIdentifierBody struct {

	// processing information
	ProcessingInformation *UpdateInstrumentIdentifierParamsBodyProcessingInformation `json:"processingInformation,omitempty"`
}

// Validate validates this update instrument identifier body
func (o *UpdateInstrumentIdentifierBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierBody) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierFailedDependencyBodyItems0 update instrument identifier failed dependency body items0
swagger:model UpdateInstrumentIdentifierFailedDependencyBodyItems0
*/
type UpdateInstrumentIdentifierFailedDependencyBodyItems0 struct {

	// details
	Details *UpdateInstrumentIdentifierFailedDependencyBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update instrument identifier failed dependency body items0
func (o *UpdateInstrumentIdentifierFailedDependencyBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierFailedDependencyBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierFailedDependencyBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierFailedDependencyBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierFailedDependencyBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierFailedDependencyBodyItems0Details update instrument identifier failed dependency body items0 details
swagger:model UpdateInstrumentIdentifierFailedDependencyBodyItems0Details
*/
type UpdateInstrumentIdentifierFailedDependencyBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update instrument identifier failed dependency body items0 details
func (o *UpdateInstrumentIdentifierFailedDependencyBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierFailedDependencyBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierFailedDependencyBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierFailedDependencyBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierForbiddenBodyItems0 update instrument identifier forbidden body items0
swagger:model UpdateInstrumentIdentifierForbiddenBodyItems0
*/
type UpdateInstrumentIdentifierForbiddenBodyItems0 struct {

	// details
	Details *UpdateInstrumentIdentifierForbiddenBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update instrument identifier forbidden body items0
func (o *UpdateInstrumentIdentifierForbiddenBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierForbiddenBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierForbiddenBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierForbiddenBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierForbiddenBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierForbiddenBodyItems0Details update instrument identifier forbidden body items0 details
swagger:model UpdateInstrumentIdentifierForbiddenBodyItems0Details
*/
type UpdateInstrumentIdentifierForbiddenBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update instrument identifier forbidden body items0 details
func (o *UpdateInstrumentIdentifierForbiddenBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierForbiddenBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierForbiddenBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierForbiddenBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierGoneBodyItems0 update instrument identifier gone body items0
swagger:model UpdateInstrumentIdentifierGoneBodyItems0
*/
type UpdateInstrumentIdentifierGoneBodyItems0 struct {

	// details
	Details *UpdateInstrumentIdentifierGoneBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update instrument identifier gone body items0
func (o *UpdateInstrumentIdentifierGoneBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierGoneBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierGoneBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierGoneBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierGoneBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierGoneBodyItems0Details update instrument identifier gone body items0 details
swagger:model UpdateInstrumentIdentifierGoneBodyItems0Details
*/
type UpdateInstrumentIdentifierGoneBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update instrument identifier gone body items0 details
func (o *UpdateInstrumentIdentifierGoneBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierGoneBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierGoneBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierGoneBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierInternalServerErrorBodyItems0 update instrument identifier internal server error body items0
swagger:model UpdateInstrumentIdentifierInternalServerErrorBodyItems0
*/
type UpdateInstrumentIdentifierInternalServerErrorBodyItems0 struct {

	// details
	Details *UpdateInstrumentIdentifierInternalServerErrorBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update instrument identifier internal server error body items0
func (o *UpdateInstrumentIdentifierInternalServerErrorBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierInternalServerErrorBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierInternalServerErrorBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierInternalServerErrorBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierInternalServerErrorBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierInternalServerErrorBodyItems0Details update instrument identifier internal server error body items0 details
swagger:model UpdateInstrumentIdentifierInternalServerErrorBodyItems0Details
*/
type UpdateInstrumentIdentifierInternalServerErrorBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update instrument identifier internal server error body items0 details
func (o *UpdateInstrumentIdentifierInternalServerErrorBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierInternalServerErrorBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierInternalServerErrorBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierInternalServerErrorBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierNotFoundBodyItems0 update instrument identifier not found body items0
swagger:model UpdateInstrumentIdentifierNotFoundBodyItems0
*/
type UpdateInstrumentIdentifierNotFoundBodyItems0 struct {

	// details
	Details *UpdateInstrumentIdentifierNotFoundBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this update instrument identifier not found body items0
func (o *UpdateInstrumentIdentifierNotFoundBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierNotFoundBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierNotFoundBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierNotFoundBodyItems0) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierNotFoundBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierNotFoundBodyItems0Details update instrument identifier not found body items0 details
swagger:model UpdateInstrumentIdentifierNotFoundBodyItems0Details
*/
type UpdateInstrumentIdentifierNotFoundBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this update instrument identifier not found body items0 details
func (o *UpdateInstrumentIdentifierNotFoundBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierNotFoundBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierNotFoundBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierNotFoundBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBody tmsV1InstrumentIdentifiersPatch200Response
swagger:model UpdateInstrumentIdentifierOKBody
*/
type UpdateInstrumentIdentifierOKBody struct {

	// links
	Links *UpdateInstrumentIdentifierOKBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *UpdateInstrumentIdentifierOKBodyBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *UpdateInstrumentIdentifierOKBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *UpdateInstrumentIdentifierOKBodyMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *UpdateInstrumentIdentifierOKBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this update instrument identifier o k body
func (o *UpdateInstrumentIdentifierOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateInstrumentIdentifierOKBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateInstrumentIdentifierOKBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateInstrumentIdentifierOKBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateInstrumentIdentifierOKBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyBankAccount update instrument identifier o k body bank account
swagger:model UpdateInstrumentIdentifierOKBodyBankAccount
*/
type UpdateInstrumentIdentifierOKBodyBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this update instrument identifier o k body bank account
func (o *UpdateInstrumentIdentifierOKBodyBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("updateInstrumentIdentifierOK"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("updateInstrumentIdentifierOK"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("updateInstrumentIdentifierOK"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("updateInstrumentIdentifierOK"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyCard update instrument identifier o k body card
swagger:model UpdateInstrumentIdentifierOKBodyCard
*/
type UpdateInstrumentIdentifierOKBodyCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this update instrument identifier o k body card
func (o *UpdateInstrumentIdentifierOKBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("updateInstrumentIdentifierOK"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("updateInstrumentIdentifierOK"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyCard) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyLinks update instrument identifier o k body links
swagger:model UpdateInstrumentIdentifierOKBodyLinks
*/
type UpdateInstrumentIdentifierOKBodyLinks struct {

	// ancestor
	Ancestor *UpdateInstrumentIdentifierOKBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *UpdateInstrumentIdentifierOKBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *UpdateInstrumentIdentifierOKBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this update instrument identifier o k body links
func (o *UpdateInstrumentIdentifierOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyLinksAncestor update instrument identifier o k body links ancestor
swagger:model UpdateInstrumentIdentifierOKBodyLinksAncestor
*/
type UpdateInstrumentIdentifierOKBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update instrument identifier o k body links ancestor
func (o *UpdateInstrumentIdentifierOKBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyLinksSelf update instrument identifier o k body links self
swagger:model UpdateInstrumentIdentifierOKBodyLinksSelf
*/
type UpdateInstrumentIdentifierOKBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update instrument identifier o k body links self
func (o *UpdateInstrumentIdentifierOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyLinksSuccessor update instrument identifier o k body links successor
swagger:model UpdateInstrumentIdentifierOKBodyLinksSuccessor
*/
type UpdateInstrumentIdentifierOKBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this update instrument identifier o k body links successor
func (o *UpdateInstrumentIdentifierOKBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyMetadata update instrument identifier o k body metadata
swagger:model UpdateInstrumentIdentifierOKBodyMetadata
*/
type UpdateInstrumentIdentifierOKBodyMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this update instrument identifier o k body metadata
func (o *UpdateInstrumentIdentifierOKBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyMetadata) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyProcessingInformation update instrument identifier o k body processing information
swagger:model UpdateInstrumentIdentifierOKBodyProcessingInformation
*/
type UpdateInstrumentIdentifierOKBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this update instrument identifier o k body processing information
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions update instrument identifier o k body processing information authorization options
swagger:model UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions
*/
type UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this update instrument identifier o k body processing information authorization options
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator update instrument identifier o k body processing information authorization options initiator
swagger:model UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator
*/
type UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this update instrument identifier o k body processing information authorization options initiator
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction update instrument identifier o k body processing information authorization options initiator merchant initiated transaction
swagger:model UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this update instrument identifier o k body processing information authorization options initiator merchant initiated transaction
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInstrumentIdentifierOK"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierParamsBodyProcessingInformation update instrument identifier params body processing information
swagger:model UpdateInstrumentIdentifierParamsBodyProcessingInformation
*/
type UpdateInstrumentIdentifierParamsBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this update instrument identifier params body processing information
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierRequest" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions update instrument identifier params body processing information authorization options
swagger:model UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions
*/
type UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this update instrument identifier params body processing information authorization options
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator update instrument identifier params body processing information authorization options initiator
swagger:model UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator
*/
type UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this update instrument identifier params body processing information authorization options initiator
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInstrumentIdentifierRequest" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction update instrument identifier params body processing information authorization options initiator merchant initiated transaction
swagger:model UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this update instrument identifier params body processing information authorization options initiator merchant initiated transaction
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInstrumentIdentifierRequest"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res UpdateInstrumentIdentifierParamsBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
