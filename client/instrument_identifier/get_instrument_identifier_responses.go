// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetInstrumentIdentifierReader is a Reader for the GetInstrumentIdentifier structure.
type GetInstrumentIdentifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstrumentIdentifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInstrumentIdentifierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInstrumentIdentifierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInstrumentIdentifierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInstrumentIdentifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetInstrumentIdentifierGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewGetInstrumentIdentifierFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInstrumentIdentifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInstrumentIdentifierOK creates a GetInstrumentIdentifierOK with default headers values
func NewGetInstrumentIdentifierOK() *GetInstrumentIdentifierOK {
	return &GetInstrumentIdentifierOK{}
}

/*GetInstrumentIdentifierOK handles this case with default header values.

An existing Instrument Identifier associated with the supplied `tokenId` has been returned.
*/
type GetInstrumentIdentifierOK struct {
	/*A globally-unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload *GetInstrumentIdentifierOKBody
}

func (o *GetInstrumentIdentifierOK) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}][%d] getInstrumentIdentifierOK  %+v", 200, o.Payload)
}

func (o *GetInstrumentIdentifierOK) GetPayload() *GetInstrumentIdentifierOKBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	o.Payload = new(GetInstrumentIdentifierOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierBadRequest creates a GetInstrumentIdentifierBadRequest with default headers values
func NewGetInstrumentIdentifierBadRequest() *GetInstrumentIdentifierBadRequest {
	return &GetInstrumentIdentifierBadRequest{}
}

/*GetInstrumentIdentifierBadRequest handles this case with default header values.

Bad Request. A required header value could be missing.
*/
type GetInstrumentIdentifierBadRequest struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetInstrumentIdentifierBadRequestBodyItems0
}

func (o *GetInstrumentIdentifierBadRequest) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}][%d] getInstrumentIdentifierBadRequest  %+v", 400, o.Payload)
}

func (o *GetInstrumentIdentifierBadRequest) GetPayload() []*GetInstrumentIdentifierBadRequestBodyItems0 {
	return o.Payload
}

func (o *GetInstrumentIdentifierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierForbidden creates a GetInstrumentIdentifierForbidden with default headers values
func NewGetInstrumentIdentifierForbidden() *GetInstrumentIdentifierForbidden {
	return &GetInstrumentIdentifierForbidden{}
}

/*GetInstrumentIdentifierForbidden handles this case with default header values.

Forbidden. The profile might not have permission to perform the token operation.
*/
type GetInstrumentIdentifierForbidden struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetInstrumentIdentifierForbiddenBodyItems0
}

func (o *GetInstrumentIdentifierForbidden) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}][%d] getInstrumentIdentifierForbidden  %+v", 403, o.Payload)
}

func (o *GetInstrumentIdentifierForbidden) GetPayload() []*GetInstrumentIdentifierForbiddenBodyItems0 {
	return o.Payload
}

func (o *GetInstrumentIdentifierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierNotFound creates a GetInstrumentIdentifierNotFound with default headers values
func NewGetInstrumentIdentifierNotFound() *GetInstrumentIdentifierNotFound {
	return &GetInstrumentIdentifierNotFound{}
}

/*GetInstrumentIdentifierNotFound handles this case with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type GetInstrumentIdentifierNotFound struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetInstrumentIdentifierNotFoundBodyItems0
}

func (o *GetInstrumentIdentifierNotFound) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}][%d] getInstrumentIdentifierNotFound  %+v", 404, o.Payload)
}

func (o *GetInstrumentIdentifierNotFound) GetPayload() []*GetInstrumentIdentifierNotFoundBodyItems0 {
	return o.Payload
}

func (o *GetInstrumentIdentifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierGone creates a GetInstrumentIdentifierGone with default headers values
func NewGetInstrumentIdentifierGone() *GetInstrumentIdentifierGone {
	return &GetInstrumentIdentifierGone{}
}

/*GetInstrumentIdentifierGone handles this case with default header values.

Token Not Available. The token has been deleted.
*/
type GetInstrumentIdentifierGone struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetInstrumentIdentifierGoneBodyItems0
}

func (o *GetInstrumentIdentifierGone) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}][%d] getInstrumentIdentifierGone  %+v", 410, o.Payload)
}

func (o *GetInstrumentIdentifierGone) GetPayload() []*GetInstrumentIdentifierGoneBodyItems0 {
	return o.Payload
}

func (o *GetInstrumentIdentifierGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierFailedDependency creates a GetInstrumentIdentifierFailedDependency with default headers values
func NewGetInstrumentIdentifierFailedDependency() *GetInstrumentIdentifierFailedDependency {
	return &GetInstrumentIdentifierFailedDependency{}
}

/*GetInstrumentIdentifierFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type GetInstrumentIdentifierFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetInstrumentIdentifierFailedDependencyBodyItems0
}

func (o *GetInstrumentIdentifierFailedDependency) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}][%d] getInstrumentIdentifierFailedDependency  %+v", 424, o.Payload)
}

func (o *GetInstrumentIdentifierFailedDependency) GetPayload() []*GetInstrumentIdentifierFailedDependencyBodyItems0 {
	return o.Payload
}

func (o *GetInstrumentIdentifierFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierInternalServerError creates a GetInstrumentIdentifierInternalServerError with default headers values
func NewGetInstrumentIdentifierInternalServerError() *GetInstrumentIdentifierInternalServerError {
	return &GetInstrumentIdentifierInternalServerError{}
}

/*GetInstrumentIdentifierInternalServerError handles this case with default header values.

Unexpected error.
*/
type GetInstrumentIdentifierInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetInstrumentIdentifierInternalServerErrorBodyItems0
}

func (o *GetInstrumentIdentifierInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}][%d] getInstrumentIdentifierInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInstrumentIdentifierInternalServerError) GetPayload() []*GetInstrumentIdentifierInternalServerErrorBodyItems0 {
	return o.Payload
}

func (o *GetInstrumentIdentifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetInstrumentIdentifierBadRequestBodyItems0 get instrument identifier bad request body items0
swagger:model GetInstrumentIdentifierBadRequestBodyItems0
*/
type GetInstrumentIdentifierBadRequestBodyItems0 struct {

	// details
	Details *GetInstrumentIdentifierBadRequestBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier bad request body items0
func (o *GetInstrumentIdentifierBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierBadRequestBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierBadRequestBodyItems0Details get instrument identifier bad request body items0 details
swagger:model GetInstrumentIdentifierBadRequestBodyItems0Details
*/
type GetInstrumentIdentifierBadRequestBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier bad request body items0 details
func (o *GetInstrumentIdentifierBadRequestBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierBadRequestBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierFailedDependencyBodyItems0 get instrument identifier failed dependency body items0
swagger:model GetInstrumentIdentifierFailedDependencyBodyItems0
*/
type GetInstrumentIdentifierFailedDependencyBodyItems0 struct {

	// details
	Details *GetInstrumentIdentifierFailedDependencyBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier failed dependency body items0
func (o *GetInstrumentIdentifierFailedDependencyBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierFailedDependencyBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierFailedDependencyBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierFailedDependencyBodyItems0Details get instrument identifier failed dependency body items0 details
swagger:model GetInstrumentIdentifierFailedDependencyBodyItems0Details
*/
type GetInstrumentIdentifierFailedDependencyBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier failed dependency body items0 details
func (o *GetInstrumentIdentifierFailedDependencyBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierFailedDependencyBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierForbiddenBodyItems0 get instrument identifier forbidden body items0
swagger:model GetInstrumentIdentifierForbiddenBodyItems0
*/
type GetInstrumentIdentifierForbiddenBodyItems0 struct {

	// details
	Details *GetInstrumentIdentifierForbiddenBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier forbidden body items0
func (o *GetInstrumentIdentifierForbiddenBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierForbiddenBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierForbiddenBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierForbiddenBodyItems0Details get instrument identifier forbidden body items0 details
swagger:model GetInstrumentIdentifierForbiddenBodyItems0Details
*/
type GetInstrumentIdentifierForbiddenBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier forbidden body items0 details
func (o *GetInstrumentIdentifierForbiddenBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierForbiddenBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierGoneBodyItems0 get instrument identifier gone body items0
swagger:model GetInstrumentIdentifierGoneBodyItems0
*/
type GetInstrumentIdentifierGoneBodyItems0 struct {

	// details
	Details *GetInstrumentIdentifierGoneBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier gone body items0
func (o *GetInstrumentIdentifierGoneBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierGoneBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierGoneBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierGoneBodyItems0Details get instrument identifier gone body items0 details
swagger:model GetInstrumentIdentifierGoneBodyItems0Details
*/
type GetInstrumentIdentifierGoneBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier gone body items0 details
func (o *GetInstrumentIdentifierGoneBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierGoneBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierInternalServerErrorBodyItems0 get instrument identifier internal server error body items0
swagger:model GetInstrumentIdentifierInternalServerErrorBodyItems0
*/
type GetInstrumentIdentifierInternalServerErrorBodyItems0 struct {

	// details
	Details *GetInstrumentIdentifierInternalServerErrorBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier internal server error body items0
func (o *GetInstrumentIdentifierInternalServerErrorBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierInternalServerErrorBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierInternalServerErrorBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierInternalServerErrorBodyItems0Details get instrument identifier internal server error body items0 details
swagger:model GetInstrumentIdentifierInternalServerErrorBodyItems0Details
*/
type GetInstrumentIdentifierInternalServerErrorBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier internal server error body items0 details
func (o *GetInstrumentIdentifierInternalServerErrorBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierInternalServerErrorBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierNotFoundBodyItems0 get instrument identifier not found body items0
swagger:model GetInstrumentIdentifierNotFoundBodyItems0
*/
type GetInstrumentIdentifierNotFoundBodyItems0 struct {

	// details
	Details *GetInstrumentIdentifierNotFoundBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier not found body items0
func (o *GetInstrumentIdentifierNotFoundBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierNotFoundBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierNotFoundBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierNotFoundBodyItems0Details get instrument identifier not found body items0 details
swagger:model GetInstrumentIdentifierNotFoundBodyItems0Details
*/
type GetInstrumentIdentifierNotFoundBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier not found body items0 details
func (o *GetInstrumentIdentifierNotFoundBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierNotFoundBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBody tmsV1InstrumentIdentifiersGet200Response
swagger:model GetInstrumentIdentifierOKBody
*/
type GetInstrumentIdentifierOKBody struct {

	// links
	Links *GetInstrumentIdentifierOKBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetInstrumentIdentifierOKBodyBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *GetInstrumentIdentifierOKBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *GetInstrumentIdentifierOKBodyMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetInstrumentIdentifierOKBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this get instrument identifier o k body
func (o *GetInstrumentIdentifierOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyBankAccount get instrument identifier o k body bank account
swagger:model GetInstrumentIdentifierOKBodyBankAccount
*/
type GetInstrumentIdentifierOKBodyBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this get instrument identifier o k body bank account
func (o *GetInstrumentIdentifierOKBodyBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("getInstrumentIdentifierOK"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("getInstrumentIdentifierOK"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyCard get instrument identifier o k body card
swagger:model GetInstrumentIdentifierOKBodyCard
*/
type GetInstrumentIdentifierOKBodyCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this get instrument identifier o k body card
func (o *GetInstrumentIdentifierOKBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("getInstrumentIdentifierOK"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyCard) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyLinks get instrument identifier o k body links
swagger:model GetInstrumentIdentifierOKBodyLinks
*/
type GetInstrumentIdentifierOKBodyLinks struct {

	// ancestor
	Ancestor *GetInstrumentIdentifierOKBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *GetInstrumentIdentifierOKBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *GetInstrumentIdentifierOKBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this get instrument identifier o k body links
func (o *GetInstrumentIdentifierOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyLinksAncestor get instrument identifier o k body links ancestor
swagger:model GetInstrumentIdentifierOKBodyLinksAncestor
*/
type GetInstrumentIdentifierOKBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier o k body links ancestor
func (o *GetInstrumentIdentifierOKBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyLinksSelf get instrument identifier o k body links self
swagger:model GetInstrumentIdentifierOKBodyLinksSelf
*/
type GetInstrumentIdentifierOKBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier o k body links self
func (o *GetInstrumentIdentifierOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyLinksSuccessor get instrument identifier o k body links successor
swagger:model GetInstrumentIdentifierOKBodyLinksSuccessor
*/
type GetInstrumentIdentifierOKBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier o k body links successor
func (o *GetInstrumentIdentifierOKBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyMetadata get instrument identifier o k body metadata
swagger:model GetInstrumentIdentifierOKBodyMetadata
*/
type GetInstrumentIdentifierOKBodyMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get instrument identifier o k body metadata
func (o *GetInstrumentIdentifierOKBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyMetadata) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyProcessingInformation get instrument identifier o k body processing information
swagger:model GetInstrumentIdentifierOKBodyProcessingInformation
*/
type GetInstrumentIdentifierOKBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this get instrument identifier o k body processing information
func (o *GetInstrumentIdentifierOKBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions get instrument identifier o k body processing information authorization options
swagger:model GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions
*/
type GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this get instrument identifier o k body processing information authorization options
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator get instrument identifier o k body processing information authorization options initiator
swagger:model GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator
*/
type GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this get instrument identifier o k body processing information authorization options initiator
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction get instrument identifier o k body processing information authorization options initiator merchant initiated transaction
swagger:model GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this get instrument identifier o k body processing information authorization options initiator merchant initiated transaction
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
