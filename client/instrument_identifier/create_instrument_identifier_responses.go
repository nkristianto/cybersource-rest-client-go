// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateInstrumentIdentifierReader is a Reader for the CreateInstrumentIdentifier structure.
type CreateInstrumentIdentifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInstrumentIdentifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateInstrumentIdentifierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewCreateInstrumentIdentifierCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInstrumentIdentifierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateInstrumentIdentifierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewCreateInstrumentIdentifierFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateInstrumentIdentifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateInstrumentIdentifierOK creates a CreateInstrumentIdentifierOK with default headers values
func NewCreateInstrumentIdentifierOK() *CreateInstrumentIdentifierOK {
	return &CreateInstrumentIdentifierOK{}
}

/*CreateInstrumentIdentifierOK handles this case with default header values.

An existing Instrument Identifier containing the same data has already been returned.
*/
type CreateInstrumentIdentifierOK struct {
	/*Link to the Instrument Identifier.
	 */
	Location string
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload *CreateInstrumentIdentifierOKBody
}

func (o *CreateInstrumentIdentifierOK) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers][%d] createInstrumentIdentifierOK  %+v", 200, o.Payload)
}

func (o *CreateInstrumentIdentifierOK) GetPayload() *CreateInstrumentIdentifierOKBody {
	return o.Payload
}

func (o *CreateInstrumentIdentifierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	o.Payload = new(CreateInstrumentIdentifierOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstrumentIdentifierCreated creates a CreateInstrumentIdentifierCreated with default headers values
func NewCreateInstrumentIdentifierCreated() *CreateInstrumentIdentifierCreated {
	return &CreateInstrumentIdentifierCreated{}
}

/*CreateInstrumentIdentifierCreated handles this case with default header values.

A new Instrument Identifier has been created.
*/
type CreateInstrumentIdentifierCreated struct {
	/*Link to the Instrument Identifier.
	 */
	Location string
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload *CreateInstrumentIdentifierCreatedBody
}

func (o *CreateInstrumentIdentifierCreated) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers][%d] createInstrumentIdentifierCreated  %+v", 201, o.Payload)
}

func (o *CreateInstrumentIdentifierCreated) GetPayload() *CreateInstrumentIdentifierCreatedBody {
	return o.Payload
}

func (o *CreateInstrumentIdentifierCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	o.Payload = new(CreateInstrumentIdentifierCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstrumentIdentifierBadRequest creates a CreateInstrumentIdentifierBadRequest with default headers values
func NewCreateInstrumentIdentifierBadRequest() *CreateInstrumentIdentifierBadRequest {
	return &CreateInstrumentIdentifierBadRequest{}
}

/*CreateInstrumentIdentifierBadRequest handles this case with default header values.

Bad Request. A required header value could be missing.
*/
type CreateInstrumentIdentifierBadRequest struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*CreateInstrumentIdentifierBadRequestBodyItems0
}

func (o *CreateInstrumentIdentifierBadRequest) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers][%d] createInstrumentIdentifierBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInstrumentIdentifierBadRequest) GetPayload() []*CreateInstrumentIdentifierBadRequestBodyItems0 {
	return o.Payload
}

func (o *CreateInstrumentIdentifierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstrumentIdentifierForbidden creates a CreateInstrumentIdentifierForbidden with default headers values
func NewCreateInstrumentIdentifierForbidden() *CreateInstrumentIdentifierForbidden {
	return &CreateInstrumentIdentifierForbidden{}
}

/*CreateInstrumentIdentifierForbidden handles this case with default header values.

Forbidden. The profile might not have permission to perform the token operation.
*/
type CreateInstrumentIdentifierForbidden struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*CreateInstrumentIdentifierForbiddenBodyItems0
}

func (o *CreateInstrumentIdentifierForbidden) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers][%d] createInstrumentIdentifierForbidden  %+v", 403, o.Payload)
}

func (o *CreateInstrumentIdentifierForbidden) GetPayload() []*CreateInstrumentIdentifierForbiddenBodyItems0 {
	return o.Payload
}

func (o *CreateInstrumentIdentifierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstrumentIdentifierFailedDependency creates a CreateInstrumentIdentifierFailedDependency with default headers values
func NewCreateInstrumentIdentifierFailedDependency() *CreateInstrumentIdentifierFailedDependency {
	return &CreateInstrumentIdentifierFailedDependency{}
}

/*CreateInstrumentIdentifierFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type CreateInstrumentIdentifierFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*CreateInstrumentIdentifierFailedDependencyBodyItems0
}

func (o *CreateInstrumentIdentifierFailedDependency) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers][%d] createInstrumentIdentifierFailedDependency  %+v", 424, o.Payload)
}

func (o *CreateInstrumentIdentifierFailedDependency) GetPayload() []*CreateInstrumentIdentifierFailedDependencyBodyItems0 {
	return o.Payload
}

func (o *CreateInstrumentIdentifierFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstrumentIdentifierInternalServerError creates a CreateInstrumentIdentifierInternalServerError with default headers values
func NewCreateInstrumentIdentifierInternalServerError() *CreateInstrumentIdentifierInternalServerError {
	return &CreateInstrumentIdentifierInternalServerError{}
}

/*CreateInstrumentIdentifierInternalServerError handles this case with default header values.

Unexpected error.
*/
type CreateInstrumentIdentifierInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*CreateInstrumentIdentifierInternalServerErrorBodyItems0
}

func (o *CreateInstrumentIdentifierInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tms/v1/instrumentidentifiers][%d] createInstrumentIdentifierInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInstrumentIdentifierInternalServerError) GetPayload() []*CreateInstrumentIdentifierInternalServerErrorBodyItems0 {
	return o.Payload
}

func (o *CreateInstrumentIdentifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateInstrumentIdentifierBadRequestBodyItems0 create instrument identifier bad request body items0
swagger:model CreateInstrumentIdentifierBadRequestBodyItems0
*/
type CreateInstrumentIdentifierBadRequestBodyItems0 struct {

	// details
	Details *CreateInstrumentIdentifierBadRequestBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this create instrument identifier bad request body items0
func (o *CreateInstrumentIdentifierBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierBadRequestBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierBadRequestBodyItems0Details create instrument identifier bad request body items0 details
swagger:model CreateInstrumentIdentifierBadRequestBodyItems0Details
*/
type CreateInstrumentIdentifierBadRequestBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this create instrument identifier bad request body items0 details
func (o *CreateInstrumentIdentifierBadRequestBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierBadRequestBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierBadRequestBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierBadRequestBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierBody create instrument identifier body
swagger:model CreateInstrumentIdentifierBody
*/
type CreateInstrumentIdentifierBody struct {

	// bank account
	BankAccount *CreateInstrumentIdentifierParamsBodyBankAccount `json:"BankAccount,omitempty"`

	// bill to
	BillTo *CreateInstrumentIdentifierParamsBodyBillTo `json:"billTo,omitempty"`

	// card
	Card *CreateInstrumentIdentifierParamsBodyCard `json:"card,omitempty"`

	// Type of Card
	Type string `json:"type,omitempty"`
}

// Validate validates this create instrument identifier body
func (o *CreateInstrumentIdentifierBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierRequest" + "." + "BankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierBody) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierRequest" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierRequest" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierBody) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBody tmsV1InstrumentIdentifiersPost201Response
swagger:model CreateInstrumentIdentifierCreatedBody
*/
type CreateInstrumentIdentifierCreatedBody struct {

	// links
	Links *CreateInstrumentIdentifierCreatedBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *CreateInstrumentIdentifierCreatedBodyBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *CreateInstrumentIdentifierCreatedBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *CreateInstrumentIdentifierCreatedBodyMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *CreateInstrumentIdentifierCreatedBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this create instrument identifier created body
func (o *CreateInstrumentIdentifierCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierCreatedBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierCreatedBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierCreatedBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierCreatedBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierCreatedBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyBankAccount create instrument identifier created body bank account
swagger:model CreateInstrumentIdentifierCreatedBodyBankAccount
*/
type CreateInstrumentIdentifierCreatedBodyBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this create instrument identifier created body bank account
func (o *CreateInstrumentIdentifierCreatedBodyBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierCreated"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierCreated"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierCreated"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierCreated"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyCard create instrument identifier created body card
swagger:model CreateInstrumentIdentifierCreatedBodyCard
*/
type CreateInstrumentIdentifierCreatedBodyCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this create instrument identifier created body card
func (o *CreateInstrumentIdentifierCreatedBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierCreated"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierCreated"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyCard) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyLinks create instrument identifier created body links
swagger:model CreateInstrumentIdentifierCreatedBodyLinks
*/
type CreateInstrumentIdentifierCreatedBodyLinks struct {

	// ancestor
	Ancestor *CreateInstrumentIdentifierCreatedBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *CreateInstrumentIdentifierCreatedBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *CreateInstrumentIdentifierCreatedBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this create instrument identifier created body links
func (o *CreateInstrumentIdentifierCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyLinksAncestor create instrument identifier created body links ancestor
swagger:model CreateInstrumentIdentifierCreatedBodyLinksAncestor
*/
type CreateInstrumentIdentifierCreatedBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create instrument identifier created body links ancestor
func (o *CreateInstrumentIdentifierCreatedBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyLinksSelf create instrument identifier created body links self
swagger:model CreateInstrumentIdentifierCreatedBodyLinksSelf
*/
type CreateInstrumentIdentifierCreatedBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create instrument identifier created body links self
func (o *CreateInstrumentIdentifierCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyLinksSuccessor create instrument identifier created body links successor
swagger:model CreateInstrumentIdentifierCreatedBodyLinksSuccessor
*/
type CreateInstrumentIdentifierCreatedBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create instrument identifier created body links successor
func (o *CreateInstrumentIdentifierCreatedBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyMetadata create instrument identifier created body metadata
swagger:model CreateInstrumentIdentifierCreatedBodyMetadata
*/
type CreateInstrumentIdentifierCreatedBodyMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this create instrument identifier created body metadata
func (o *CreateInstrumentIdentifierCreatedBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyMetadata) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyProcessingInformation create instrument identifier created body processing information
swagger:model CreateInstrumentIdentifierCreatedBodyProcessingInformation
*/
type CreateInstrumentIdentifierCreatedBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this create instrument identifier created body processing information
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions create instrument identifier created body processing information authorization options
swagger:model CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions
*/
type CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this create instrument identifier created body processing information authorization options
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator create instrument identifier created body processing information authorization options initiator
swagger:model CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator
*/
type CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this create instrument identifier created body processing information authorization options initiator
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierCreated" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction create instrument identifier created body processing information authorization options initiator merchant initiated transaction
swagger:model CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this create instrument identifier created body processing information authorization options initiator merchant initiated transaction
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createInstrumentIdentifierCreated"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierCreatedBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierFailedDependencyBodyItems0 create instrument identifier failed dependency body items0
swagger:model CreateInstrumentIdentifierFailedDependencyBodyItems0
*/
type CreateInstrumentIdentifierFailedDependencyBodyItems0 struct {

	// details
	Details *CreateInstrumentIdentifierFailedDependencyBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this create instrument identifier failed dependency body items0
func (o *CreateInstrumentIdentifierFailedDependencyBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierFailedDependencyBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierFailedDependencyBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierFailedDependencyBodyItems0) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierFailedDependencyBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierFailedDependencyBodyItems0Details create instrument identifier failed dependency body items0 details
swagger:model CreateInstrumentIdentifierFailedDependencyBodyItems0Details
*/
type CreateInstrumentIdentifierFailedDependencyBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this create instrument identifier failed dependency body items0 details
func (o *CreateInstrumentIdentifierFailedDependencyBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierFailedDependencyBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierFailedDependencyBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierFailedDependencyBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierForbiddenBodyItems0 create instrument identifier forbidden body items0
swagger:model CreateInstrumentIdentifierForbiddenBodyItems0
*/
type CreateInstrumentIdentifierForbiddenBodyItems0 struct {

	// details
	Details *CreateInstrumentIdentifierForbiddenBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this create instrument identifier forbidden body items0
func (o *CreateInstrumentIdentifierForbiddenBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierForbiddenBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierForbiddenBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierForbiddenBodyItems0) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierForbiddenBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierForbiddenBodyItems0Details create instrument identifier forbidden body items0 details
swagger:model CreateInstrumentIdentifierForbiddenBodyItems0Details
*/
type CreateInstrumentIdentifierForbiddenBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this create instrument identifier forbidden body items0 details
func (o *CreateInstrumentIdentifierForbiddenBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierForbiddenBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierForbiddenBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierForbiddenBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierInternalServerErrorBodyItems0 create instrument identifier internal server error body items0
swagger:model CreateInstrumentIdentifierInternalServerErrorBodyItems0
*/
type CreateInstrumentIdentifierInternalServerErrorBodyItems0 struct {

	// details
	Details *CreateInstrumentIdentifierInternalServerErrorBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this create instrument identifier internal server error body items0
func (o *CreateInstrumentIdentifierInternalServerErrorBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierInternalServerErrorBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierInternalServerErrorBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierInternalServerErrorBodyItems0) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierInternalServerErrorBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierInternalServerErrorBodyItems0Details create instrument identifier internal server error body items0 details
swagger:model CreateInstrumentIdentifierInternalServerErrorBodyItems0Details
*/
type CreateInstrumentIdentifierInternalServerErrorBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this create instrument identifier internal server error body items0 details
func (o *CreateInstrumentIdentifierInternalServerErrorBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierInternalServerErrorBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierInternalServerErrorBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierInternalServerErrorBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBody tmsV1InstrumentIdentifiersPost200Response
swagger:model CreateInstrumentIdentifierOKBody
*/
type CreateInstrumentIdentifierOKBody struct {

	// links
	Links *CreateInstrumentIdentifierOKBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *CreateInstrumentIdentifierOKBodyBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *CreateInstrumentIdentifierOKBodyCard `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *CreateInstrumentIdentifierOKBodyMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *CreateInstrumentIdentifierOKBodyProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this create instrument identifier o k body
func (o *CreateInstrumentIdentifierOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierOKBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierOKBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierOKBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierOKBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBody) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyBankAccount create instrument identifier o k body bank account
swagger:model CreateInstrumentIdentifierOKBodyBankAccount
*/
type CreateInstrumentIdentifierOKBodyBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this create instrument identifier o k body bank account
func (o *CreateInstrumentIdentifierOKBodyBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierOKBodyBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierOK"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierOK"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *CreateInstrumentIdentifierOKBodyBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierOK"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierOK"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyCard create instrument identifier o k body card
swagger:model CreateInstrumentIdentifierOKBodyCard
*/
type CreateInstrumentIdentifierOKBodyCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this create instrument identifier o k body card
func (o *CreateInstrumentIdentifierOKBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierOKBodyCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierOK"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierOK"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyCard) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyLinks create instrument identifier o k body links
swagger:model CreateInstrumentIdentifierOKBodyLinks
*/
type CreateInstrumentIdentifierOKBodyLinks struct {

	// ancestor
	Ancestor *CreateInstrumentIdentifierOKBodyLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *CreateInstrumentIdentifierOKBodyLinksSelf `json:"self,omitempty"`

	// successor
	Successor *CreateInstrumentIdentifierOKBodyLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this create instrument identifier o k body links
func (o *CreateInstrumentIdentifierOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierOKBodyLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInstrumentIdentifierOKBodyLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyLinksAncestor create instrument identifier o k body links ancestor
swagger:model CreateInstrumentIdentifierOKBodyLinksAncestor
*/
type CreateInstrumentIdentifierOKBodyLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create instrument identifier o k body links ancestor
func (o *CreateInstrumentIdentifierOKBodyLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyLinksAncestor) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyLinksSelf create instrument identifier o k body links self
swagger:model CreateInstrumentIdentifierOKBodyLinksSelf
*/
type CreateInstrumentIdentifierOKBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create instrument identifier o k body links self
func (o *CreateInstrumentIdentifierOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyLinksSuccessor create instrument identifier o k body links successor
swagger:model CreateInstrumentIdentifierOKBodyLinksSuccessor
*/
type CreateInstrumentIdentifierOKBodyLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this create instrument identifier o k body links successor
func (o *CreateInstrumentIdentifierOKBodyLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyMetadata create instrument identifier o k body metadata
swagger:model CreateInstrumentIdentifierOKBodyMetadata
*/
type CreateInstrumentIdentifierOKBodyMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this create instrument identifier o k body metadata
func (o *CreateInstrumentIdentifierOKBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyMetadata) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyProcessingInformation create instrument identifier o k body processing information
swagger:model CreateInstrumentIdentifierOKBodyProcessingInformation
*/
type CreateInstrumentIdentifierOKBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this create instrument identifier o k body processing information
func (o *CreateInstrumentIdentifierOKBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierOKBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions create instrument identifier o k body processing information authorization options
swagger:model CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions
*/
type CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this create instrument identifier o k body processing information authorization options
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator create instrument identifier o k body processing information authorization options initiator
swagger:model CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator
*/
type CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this create instrument identifier o k body processing information authorization options initiator
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction create instrument identifier o k body processing information authorization options initiator merchant initiated transaction
swagger:model CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this create instrument identifier o k body processing information authorization options initiator merchant initiated transaction
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("createInstrumentIdentifierOK"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierParamsBodyBankAccount create instrument identifier params body bank account
swagger:model CreateInstrumentIdentifierParamsBodyBankAccount
*/
type CreateInstrumentIdentifierParamsBodyBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this create instrument identifier params body bank account
func (o *CreateInstrumentIdentifierParamsBodyBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierParamsBodyBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierRequest"+"."+"BankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierRequest"+"."+"BankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *CreateInstrumentIdentifierParamsBodyBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierRequest"+"."+"BankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierRequest"+"."+"BankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierParamsBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierParamsBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierParamsBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierParamsBodyBillTo create instrument identifier params body bill to
swagger:model CreateInstrumentIdentifierParamsBodyBillTo
*/
type CreateInstrumentIdentifierParamsBodyBillTo struct {

	// First address line registered with card.
	Address1 string `json:"address1,omitempty"`

	// Second address line registered with card.
	Address2 string `json:"address2,omitempty"`

	// Administrative area registered with card.
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Country registered with card.
	Country string `json:"country,omitempty"`

	// Locality registered with card.
	Locality string `json:"locality,omitempty"`

	// Postal code registered with card.
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this create instrument identifier params body bill to
func (o *CreateInstrumentIdentifierParamsBodyBillTo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierParamsBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierParamsBodyBillTo) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierParamsBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInstrumentIdentifierParamsBodyCard create instrument identifier params body card
swagger:model CreateInstrumentIdentifierParamsBodyCard
*/
type CreateInstrumentIdentifierParamsBodyCard struct {

	// Card expiration month.
	//
	// Format: `MM`.
	// Possible values: `01` through `12`.
	//
	// Max Length: 2
	// Min Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Card expiration year.
	//
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// Max Length: 4
	// Min Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Credit card number (PAN).
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`

	// Card security code.
	// Max Length: 4
	// Min Length: 3
	SecurityCode string `json:"securityCode,omitempty"`
}

// Validate validates this create instrument identifier params body card
func (o *CreateInstrumentIdentifierParamsBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInstrumentIdentifierParamsBodyCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierRequest"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierRequest"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *CreateInstrumentIdentifierParamsBodyCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierRequest"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierRequest"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *CreateInstrumentIdentifierParamsBodyCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierRequest"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierRequest"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *CreateInstrumentIdentifierParamsBodyCard) validateSecurityCode(formats strfmt.Registry) error {

	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MinLength("createInstrumentIdentifierRequest"+"."+"card"+"."+"securityCode", "body", string(o.SecurityCode), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("createInstrumentIdentifierRequest"+"."+"card"+"."+"securityCode", "body", string(o.SecurityCode), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInstrumentIdentifierParamsBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInstrumentIdentifierParamsBodyCard) UnmarshalBinary(b []byte) error {
	var res CreateInstrumentIdentifierParamsBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
