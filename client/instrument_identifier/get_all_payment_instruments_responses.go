// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAllPaymentInstrumentsReader is a Reader for the GetAllPaymentInstruments structure.
type GetAllPaymentInstrumentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllPaymentInstrumentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllPaymentInstrumentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllPaymentInstrumentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllPaymentInstrumentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllPaymentInstrumentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetAllPaymentInstrumentsGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewGetAllPaymentInstrumentsFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllPaymentInstrumentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllPaymentInstrumentsOK creates a GetAllPaymentInstrumentsOK with default headers values
func NewGetAllPaymentInstrumentsOK() *GetAllPaymentInstrumentsOK {
	return &GetAllPaymentInstrumentsOK{}
}

/*GetAllPaymentInstrumentsOK handles this case with default header values.

Returns an array of Payment Instruments associated with the supplied Instrument Identifier.
*/
type GetAllPaymentInstrumentsOK struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The total number of Payment Instruments associated with the Instrument Identifier in the zero-based dataset.
	 */
	XTotalCount string

	Payload *GetAllPaymentInstrumentsOKBody
}

func (o *GetAllPaymentInstrumentsOK) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments][%d] getAllPaymentInstrumentsOK  %+v", 200, o.Payload)
}

func (o *GetAllPaymentInstrumentsOK) GetPayload() *GetAllPaymentInstrumentsOKBody {
	return o.Payload
}

func (o *GetAllPaymentInstrumentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header x-Total-Count
	o.XTotalCount = response.GetHeader("x-Total-Count")

	o.Payload = new(GetAllPaymentInstrumentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPaymentInstrumentsBadRequest creates a GetAllPaymentInstrumentsBadRequest with default headers values
func NewGetAllPaymentInstrumentsBadRequest() *GetAllPaymentInstrumentsBadRequest {
	return &GetAllPaymentInstrumentsBadRequest{}
}

/*GetAllPaymentInstrumentsBadRequest handles this case with default header values.

Bad Request. A required header value could be missing.
*/
type GetAllPaymentInstrumentsBadRequest struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetAllPaymentInstrumentsBadRequestBodyItems0
}

func (o *GetAllPaymentInstrumentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments][%d] getAllPaymentInstrumentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAllPaymentInstrumentsBadRequest) GetPayload() []*GetAllPaymentInstrumentsBadRequestBodyItems0 {
	return o.Payload
}

func (o *GetAllPaymentInstrumentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPaymentInstrumentsForbidden creates a GetAllPaymentInstrumentsForbidden with default headers values
func NewGetAllPaymentInstrumentsForbidden() *GetAllPaymentInstrumentsForbidden {
	return &GetAllPaymentInstrumentsForbidden{}
}

/*GetAllPaymentInstrumentsForbidden handles this case with default header values.

Forbidden. The profile might not have permission to perform the token operation.
*/
type GetAllPaymentInstrumentsForbidden struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetAllPaymentInstrumentsForbiddenBodyItems0
}

func (o *GetAllPaymentInstrumentsForbidden) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments][%d] getAllPaymentInstrumentsForbidden  %+v", 403, o.Payload)
}

func (o *GetAllPaymentInstrumentsForbidden) GetPayload() []*GetAllPaymentInstrumentsForbiddenBodyItems0 {
	return o.Payload
}

func (o *GetAllPaymentInstrumentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPaymentInstrumentsNotFound creates a GetAllPaymentInstrumentsNotFound with default headers values
func NewGetAllPaymentInstrumentsNotFound() *GetAllPaymentInstrumentsNotFound {
	return &GetAllPaymentInstrumentsNotFound{}
}

/*GetAllPaymentInstrumentsNotFound handles this case with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type GetAllPaymentInstrumentsNotFound struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetAllPaymentInstrumentsNotFoundBodyItems0
}

func (o *GetAllPaymentInstrumentsNotFound) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments][%d] getAllPaymentInstrumentsNotFound  %+v", 404, o.Payload)
}

func (o *GetAllPaymentInstrumentsNotFound) GetPayload() []*GetAllPaymentInstrumentsNotFoundBodyItems0 {
	return o.Payload
}

func (o *GetAllPaymentInstrumentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPaymentInstrumentsGone creates a GetAllPaymentInstrumentsGone with default headers values
func NewGetAllPaymentInstrumentsGone() *GetAllPaymentInstrumentsGone {
	return &GetAllPaymentInstrumentsGone{}
}

/*GetAllPaymentInstrumentsGone handles this case with default header values.

Token Not Available. The token has been deleted.
*/
type GetAllPaymentInstrumentsGone struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetAllPaymentInstrumentsGoneBodyItems0
}

func (o *GetAllPaymentInstrumentsGone) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments][%d] getAllPaymentInstrumentsGone  %+v", 410, o.Payload)
}

func (o *GetAllPaymentInstrumentsGone) GetPayload() []*GetAllPaymentInstrumentsGoneBodyItems0 {
	return o.Payload
}

func (o *GetAllPaymentInstrumentsGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPaymentInstrumentsFailedDependency creates a GetAllPaymentInstrumentsFailedDependency with default headers values
func NewGetAllPaymentInstrumentsFailedDependency() *GetAllPaymentInstrumentsFailedDependency {
	return &GetAllPaymentInstrumentsFailedDependency{}
}

/*GetAllPaymentInstrumentsFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type GetAllPaymentInstrumentsFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetAllPaymentInstrumentsFailedDependencyBodyItems0
}

func (o *GetAllPaymentInstrumentsFailedDependency) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments][%d] getAllPaymentInstrumentsFailedDependency  %+v", 424, o.Payload)
}

func (o *GetAllPaymentInstrumentsFailedDependency) GetPayload() []*GetAllPaymentInstrumentsFailedDependencyBodyItems0 {
	return o.Payload
}

func (o *GetAllPaymentInstrumentsFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllPaymentInstrumentsInternalServerError creates a GetAllPaymentInstrumentsInternalServerError with default headers values
func NewGetAllPaymentInstrumentsInternalServerError() *GetAllPaymentInstrumentsInternalServerError {
	return &GetAllPaymentInstrumentsInternalServerError{}
}

/*GetAllPaymentInstrumentsInternalServerError handles this case with default header values.

Unexpected error.
*/
type GetAllPaymentInstrumentsInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string

	Payload []*GetAllPaymentInstrumentsInternalServerErrorBodyItems0
}

func (o *GetAllPaymentInstrumentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments][%d] getAllPaymentInstrumentsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAllPaymentInstrumentsInternalServerError) GetPayload() []*GetAllPaymentInstrumentsInternalServerErrorBodyItems0 {
	return o.Payload
}

func (o *GetAllPaymentInstrumentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAllPaymentInstrumentsBadRequestBodyItems0 get all payment instruments bad request body items0
swagger:model GetAllPaymentInstrumentsBadRequestBodyItems0
*/
type GetAllPaymentInstrumentsBadRequestBodyItems0 struct {

	// details
	Details *GetAllPaymentInstrumentsBadRequestBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get all payment instruments bad request body items0
func (o *GetAllPaymentInstrumentsBadRequestBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsBadRequestBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsBadRequestBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsBadRequestBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsBadRequestBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsBadRequestBodyItems0Details get all payment instruments bad request body items0 details
swagger:model GetAllPaymentInstrumentsBadRequestBodyItems0Details
*/
type GetAllPaymentInstrumentsBadRequestBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get all payment instruments bad request body items0 details
func (o *GetAllPaymentInstrumentsBadRequestBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsBadRequestBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsBadRequestBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsBadRequestBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsFailedDependencyBodyItems0 get all payment instruments failed dependency body items0
swagger:model GetAllPaymentInstrumentsFailedDependencyBodyItems0
*/
type GetAllPaymentInstrumentsFailedDependencyBodyItems0 struct {

	// details
	Details *GetAllPaymentInstrumentsFailedDependencyBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get all payment instruments failed dependency body items0
func (o *GetAllPaymentInstrumentsFailedDependencyBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsFailedDependencyBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsFailedDependencyBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsFailedDependencyBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsFailedDependencyBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsFailedDependencyBodyItems0Details get all payment instruments failed dependency body items0 details
swagger:model GetAllPaymentInstrumentsFailedDependencyBodyItems0Details
*/
type GetAllPaymentInstrumentsFailedDependencyBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get all payment instruments failed dependency body items0 details
func (o *GetAllPaymentInstrumentsFailedDependencyBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsFailedDependencyBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsFailedDependencyBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsFailedDependencyBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsForbiddenBodyItems0 get all payment instruments forbidden body items0
swagger:model GetAllPaymentInstrumentsForbiddenBodyItems0
*/
type GetAllPaymentInstrumentsForbiddenBodyItems0 struct {

	// details
	Details *GetAllPaymentInstrumentsForbiddenBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get all payment instruments forbidden body items0
func (o *GetAllPaymentInstrumentsForbiddenBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsForbiddenBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsForbiddenBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsForbiddenBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsForbiddenBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsForbiddenBodyItems0Details get all payment instruments forbidden body items0 details
swagger:model GetAllPaymentInstrumentsForbiddenBodyItems0Details
*/
type GetAllPaymentInstrumentsForbiddenBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get all payment instruments forbidden body items0 details
func (o *GetAllPaymentInstrumentsForbiddenBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsForbiddenBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsForbiddenBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsForbiddenBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsGoneBodyItems0 get all payment instruments gone body items0
swagger:model GetAllPaymentInstrumentsGoneBodyItems0
*/
type GetAllPaymentInstrumentsGoneBodyItems0 struct {

	// details
	Details *GetAllPaymentInstrumentsGoneBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get all payment instruments gone body items0
func (o *GetAllPaymentInstrumentsGoneBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsGoneBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsGoneBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsGoneBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsGoneBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsGoneBodyItems0Details get all payment instruments gone body items0 details
swagger:model GetAllPaymentInstrumentsGoneBodyItems0Details
*/
type GetAllPaymentInstrumentsGoneBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get all payment instruments gone body items0 details
func (o *GetAllPaymentInstrumentsGoneBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsGoneBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsGoneBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsGoneBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsInternalServerErrorBodyItems0 get all payment instruments internal server error body items0
swagger:model GetAllPaymentInstrumentsInternalServerErrorBodyItems0
*/
type GetAllPaymentInstrumentsInternalServerErrorBodyItems0 struct {

	// details
	Details *GetAllPaymentInstrumentsInternalServerErrorBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get all payment instruments internal server error body items0
func (o *GetAllPaymentInstrumentsInternalServerErrorBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsInternalServerErrorBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsInternalServerErrorBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsInternalServerErrorBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsInternalServerErrorBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsInternalServerErrorBodyItems0Details get all payment instruments internal server error body items0 details
swagger:model GetAllPaymentInstrumentsInternalServerErrorBodyItems0Details
*/
type GetAllPaymentInstrumentsInternalServerErrorBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get all payment instruments internal server error body items0 details
func (o *GetAllPaymentInstrumentsInternalServerErrorBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsInternalServerErrorBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsInternalServerErrorBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsInternalServerErrorBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsNotFoundBodyItems0 get all payment instruments not found body items0
swagger:model GetAllPaymentInstrumentsNotFoundBodyItems0
*/
type GetAllPaymentInstrumentsNotFoundBodyItems0 struct {

	// details
	Details *GetAllPaymentInstrumentsNotFoundBodyItems0Details `json:"details,omitempty"`

	// The detailed message related to the type stated above.
	Message string `json:"message,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get all payment instruments not found body items0
func (o *GetAllPaymentInstrumentsNotFoundBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsNotFoundBodyItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	if o.Details != nil {
		if err := o.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsNotFoundBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsNotFoundBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsNotFoundBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsNotFoundBodyItems0Details get all payment instruments not found body items0 details
swagger:model GetAllPaymentInstrumentsNotFoundBodyItems0Details
*/
type GetAllPaymentInstrumentsNotFoundBodyItems0Details struct {

	// The location of the field that threw the error.
	Location string `json:"location,omitempty"`

	// The name of the field that threw the error.
	Name string `json:"name,omitempty"`
}

// Validate validates this get all payment instruments not found body items0 details
func (o *GetAllPaymentInstrumentsNotFoundBodyItems0Details) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsNotFoundBodyItems0Details) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsNotFoundBodyItems0Details) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsNotFoundBodyItems0Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBody tmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response
swagger:model GetAllPaymentInstrumentsOKBody
*/
type GetAllPaymentInstrumentsOKBody struct {

	// embedded
	Embedded *GetAllPaymentInstrumentsOKBodyEmbedded `json:"_embedded,omitempty"`

	// links
	Links *GetAllPaymentInstrumentsOKBodyLinks `json:"_links,omitempty"`

	// The number of Payment Instruments returned in the array.
	// Read Only: true
	Count string `json:"count,omitempty"`

	// The limit parameter supplied in the request.
	// Read Only: true
	Limit string `json:"limit,omitempty"`

	// 'Shows the response is a collection of objects.'
	//
	// Valid values:
	// - collection
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// The offset parameter supplied in the request.
	// Read Only: true
	Offset string `json:"offset,omitempty"`

	// The total number of Payment Instruments associated with the Instrument Identifier in the zero-based dataset.
	// Read Only: true
	Total string `json:"total,omitempty"`
}

// Validate validates this get all payment instruments o k body
func (o *GetAllPaymentInstrumentsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBody) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllPaymentInstrumentsOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllPaymentInstrumentsOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbedded get all payment instruments o k body embedded
swagger:model GetAllPaymentInstrumentsOKBodyEmbedded
*/
type GetAllPaymentInstrumentsOKBodyEmbedded struct {

	// Array of Payment Instruments returned for the supplied Instrument Identifier.
	PaymentInstruments []*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0 `json:"paymentInstruments"`
}

// Validate validates this get all payment instruments o k body embedded
func (o *GetAllPaymentInstrumentsOKBodyEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbedded) validatePaymentInstruments(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	for i := 0; i < len(o.PaymentInstruments); i++ {
		if swag.IsZero(o.PaymentInstruments[i]) { // not required
			continue
		}

		if o.PaymentInstruments[i] != nil {
			if err := o.PaymentInstruments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAllPaymentInstrumentsOK" + "." + "_embedded" + "." + "paymentInstruments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbedded) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0 get all payment instruments o k body embedded payment instruments items0
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0 struct {

	// links
	Links *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links `json:"_links,omitempty"`

	// bank account
	BankAccount *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card `json:"card,omitempty"`

	// Unique identification number assigned by CyberSource to the submitted request.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation `json:"merchantInformation,omitempty"`

	// meta data
	MetaData *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MetaData `json:"metaData,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateMetaData(formats strfmt.Registry) error {

	if swag.IsZero(o.MetaData) { // not required
		return nil
	}

	if o.MetaData != nil {
		if err := o.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BankAccount get all payment instruments o k body embedded payment instruments items0 bank account
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BankAccount
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BankAccount struct {

	// Checking account type. Possible values:
	//   * C: checking
	//   * S: savings (USD only)
	//   * X: corporate checking (USD only)
	//   * G: general ledger
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 bank account
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BankAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BankAccount) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo get all payment instruments o k body embedded payment instruments items0 bill to
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo struct {

	// First line of the billing street address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. For an address in the U.S. or Canada, use the State, Province, and Territory Codes for the United States and Canada.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the billing address. Accepts input in the ISO 3166-1 standard, stores as ISO 3166-1-Alpha-2.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 3
	// Min Length: 2
	Country string `json:"country,omitempty"`

	// Customer’s email address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// Customer’s first name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. For a credit card transaction, this name must match the name on the card.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the billing address.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer phone number. When you create a customer profile, the requirements depend on the payment method:
	//   * Credit cards — optional.
	//   * Electronic checks — contact your payment processor representative to find out if this field is required or optional.
	//   * PINless debits — optional.
	//
	// Max Length: 32
	// Min Length: 6
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	// **Example** 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space]
	// [numeric][alpha][numeric]
	// Example A1B 2C3
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. See the TMS REST Developer Guide for more information about relaxed address requirements.
	//
	// **Important**:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 bill to
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MinLength("billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("billTo"+"."+"country", "body", string(o.Country), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"email", "body", string(o.Email), 320); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MinLength("billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 32); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation get all payment instruments o k body embedded payment instruments items0 buyer information
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation struct {

	// Tax identifier for the customer’s company.
	//
	// **Important**:
	// Contact your TeleCheck representative to find out whether this field is required or optional.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used by the customer. Accepts input in the ISO 4217 standard, stores as ISO 4217 Alpha.
	// Max Length: 3
	// Min Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer.
	//
	// Format: `YYYY-MM-DD` or `YYYYMMDD`
	//
	// Max Length: 10
	// Min Length: 8
	DateOBirth string `json:"dateOBirth,omitempty"`

	// personal identification
	PersonalIdentification []*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 buyer information
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"companyTaxID", "body", string(o.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MinLength("buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) validateDateOBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOBirth) { // not required
		return nil
	}

	if err := validate.MinLength("buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("buyerInformation"+"."+"dateOBirth", "body", string(o.DateOBirth), 10); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 get all payment instruments o k body embedded payment instruments items0 buyer information personal identification items0
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 struct {

	// Customer's identification number.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// Type of personal identification.
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	// Valid values:
	// - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 buyer information personal identification items0
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy get all payment instruments o k body embedded payment instruments items0 buyer information personal identification items0 issued by
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// State or province in which the customer’s driver’s license was issued. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// **Important**:
	// Contact your TeleCheck representative to learn whether this field is required or optional.
	//
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 buyer information personal identification items0 issued by
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card get all payment instruments o k body embedded payment instruments items0 card
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card struct {

	// Two-digit month in which the credit card expires.
	// Format: `MM`
	// Possible values: `01` through `12`
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For more information about relaxed requirements, see the TMS REST API Developer Guide.
	//
	// Important:
	// It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// Max Length: 2
	// Min Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// **FDC Nashville Global and FDMS South**
	// You can send in 2 digits or 4 digits. When you send in 2 digits, they must be the last 2 digits of the year.
	//
	// This field is optional if your CyberSource account is configured for relaxed requirements for address data and expiration date. For details, see [Relaxed Requirements for Address Data and Expiration Date.](https://www.cybersource.com/developers/integration_methods/relax_avs/).
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.'
	//
	// Max Length: 4
	// Min Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder.
	// Max Length: 2
	// Min Length: 1
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `MM`.
	// Possible values: `01` through `12`.
	//
	// Max Length: 2
	// Min Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period.
	//
	// Format: `YYYY`.
	// Possible values: `1900` through `2099`.
	//
	// Max Length: 4
	// Min Length: 4
	StartYear string `json:"startYear,omitempty"`

	// Type of credit card. Possible values:
	//   * **visa** -- Visa (001)
	//   * **mastercard** -- Mastercard (002) - Eurocard—European regional brand of Mastercard
	//   * **american express** -- American Express (003)
	//   * **discover** -- Discover (004)
	//   * **diners club** -- Diners Club (005)
	//   * **carte blanche** -- Carte Blanche (006)
	//   * **jcb** -- JCB (007)
	//   * **optima** -- Optima (008)
	//   * **twinpay credit** -- Twinpay Credit (011)
	//   * **twinpay debit** -- Twinpay Debit (012)
	//   * **walmart** -- Walmart (013)
	//   * **enroute** -- EnRoute (014)
	//   * **lowes consumer** -- Lowes consumer (015)
	//   * **home depot consumer** -- Home Depot consumer (016)
	//   * **mbna** -- MBNA (017)
	//   * **dicks sportswear** -- Dicks Sportswear (018)
	//   * **casual corner** -- Casual Corner (019)
	//   * **sears** -- Sears (020)
	//   * **jal** -- JAL (021)
	//   * **disney** -- Disney (023)
	//   * **maestro uk domestic** -- Maestro (024) - UK Domestic
	//   * **sams club consumer** -- Sams Club consumer (025)
	//   * **sams club business** -- Sams Club business (026)
	//   * **bill me later** -- Bill me later (028)
	//   * **bebe** -- Bebe (029)
	//   * **restoration hardware** -- Restoration Hardware (030)
	//   * **delta online** -- Delta (031) — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * **solo** -- Solo (032)
	//   * **visa electron** -- Visa Electron (033)
	//   * **dankort** -- Dankort (034)
	//   * **laser** -- Laser (035)
	//   * **carte bleue** -- Carte Bleue (036) — formerly Cartes Bancaires
	//   * **carta si** -- Carta Si (037)
	//   * **pinless debit** -- pinless debit (038)
	//   * **encoded account** -- encoded account (039)
	//   * **uatp** -- UATP (040)
	//   * **household** -- Household (041)
	//   * **maestro international** -- Maestro (042) - International
	//   * **ge money uk** -- GE Money UK (043)
	//   * **korean cards** -- Korean cards (044)
	//   * **style** -- Style (045)
	//   * **jcrew** -- JCrew (046)
	//   * **payease china processing ewallet** -- PayEase China processing eWallet (047)
	//   * **payease china processing bank transfer** -- PayEase China processing bank transfer (048)
	//   * **meijer private label** -- Meijer Private Label (049)
	//   * **hipercard** -- Hipercard (050) — supported only by the Comercio Latino processor.
	//   * **aura** -- Aura (051) — supported only by the Comercio Latino processor.
	//   * **redecard** -- Redecard (052)
	//   * **elo** -- Elo (054) — supported only by the Comercio Latino processor.
	//   * **capital one private label** -- Capital One Private Label (055)
	//   * **synchrony private label** -- Synchrony Private Label (056)
	//   * **costco private label** -- Costco Private Label (057)
	//   * **mada** -- mada (060)
	//   * **china union pay** -- China Union Pay (062)
	//   * **falabella private label** -- Falabella private label (063)
	//
	// Required: true
	Type *string `json:"type"`

	// Card Use As Field. Supported value of `pinless debit` only. Only for use with Pinless Debit tokens.
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 card
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MinLength("card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MinLength("card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MinLength("card"+"."+"issueNumber", "body", string(o.IssueNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("card"+"."+"issueNumber", "body", string(o.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MinLength("card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MinLength("card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) validateType(formats strfmt.Registry) error {

	if err := validate.Required("card"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Card
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier get all payment instruments o k body embedded payment instruments items0 instrument identifier
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier struct {

	// links
	Links *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// card
	Card *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard `json:"card,omitempty"`

	// The ID of the existing instrument identifier to be linked to the newly created payment instrument.
	// Max Length: 32
	// Min Length: 16
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// 'Describes type of token.'
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// 'Current state of the token.'
	//
	// Valid values:
	// - ACTIVE
	// - CLOSED
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("instrumentIdentifier"+"."+"id", "body", string(o.ID), 16); err != nil {
		return err
	}

	if err := validate.MaxLength("instrumentIdentifier"+"."+"id", "body", string(o.ID), 32); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount get all payment instruments o k body embedded payment instruments items0 instrument identifier bank account
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount struct {

	// Checking account number.
	// Max Length: 19
	// Min Length: 1
	Number string `json:"number,omitempty"`

	// Routing number.
	// Max Length: 9
	// Min Length: 1
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier bank account
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount) validateRoutingNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RoutingNumber) { // not required
		return nil
	}

	if err := validate.MinLength("instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instrumentIdentifier"+"."+"bankAccount"+"."+"routingNumber", "body", string(o.RoutingNumber), 9); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard get all payment instruments o k body embedded payment instruments items0 instrument identifier card
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard struct {

	// Customer’s credit card number.
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier card
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks get all payment instruments o k body embedded payment instruments items0 instrument identifier links
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks struct {

	// ancestor
	Ancestor *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSelf `json:"self,omitempty"`

	// successor
	Successor *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier links
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksAncestor get all payment instruments o k body embedded payment instruments items0 instrument identifier links ancestor
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksAncestor
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier links ancestor
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksAncestor) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSelf get all payment instruments o k body embedded payment instruments items0 instrument identifier links self
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSelf
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier links self
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSuccessor get all payment instruments o k body embedded payment instruments items0 instrument identifier links successor
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSuccessor
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier links successor
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSuccessor) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierLinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierMetadata get all payment instruments o k body embedded payment instruments items0 instrument identifier metadata
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierMetadata
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierMetadata struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier metadata
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation get all payment instruments o k body embedded payment instruments items0 instrument identifier processing information
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier processing information
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions get all payment instruments o k body embedded payment instruments items0 instrument identifier processing information authorization options
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier processing information authorization options
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator get all payment instruments o k body embedded payment instruments items0 instrument identifier processing information authorization options initiator
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier processing information authorization options initiator
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction get all payment instruments o k body embedded payment instruments items0 instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Previous Consumer Initiated Transaction Id.
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0InstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links get all payment instruments o k body embedded payment instruments items0 links
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links struct {

	// ancestor
	Ancestor *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksAncestor `json:"ancestor,omitempty"`

	// self
	Self *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf `json:"self,omitempty"`

	// successor
	Successor *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSuccessor `json:"successor,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 links
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAncestor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuccessor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links) validateAncestor(formats strfmt.Registry) error {

	if swag.IsZero(o.Ancestor) { // not required
		return nil
	}

	if o.Ancestor != nil {
		if err := o.Ancestor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "ancestor")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links) validateSuccessor(formats strfmt.Registry) error {

	if swag.IsZero(o.Successor) { // not required
		return nil
	}

	if o.Successor != nil {
		if err := o.Successor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "successor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksAncestor get all payment instruments o k body embedded payment instruments items0 links ancestor
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksAncestor
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksAncestor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 links ancestor
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksAncestor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksAncestor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksAncestor) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksAncestor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf get all payment instruments o k body embedded payment instruments items0 links self
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 links self
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSuccessor get all payment instruments o k body embedded payment instruments items0 links successor
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSuccessor
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSuccessor struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 links successor
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSuccessor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSuccessor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSuccessor) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0LinksSuccessor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation get all payment instruments o k body embedded payment instruments items0 merchant information
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 merchant information
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor get all payment instruments o k body embedded payment instruments items0 merchant information merchant descriptor
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor struct {

	// Alternate information for your business. This API field overrides the company entry description value in your CyberSource account.
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 merchant information merchant descriptor
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MetaData get all payment instruments o k body embedded payment instruments items0 meta data
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MetaData
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MetaData struct {

	// The creator of the token.
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 meta data
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MetaData) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MetaData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MetaData) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0MetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation get all payment instruments o k body embedded payment instruments items0 processing information
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Indicates that the payments for this customer profile are for the Bill Payment program. Possible values:
	//   * false: Not a Visa Bill Payment.
	//   * true: Visa Bill Payment.
	//
	BillPaymentProgramEnabled *bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 processing information
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions get all payment instruments o k body embedded payment instruments items0 processing information bank transfer options
swagger:model GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions
*/
type GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions struct {

	// **Important** This field is required if your processor is TeleCheck.
	//
	// Code that specifies the authorization method for the transaction. Possible values:
	//
	// - **CCD**: corporate cash disbursement. Charge or credit against a business checking account. You can use one-time or recurring CCD transactions to transfer funds to or from a corporate entity. A standing authorization is required for recurring transactions.
	// - **PPD**: prearranged payment and deposit entry. Charge or credit against a personal checking or savings account. You can originate a PPD entry only when the payment and deposit terms between you and the customer are prearranged. A written authorization from the customer is required for one-time transactions and a written standing authorization is required for recurring transactions.
	// - **TEL**: telephone-initiated entry. One-time charge against a personal checking or savings account. You can originate a TEL entry only when there is a business relationship between you and the customer or when the customer initiates a telephone call to you. For a TEL entry, you must obtain a payment authorization from the customer over the telephone. There is no recurring billing option for TEL.
	// - **WEB**: internet-initiated entry—charge against a personal checking or savings account. You can originate a one-time or recurring WEB entry when the customer initiates the transaction over the Internet. For a WEB entry, you must obtain payment authorization from the customer over the Internet.
	//
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this get all payment instruments o k body embedded payment instruments items0 processing information bank transfer options
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyLinks get all payment instruments o k body links
swagger:model GetAllPaymentInstrumentsOKBodyLinks
*/
type GetAllPaymentInstrumentsOKBodyLinks struct {

	// first
	First *GetAllPaymentInstrumentsOKBodyLinksFirst `json:"first,omitempty"`

	// last
	Last *GetAllPaymentInstrumentsOKBodyLinksLast `json:"last,omitempty"`

	// next
	Next *GetAllPaymentInstrumentsOKBodyLinksNext `json:"next,omitempty"`

	// prev
	Prev *GetAllPaymentInstrumentsOKBodyLinksPrev `json:"prev,omitempty"`

	// self
	Self *GetAllPaymentInstrumentsOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get all payment instruments o k body links
func (o *GetAllPaymentInstrumentsOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFirst(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLast(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrev(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyLinks) validateFirst(formats strfmt.Registry) error {

	if swag.IsZero(o.First) { // not required
		return nil
	}

	if o.First != nil {
		if err := o.First.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllPaymentInstrumentsOK" + "." + "_links" + "." + "first")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyLinks) validateLast(formats strfmt.Registry) error {

	if swag.IsZero(o.Last) { // not required
		return nil
	}

	if o.Last != nil {
		if err := o.Last.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllPaymentInstrumentsOK" + "." + "_links" + "." + "last")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyLinks) validateNext(formats strfmt.Registry) error {

	if swag.IsZero(o.Next) { // not required
		return nil
	}

	if o.Next != nil {
		if err := o.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllPaymentInstrumentsOK" + "." + "_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyLinks) validatePrev(formats strfmt.Registry) error {

	if swag.IsZero(o.Prev) { // not required
		return nil
	}

	if o.Prev != nil {
		if err := o.Prev.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllPaymentInstrumentsOK" + "." + "_links" + "." + "prev")
			}
			return err
		}
	}

	return nil
}

func (o *GetAllPaymentInstrumentsOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAllPaymentInstrumentsOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyLinksFirst get all payment instruments o k body links first
swagger:model GetAllPaymentInstrumentsOKBodyLinksFirst
*/
type GetAllPaymentInstrumentsOKBodyLinksFirst struct {

	// A link to the collection starting at offset zero for the supplied limit.
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body links first
func (o *GetAllPaymentInstrumentsOKBodyLinksFirst) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksFirst) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksFirst) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyLinksFirst
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyLinksLast get all payment instruments o k body links last
swagger:model GetAllPaymentInstrumentsOKBodyLinksLast
*/
type GetAllPaymentInstrumentsOKBodyLinksLast struct {

	// A link to the last collection containing the remaining objects.
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body links last
func (o *GetAllPaymentInstrumentsOKBodyLinksLast) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksLast) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksLast) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyLinksLast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyLinksNext get all payment instruments o k body links next
swagger:model GetAllPaymentInstrumentsOKBodyLinksNext
*/
type GetAllPaymentInstrumentsOKBodyLinksNext struct {

	// A link to the next collection starting at the supplied offset plus the supplied limit.
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body links next
func (o *GetAllPaymentInstrumentsOKBodyLinksNext) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksNext) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksNext) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyLinksNext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyLinksPrev A link to the previous collection starting at the supplied offset minus the supplied limit.
swagger:model GetAllPaymentInstrumentsOKBodyLinksPrev
*/
type GetAllPaymentInstrumentsOKBodyLinksPrev struct {

	// href
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body links prev
func (o *GetAllPaymentInstrumentsOKBodyLinksPrev) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksPrev) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksPrev) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyLinksPrev
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAllPaymentInstrumentsOKBodyLinksSelf get all payment instruments o k body links self
swagger:model GetAllPaymentInstrumentsOKBodyLinksSelf
*/
type GetAllPaymentInstrumentsOKBodyLinksSelf struct {

	// A link to the current requested collection.
	Href string `json:"href,omitempty"`
}

// Validate validates this get all payment instruments o k body links self
func (o *GetAllPaymentInstrumentsOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAllPaymentInstrumentsOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetAllPaymentInstrumentsOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
