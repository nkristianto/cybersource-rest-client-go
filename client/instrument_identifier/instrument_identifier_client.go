// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new instrument identifier API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for instrument identifier API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateInstrumentIdentifier(params *CreateInstrumentIdentifierParams) (*CreateInstrumentIdentifierOK, *CreateInstrumentIdentifierCreated, error)

	DeleteInstrumentIdentifier(params *DeleteInstrumentIdentifierParams) (*DeleteInstrumentIdentifierNoContent, error)

	GetAllPaymentInstruments(params *GetAllPaymentInstrumentsParams) (*GetAllPaymentInstrumentsOK, error)

	GetInstrumentIdentifier(params *GetInstrumentIdentifierParams) (*GetInstrumentIdentifierOK, error)

	UpdateInstrumentIdentifier(params *UpdateInstrumentIdentifierParams) (*UpdateInstrumentIdentifierOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateInstrumentIdentifier creates an instrument identifier
*/
func (a *Client) CreateInstrumentIdentifier(params *CreateInstrumentIdentifierParams) (*CreateInstrumentIdentifierOK, *CreateInstrumentIdentifierCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstrumentIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstrumentIdentifier",
		Method:             "POST",
		PathPattern:        "/tms/v1/instrumentidentifiers",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInstrumentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateInstrumentIdentifierOK:
		return value, nil, nil
	case *CreateInstrumentIdentifierCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for instrument_identifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteInstrumentIdentifier deletes an instrument identifier
*/
func (a *Client) DeleteInstrumentIdentifier(params *DeleteInstrumentIdentifierParams) (*DeleteInstrumentIdentifierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstrumentIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstrumentIdentifier",
		Method:             "DELETE",
		PathPattern:        "/tms/v1/instrumentidentifiers/{tokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstrumentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInstrumentIdentifierNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInstrumentIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllPaymentInstruments retrieves all payment instruments
*/
func (a *Client) GetAllPaymentInstruments(params *GetAllPaymentInstrumentsParams) (*GetAllPaymentInstrumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPaymentInstrumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllPaymentInstruments",
		Method:             "GET",
		PathPattern:        "/tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllPaymentInstrumentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPaymentInstrumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPaymentInstruments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInstrumentIdentifier retrieves an instrument identifier
*/
func (a *Client) GetInstrumentIdentifier(params *GetInstrumentIdentifierParams) (*GetInstrumentIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstrumentIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstrumentIdentifier",
		Method:             "GET",
		PathPattern:        "/tms/v1/instrumentidentifiers/{tokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstrumentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstrumentIdentifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstrumentIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateInstrumentIdentifier updates a instrument identifier
*/
func (a *Client) UpdateInstrumentIdentifier(params *UpdateInstrumentIdentifierParams) (*UpdateInstrumentIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInstrumentIdentifierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInstrumentIdentifier",
		Method:             "PATCH",
		PathPattern:        "/tms/v1/instrumentidentifiers/{tokenId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInstrumentIdentifierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInstrumentIdentifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInstrumentIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
