// Code generated by go-swagger; DO NOT EDIT.

package secure_file_share

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFileDetailReader is a Reader for the GetFileDetail structure.
type GetFileDetailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFileDetailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFileDetailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFileDetailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFileDetailUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFileDetailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFileDetailInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetFileDetailOK creates a GetFileDetailOK with default headers values
func NewGetFileDetailOK() *GetFileDetailOK {
	return &GetFileDetailOK{}
}

/*GetFileDetailOK handles this case with default header values.

Ok
*/
type GetFileDetailOK struct {
	Payload *GetFileDetailOKBody
}

func (o *GetFileDetailOK) Error() string {
	return fmt.Sprintf("[GET /sfs/v1/file-details][%d] getFileDetailOK  %+v", 200, o.Payload)
}

func (o *GetFileDetailOK) GetPayload() *GetFileDetailOKBody {
	return o.Payload
}

func (o *GetFileDetailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFileDetailOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFileDetailBadRequest creates a GetFileDetailBadRequest with default headers values
func NewGetFileDetailBadRequest() *GetFileDetailBadRequest {
	return &GetFileDetailBadRequest{}
}

/*GetFileDetailBadRequest handles this case with default header values.

Invalid request
*/
type GetFileDetailBadRequest struct {
	Payload *GetFileDetailBadRequestBody
}

func (o *GetFileDetailBadRequest) Error() string {
	return fmt.Sprintf("[GET /sfs/v1/file-details][%d] getFileDetailBadRequest  %+v", 400, o.Payload)
}

func (o *GetFileDetailBadRequest) GetPayload() *GetFileDetailBadRequestBody {
	return o.Payload
}

func (o *GetFileDetailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFileDetailBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFileDetailUnauthorized creates a GetFileDetailUnauthorized with default headers values
func NewGetFileDetailUnauthorized() *GetFileDetailUnauthorized {
	return &GetFileDetailUnauthorized{}
}

/*GetFileDetailUnauthorized handles this case with default header values.

Ok
*/
type GetFileDetailUnauthorized struct {
	Payload *GetFileDetailUnauthorizedBody
}

func (o *GetFileDetailUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sfs/v1/file-details][%d] getFileDetailUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFileDetailUnauthorized) GetPayload() *GetFileDetailUnauthorizedBody {
	return o.Payload
}

func (o *GetFileDetailUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFileDetailUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFileDetailNotFound creates a GetFileDetailNotFound with default headers values
func NewGetFileDetailNotFound() *GetFileDetailNotFound {
	return &GetFileDetailNotFound{}
}

/*GetFileDetailNotFound handles this case with default header values.

Files Info not found
*/
type GetFileDetailNotFound struct {
	Payload *GetFileDetailNotFoundBody
}

func (o *GetFileDetailNotFound) Error() string {
	return fmt.Sprintf("[GET /sfs/v1/file-details][%d] getFileDetailNotFound  %+v", 404, o.Payload)
}

func (o *GetFileDetailNotFound) GetPayload() *GetFileDetailNotFoundBody {
	return o.Payload
}

func (o *GetFileDetailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFileDetailNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFileDetailInternalServerError creates a GetFileDetailInternalServerError with default headers values
func NewGetFileDetailInternalServerError() *GetFileDetailInternalServerError {
	return &GetFileDetailInternalServerError{}
}

/*GetFileDetailInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetFileDetailInternalServerError struct {
	Payload *GetFileDetailInternalServerErrorBody
}

func (o *GetFileDetailInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sfs/v1/file-details][%d] getFileDetailInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFileDetailInternalServerError) GetPayload() *GetFileDetailInternalServerErrorBody {
	return o.Payload
}

func (o *GetFileDetailInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetFileDetailInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*FileDetailsItems0 file details items0
swagger:model FileDetailsItems0
*/
type FileDetailsItems0 struct {

	// Date and time for the file in PST
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"createdTime,omitempty"`

	// Date and time for the file in PST
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// Unique identifier of a file
	FileID string `json:"fileId,omitempty"`

	// Date and time for the file in PST
	// Format: date-time
	LastModifiedTime strfmt.DateTime `json:"lastModifiedTime,omitempty"`

	// 'File extension'
	//
	// Valid values:
	// - 'application/xml'
	// - 'text/csv'
	// - 'application/pdf'
	// - 'application/octet-stream'
	//
	MimeType string `json:"mimeType,omitempty"`

	// Name of the file
	Name string `json:"name,omitempty"`

	// Size of the file in bytes
	Size int64 `json:"size,omitempty"`
}

// Validate validates this file details items0
func (o *FileDetailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastModifiedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FileDetailsItems0) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTime", "body", "date-time", o.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *FileDetailsItems0) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(o.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date", o.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *FileDetailsItems0) validateLastModifiedTime(formats strfmt.Registry) error {

	if swag.IsZero(o.LastModifiedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("lastModifiedTime", "body", "date-time", o.LastModifiedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FileDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FileDetailsItems0) UnmarshalBinary(b []byte) error {
	var res FileDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFileDetailBadRequestBody V1FilesGet400Response
//
// Error Bean
swagger:model GetFileDetailBadRequestBody
*/
type GetFileDetailBadRequestBody struct {

	// Error code
	// Required: true
	Code *string `json:"code"`

	// Correlation Id
	CorrelationID string `json:"correlationId,omitempty"`

	// Error Detail
	Detail string `json:"detail,omitempty"`

	// Error fields List
	Fields []*FieldsItems0 `json:"fields"`

	// Localization Key Name
	LocalizationKey string `json:"localizationKey,omitempty"`

	// Error message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get file detail bad request body
func (o *GetFileDetailBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFileDetailBadRequestBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("getFileDetailBadRequest"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *GetFileDetailBadRequestBody) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFileDetailBadRequest" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFileDetailBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getFileDetailBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFileDetailBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileDetailBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetFileDetailBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFileDetailInternalServerErrorBody V1FileDetailsGet500Response
//
// Error Bean
swagger:model GetFileDetailInternalServerErrorBody
*/
type GetFileDetailInternalServerErrorBody struct {

	// Error code
	// Required: true
	Code *string `json:"code"`

	// Correlation Id
	CorrelationID string `json:"correlationId,omitempty"`

	// Error Detail
	Detail string `json:"detail,omitempty"`

	// Error fields List
	Fields []*FieldsItems0 `json:"fields"`

	// Localization Key Name
	LocalizationKey string `json:"localizationKey,omitempty"`

	// Error message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get file detail internal server error body
func (o *GetFileDetailInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFileDetailInternalServerErrorBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("getFileDetailInternalServerError"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *GetFileDetailInternalServerErrorBody) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFileDetailInternalServerError" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFileDetailInternalServerErrorBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getFileDetailInternalServerError"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFileDetailInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileDetailInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetFileDetailInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFileDetailNotFoundBody V1FileDetailsGet404Response
//
// Error Bean
swagger:model GetFileDetailNotFoundBody
*/
type GetFileDetailNotFoundBody struct {

	// Error code
	// Required: true
	Code *string `json:"code"`

	// Correlation Id
	CorrelationID string `json:"correlationId,omitempty"`

	// Error Detail
	Detail string `json:"detail,omitempty"`

	// Error fields List
	Fields []*FieldsItems0 `json:"fields"`

	// Localization Key Name
	LocalizationKey string `json:"localizationKey,omitempty"`

	// Error message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get file detail not found body
func (o *GetFileDetailNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFileDetailNotFoundBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("getFileDetailNotFound"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *GetFileDetailNotFoundBody) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFileDetailNotFound" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFileDetailNotFoundBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getFileDetailNotFound"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFileDetailNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileDetailNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetFileDetailNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFileDetailOKBody V1FileDetailsGet200Response
swagger:model GetFileDetailOKBody
*/
type GetFileDetailOKBody struct {

	// links
	Links *GetFileDetailOKBodyLinks `json:"_links,omitempty"`

	// file details
	FileDetails []*FileDetailsItems0 `json:"fileDetails"`
}

// Validate validates this get file detail o k body
func (o *GetFileDetailOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFileDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFileDetailOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFileDetailOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetFileDetailOKBody) validateFileDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.FileDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.FileDetails); i++ {
		if swag.IsZero(o.FileDetails[i]) { // not required
			continue
		}

		if o.FileDetails[i] != nil {
			if err := o.FileDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFileDetailOK" + "." + "fileDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFileDetailOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileDetailOKBody) UnmarshalBinary(b []byte) error {
	var res GetFileDetailOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFileDetailOKBodyLinks get file detail o k body links
swagger:model GetFileDetailOKBodyLinks
*/
type GetFileDetailOKBodyLinks struct {

	// files
	Files []*GetFileDetailOKBodyLinksFilesItems0 `json:"files"`

	// self
	Self *GetFileDetailOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get file detail o k body links
func (o *GetFileDetailOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFileDetailOKBodyLinks) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(o.Files) { // not required
		return nil
	}

	for i := 0; i < len(o.Files); i++ {
		if swag.IsZero(o.Files[i]) { // not required
			continue
		}

		if o.Files[i] != nil {
			if err := o.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFileDetailOK" + "." + "_links" + "." + "files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFileDetailOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getFileDetailOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFileDetailOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileDetailOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetFileDetailOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFileDetailOKBodyLinksFilesItems0 get file detail o k body links files items0
swagger:model GetFileDetailOKBodyLinksFilesItems0
*/
type GetFileDetailOKBodyLinksFilesItems0 struct {

	// Unique identifier for each file
	FileID string `json:"fileId,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// method
	Method string `json:"method,omitempty"`
}

// Validate validates this get file detail o k body links files items0
func (o *GetFileDetailOKBodyLinksFilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFileDetailOKBodyLinksFilesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileDetailOKBodyLinksFilesItems0) UnmarshalBinary(b []byte) error {
	var res GetFileDetailOKBodyLinksFilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFileDetailOKBodyLinksSelf get file detail o k body links self
swagger:model GetFileDetailOKBodyLinksSelf
*/
type GetFileDetailOKBodyLinksSelf struct {

	// href
	Href string `json:"href,omitempty"`

	// method
	Method string `json:"method,omitempty"`
}

// Validate validates this get file detail o k body links self
func (o *GetFileDetailOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetFileDetailOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileDetailOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetFileDetailOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetFileDetailUnauthorizedBody V1FileDetailsGet401Response
//
// Error Bean
swagger:model GetFileDetailUnauthorizedBody
*/
type GetFileDetailUnauthorizedBody struct {

	// Error code
	// Required: true
	Code *string `json:"code"`

	// Correlation Id
	CorrelationID string `json:"correlationId,omitempty"`

	// Error Detail
	Detail string `json:"detail,omitempty"`

	// Error fields List
	Fields []*FieldsItems0 `json:"fields"`

	// Localization Key Name
	LocalizationKey string `json:"localizationKey,omitempty"`

	// Error message
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this get file detail unauthorized body
func (o *GetFileDetailUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFileDetailUnauthorizedBody) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("getFileDetailUnauthorized"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

func (o *GetFileDetailUnauthorizedBody) validateFields(formats strfmt.Registry) error {

	if swag.IsZero(o.Fields) { // not required
		return nil
	}

	for i := 0; i < len(o.Fields); i++ {
		if swag.IsZero(o.Fields[i]) { // not required
			continue
		}

		if o.Fields[i] != nil {
			if err := o.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFileDetailUnauthorized" + "." + "fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetFileDetailUnauthorizedBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getFileDetailUnauthorized"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFileDetailUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFileDetailUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetFileDetailUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
