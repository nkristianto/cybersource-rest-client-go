// Code generated by go-swagger; DO NOT EDIT.

package transaction_batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transaction batches API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transaction batches API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetTransactionBatchDetails(params *GetTransactionBatchDetailsParams) (*GetTransactionBatchDetailsOK, error)

	GetTransactionBatchID(params *GetTransactionBatchIDParams) (*GetTransactionBatchIDOK, error)

	GetTransactionBatches(params *GetTransactionBatchesParams) (*GetTransactionBatchesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetTransactionBatchDetails gets transaction details for a given batch id

  Provides real-time detailed status information about the transactions
that you previously uploaded in the Business Center or processed with
the Offline Transaction File Submission service.

*/
func (a *Client) GetTransactionBatchDetails(params *GetTransactionBatchDetailsParams) (*GetTransactionBatchDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionBatchDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTransactionBatchDetails",
		Method:             "GET",
		PathPattern:        "/pts/v1/transaction-batch-details/{id}",
		ProducesMediaTypes: []string{"application/xml", "text/csv"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransactionBatchDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransactionBatchDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTransactionBatchDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTransactionBatchID gets individual batch file

  Provide the search range
*/
func (a *Client) GetTransactionBatchID(params *GetTransactionBatchIDParams) (*GetTransactionBatchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionBatchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTransactionBatchId",
		Method:             "GET",
		PathPattern:        "/pts/v1/transaction-batches/{id}",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransactionBatchIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransactionBatchIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTransactionBatchId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTransactionBatches gets a list of batch files

  Provide the search range
*/
func (a *Client) GetTransactionBatches(params *GetTransactionBatchesParams) (*GetTransactionBatchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionBatchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTransactionBatches",
		Method:             "GET",
		PathPattern:        "/pts/v1/transaction-batches",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransactionBatchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransactionBatchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTransactionBatches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
