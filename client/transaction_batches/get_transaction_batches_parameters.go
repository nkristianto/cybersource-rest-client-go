// Code generated by go-swagger; DO NOT EDIT.

package transaction_batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetTransactionBatchesParams creates a new GetTransactionBatchesParams object
// with the default values initialized.
func NewGetTransactionBatchesParams() *GetTransactionBatchesParams {
	var ()
	return &GetTransactionBatchesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTransactionBatchesParamsWithTimeout creates a new GetTransactionBatchesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTransactionBatchesParamsWithTimeout(timeout time.Duration) *GetTransactionBatchesParams {
	var ()
	return &GetTransactionBatchesParams{

		timeout: timeout,
	}
}

// NewGetTransactionBatchesParamsWithContext creates a new GetTransactionBatchesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTransactionBatchesParamsWithContext(ctx context.Context) *GetTransactionBatchesParams {
	var ()
	return &GetTransactionBatchesParams{

		Context: ctx,
	}
}

// NewGetTransactionBatchesParamsWithHTTPClient creates a new GetTransactionBatchesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTransactionBatchesParamsWithHTTPClient(client *http.Client) *GetTransactionBatchesParams {
	var ()
	return &GetTransactionBatchesParams{
		HTTPClient: client,
	}
}

/*GetTransactionBatchesParams contains all the parameters to send to the API endpoint
for the get transaction batches operation typically these are written to a http.Request
*/
type GetTransactionBatchesParams struct {

	/*EndTime
	  Valid report End Time in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	 **Example date format:**
	  - yyyy-MM-dd'T'HH:mm:ss.SSSZZ


	*/
	EndTime strfmt.DateTime
	/*StartTime
	  Valid report Start Time in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	 **Example date format:**
	  - yyyy-MM-dd'T'HH:mm:ss.SSSZZ


	*/
	StartTime strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get transaction batches params
func (o *GetTransactionBatchesParams) WithTimeout(timeout time.Duration) *GetTransactionBatchesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get transaction batches params
func (o *GetTransactionBatchesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get transaction batches params
func (o *GetTransactionBatchesParams) WithContext(ctx context.Context) *GetTransactionBatchesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get transaction batches params
func (o *GetTransactionBatchesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get transaction batches params
func (o *GetTransactionBatchesParams) WithHTTPClient(client *http.Client) *GetTransactionBatchesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get transaction batches params
func (o *GetTransactionBatchesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the get transaction batches params
func (o *GetTransactionBatchesParams) WithEndTime(endTime strfmt.DateTime) *GetTransactionBatchesParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get transaction batches params
func (o *GetTransactionBatchesParams) SetEndTime(endTime strfmt.DateTime) {
	o.EndTime = endTime
}

// WithStartTime adds the startTime to the get transaction batches params
func (o *GetTransactionBatchesParams) WithStartTime(startTime strfmt.DateTime) *GetTransactionBatchesParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get transaction batches params
func (o *GetTransactionBatchesParams) SetStartTime(startTime strfmt.DateTime) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetTransactionBatchesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param endTime
	qrEndTime := o.EndTime
	qEndTime := qrEndTime.String()
	if qEndTime != "" {
		if err := r.SetQueryParam("endTime", qEndTime); err != nil {
			return err
		}
	}

	// query param startTime
	qrStartTime := o.StartTime
	qStartTime := qrStartTime.String()
	if qStartTime != "" {
		if err := r.SetQueryParam("startTime", qStartTime); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
