// Code generated by go-swagger; DO NOT EDIT.

package report_subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSubscriptionReader is a Reader for the GetSubscription structure.
type GetSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSubscriptionOK creates a GetSubscriptionOK with default headers values
func NewGetSubscriptionOK() *GetSubscriptionOK {
	return &GetSubscriptionOK{}
}

/*GetSubscriptionOK handles this case with default header values.

Ok
*/
type GetSubscriptionOK struct {
	Payload *GetSubscriptionOKBody
}

func (o *GetSubscriptionOK) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions/{reportName}][%d] getSubscriptionOK  %+v", 200, o.Payload)
}

func (o *GetSubscriptionOK) GetPayload() *GetSubscriptionOKBody {
	return o.Payload
}

func (o *GetSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubscriptionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionBadRequest creates a GetSubscriptionBadRequest with default headers values
func NewGetSubscriptionBadRequest() *GetSubscriptionBadRequest {
	return &GetSubscriptionBadRequest{}
}

/*GetSubscriptionBadRequest handles this case with default header values.

Invalid request
*/
type GetSubscriptionBadRequest struct {
	Payload *GetSubscriptionBadRequestBody
}

func (o *GetSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions/{reportName}][%d] getSubscriptionBadRequest  %+v", 400, o.Payload)
}

func (o *GetSubscriptionBadRequest) GetPayload() *GetSubscriptionBadRequestBody {
	return o.Payload
}

func (o *GetSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSubscriptionBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionNotFound creates a GetSubscriptionNotFound with default headers values
func NewGetSubscriptionNotFound() *GetSubscriptionNotFound {
	return &GetSubscriptionNotFound{}
}

/*GetSubscriptionNotFound handles this case with default header values.

Subscription not found
*/
type GetSubscriptionNotFound struct {
}

func (o *GetSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/report-subscriptions/{reportName}][%d] getSubscriptionNotFound ", 404)
}

func (o *GetSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetSubscriptionBadRequestBody reportingV3ReportSubscriptionsNameGet400Response
//
// HTTP status code for client application
swagger:model GetSubscriptionBadRequestBody
*/
type GetSubscriptionBadRequestBody struct {

	// Error field list
	//
	// Required: true
	Details []*DetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get subscription bad request body
func (o *GetSubscriptionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getSubscriptionBadRequest"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSubscriptionBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetSubscriptionBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getSubscriptionBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getSubscriptionBadRequest"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetSubscriptionBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getSubscriptionBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getSubscriptionBadRequest"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubscriptionOKBody reportingV3ReportsSbscriptionsNameGet200Response
//
// Subscription Details
swagger:model GetSubscriptionOKBody
*/
type GetSubscriptionOKBody struct {

	// Id for the selected group.
	GroupID string `json:"groupId,omitempty"`

	// Selected Organization Id
	OrganizationID string `json:"organizationId,omitempty"`

	// Report Definition Id
	ReportDefinitionID string `json:"reportDefinitionId,omitempty"`

	// Report Definition Class
	ReportDefinitionName string `json:"reportDefinitionName,omitempty"`

	// List of all fields String values
	ReportFields []string `json:"reportFields"`

	// List of filters to apply
	ReportFilters map[string][]string `json:"reportFilters,omitempty"`

	// 'Report Frequency'
	//
	// Valid values:
	// - DAILY
	// - WEEKLY
	// - MONTHLY
	// - ADHOC
	//
	ReportFrequency string `json:"reportFrequency,omitempty"`

	// Report Format
	//
	// Valid values:
	// - application/xml
	// - text/csv
	//
	ReportMimeType string `json:"reportMimeType,omitempty"`

	// Report Name
	ReportName string `json:"reportName,omitempty"`

	// report preferences
	ReportPreferences *GetSubscriptionOKBodyReportPreferences `json:"reportPreferences,omitempty"`

	// Start Day
	StartDay int32 `json:"startDay,omitempty"`

	// Start Time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Time Zone
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this get subscription o k body
func (o *GetSubscriptionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReportPreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSubscriptionOKBody) validateReportPreferences(formats strfmt.Registry) error {

	if swag.IsZero(o.ReportPreferences) { // not required
		return nil
	}

	if o.ReportPreferences != nil {
		if err := o.ReportPreferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSubscriptionOK" + "." + "reportPreferences")
			}
			return err
		}
	}

	return nil
}

func (o *GetSubscriptionOKBody) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(o.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("getSubscriptionOK"+"."+"startTime", "body", "date-time", o.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBody) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSubscriptionOKBodyReportPreferences Report Preferences
swagger:model GetSubscriptionOKBodyReportPreferences
*/
type GetSubscriptionOKBodyReportPreferences struct {

	// Specify the field naming convention to be followed in reports (applicable to only csv report formats)
	//
	// Valid values:
	// - SOAPI
	// - SCMP
	//
	FieldNameConvention string `json:"fieldNameConvention,omitempty"`

	// Indicator to determine whether negative sign infront of amount for all refunded transaction
	SignedAmounts bool `json:"signedAmounts,omitempty"`
}

// Validate validates this get subscription o k body report preferences
func (o *GetSubscriptionOKBodyReportPreferences) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetSubscriptionOKBodyReportPreferences) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSubscriptionOKBodyReportPreferences) UnmarshalBinary(b []byte) error {
	var res GetSubscriptionOKBodyReportPreferences
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
