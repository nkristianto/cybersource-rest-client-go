// Code generated by go-swagger; DO NOT EDIT.

package payouts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OctCreatePaymentReader is a Reader for the OctCreatePayment structure.
type OctCreatePaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OctCreatePaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewOctCreatePaymentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOctCreatePaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewOctCreatePaymentBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOctCreatePaymentCreated creates a OctCreatePaymentCreated with default headers values
func NewOctCreatePaymentCreated() *OctCreatePaymentCreated {
	return &OctCreatePaymentCreated{}
}

/*OctCreatePaymentCreated handles this case with default header values.

Successful response.
*/
type OctCreatePaymentCreated struct {
	Payload *OctCreatePaymentCreatedBody
}

func (o *OctCreatePaymentCreated) Error() string {
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentCreated  %+v", 201, o.Payload)
}

func (o *OctCreatePaymentCreated) GetPayload() *OctCreatePaymentCreatedBody {
	return o.Payload
}

func (o *OctCreatePaymentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OctCreatePaymentCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOctCreatePaymentBadRequest creates a OctCreatePaymentBadRequest with default headers values
func NewOctCreatePaymentBadRequest() *OctCreatePaymentBadRequest {
	return &OctCreatePaymentBadRequest{}
}

/*OctCreatePaymentBadRequest handles this case with default header values.

Invalid request.
*/
type OctCreatePaymentBadRequest struct {
	Payload *OctCreatePaymentBadRequestBody
}

func (o *OctCreatePaymentBadRequest) Error() string {
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentBadRequest  %+v", 400, o.Payload)
}

func (o *OctCreatePaymentBadRequest) GetPayload() *OctCreatePaymentBadRequestBody {
	return o.Payload
}

func (o *OctCreatePaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OctCreatePaymentBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOctCreatePaymentBadGateway creates a OctCreatePaymentBadGateway with default headers values
func NewOctCreatePaymentBadGateway() *OctCreatePaymentBadGateway {
	return &OctCreatePaymentBadGateway{}
}

/*OctCreatePaymentBadGateway handles this case with default header values.

Unexpected system error or system timeout.
*/
type OctCreatePaymentBadGateway struct {
	Payload *OctCreatePaymentBadGatewayBody
}

func (o *OctCreatePaymentBadGateway) Error() string {
	return fmt.Sprintf("[POST /pts/v2/payouts][%d] octCreatePaymentBadGateway  %+v", 502, o.Payload)
}

func (o *OctCreatePaymentBadGateway) GetPayload() *OctCreatePaymentBadGatewayBody {
	return o.Payload
}

func (o *OctCreatePaymentBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(OctCreatePaymentBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DetailsItems0 details items0
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentBadGatewayBody ptsV2PayoutsPost502Response
swagger:model OctCreatePaymentBadGatewayBody
*/
type OctCreatePaymentBadGatewayBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//  - INVALID_OR_MISSING_CONFIG
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// Example `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The `T` separates the date and the
	// time. The `Z` indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this oct create payment bad gateway body
func (o *OctCreatePaymentBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentBadRequestBody ptsV2PayoutsPost400Response
swagger:model OctCreatePaymentBadRequestBody
*/
type OctCreatePaymentBadRequestBody struct {

	// details
	Details []*DetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_CARD
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - INVALID_AMOUNT
	//  - DEBIT_CARD_USEAGE_EXCEEDD_LIMIT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	Status string `json:"status,omitempty"`

	// Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the
	// time. The Z indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this oct create payment bad request body
func (o *OctCreatePaymentBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("octCreatePaymentBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentBadRequestBody) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentBody oct create payment body
swagger:model OctCreatePaymentBody
*/
type OctCreatePaymentBody struct {

	// client reference information
	ClientReferenceInformation *OctCreatePaymentParamsBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// merchant information
	MerchantInformation *OctCreatePaymentParamsBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	OrderInformation *OctCreatePaymentParamsBodyOrderInformation `json:"orderInformation,omitempty"`

	// payment information
	PaymentInformation *OctCreatePaymentParamsBodyPaymentInformation `json:"paymentInformation,omitempty"`

	// processing information
	ProcessingInformation *OctCreatePaymentParamsBodyProcessingInformation `json:"processingInformation,omitempty"`

	// recipient information
	RecipientInformation *OctCreatePaymentParamsBodyRecipientInformation `json:"recipientInformation,omitempty"`

	// sender information
	SenderInformation *OctCreatePaymentParamsBodySenderInformation `json:"senderInformation,omitempty"`
}

// Validate validates this oct create payment body
func (o *OctCreatePaymentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipientInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSenderInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentBody) validateClientReferenceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateOrderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validatePaymentInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentInformation) { // not required
		return nil
	}

	if o.PaymentInformation != nil {
		if err := o.PaymentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateRecipientInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.RecipientInformation) { // not required
		return nil
	}

	if o.RecipientInformation != nil {
		if err := o.RecipientInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentBody) validateSenderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.SenderInformation) { // not required
		return nil
	}

	if o.SenderInformation != nil {
		if err := o.SenderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "senderInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentBody) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBody ptsV2PayoutsPost201Response
swagger:model OctCreatePaymentCreatedBody
*/
type OctCreatePaymentCreatedBody struct {

	// links
	Links *OctCreatePaymentCreatedBodyLinks `json:"_links,omitempty"`

	// client reference information
	ClientReferenceInformation *OctCreatePaymentCreatedBodyClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// error information
	ErrorInformation *OctCreatePaymentCreatedBodyErrorInformation `json:"errorInformation,omitempty"`

	// An unique identification number assigned by CyberSource to identify the submitted request. It is also appended to the endpoint of the resource.
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// merchant information
	MerchantInformation *OctCreatePaymentCreatedBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// order information
	OrderInformation *OctCreatePaymentCreatedBodyOrderInformation `json:"orderInformation,omitempty"`

	// processor information
	ProcessorInformation *OctCreatePaymentCreatedBodyProcessorInformation `json:"processorInformation,omitempty"`

	// recipient information
	RecipientInformation *OctCreatePaymentCreatedBodyRecipientInformation `json:"recipientInformation,omitempty"`

	// Cybersource or merchant generated transaction reference number. This is sent to the processor and is echoed back in the response to the merchant. This is
	// This value is used for reconciliation purposes.
	//
	// Max Length: 25
	ReconciliationID string `json:"reconciliationId,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - ACCEPTED
	//  - DECLINED
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. `Format: YYYY-MM-DDThh:mm:ssZ`
	//
	// Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the
	// time. The Z indicates UTC.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this oct create payment created body
func (o *OctCreatePaymentCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecipientInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateClientReferenceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ClientReferenceInformation) { // not required
		return nil
	}

	if o.ClientReferenceInformation != nil {
		if err := o.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateErrorInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ErrorInformation) { // not required
		return nil
	}

	if o.ErrorInformation != nil {
		if err := o.ErrorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "errorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"id", "body", string(o.ID), 26); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateOrderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateProcessorInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessorInformation) { // not required
		return nil
	}

	if o.ProcessorInformation != nil {
		if err := o.ProcessorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "processorInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateRecipientInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.RecipientInformation) { // not required
		return nil
	}

	if o.RecipientInformation != nil {
		if err := o.RecipientInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentCreatedBody) validateReconciliationID(formats strfmt.Registry) error {

	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"reconciliationId", "body", string(o.ReconciliationID), 25); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBody) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyClientReferenceInformation oct create payment created body client reference information
swagger:model OctCreatePaymentCreatedBodyClientReferenceInformation
*/
type OctCreatePaymentCreatedBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// For information about tracking orders, see "Tracking and Reconciling Your Orders" in [Getting Started with CyberSource Advanced for the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Getting_Started_SCMP/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`

	// Merchant ID that was used to create the subscription or customer profile for which the service was requested.
	//
	// If your CyberSource account is enabled for Recurring Billing, this field is returned only if you are using
	// subscription sharing and if your merchant ID is in the same merchant ID pool as the owner merchant ID.
	//
	// If your CyberSource account is enabled for Payment Tokenization, this field is returned only if you are using
	// profile sharing and if your merchant ID is in the same merchant ID pool as the owner merchant ID.
	//
	// For details about how this field is used for Recurring Billing or Payment Tokenization, see the `ecp_debit_owner_merchant_id` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	OwnerMerchantID string `json:"ownerMerchantId,omitempty"`

	// Date and time at your physical location.
	//
	// Format: `YYYYMMDDhhmmss`, where YYYY = year, MM = month, DD = day, hh = hour, mm = minutes ss = seconds
	//
	// Max Length: 14
	SubmitLocalDateTime string `json:"submitLocalDateTime,omitempty"`
}

// Validate validates this oct create payment created body client reference information
func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitLocalDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"clientReferenceInformation"+"."+"code", "body", string(o.Code), 50); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) validateSubmitLocalDateTime(formats strfmt.Registry) error {

	if swag.IsZero(o.SubmitLocalDateTime) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"clientReferenceInformation"+"."+"submitLocalDateTime", "body", string(o.SubmitLocalDateTime), 14); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyErrorInformation oct create payment created body error information
swagger:model OctCreatePaymentCreatedBodyErrorInformation
*/
type OctCreatePaymentCreatedBodyErrorInformation struct {

	// details
	Details []*OctCreatePaymentCreatedBodyErrorInformationDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - EXPIRED_CARD
	//  - PROCESSOR_DECLINED
	//  - STOLEN_LOST_CARD
	//  - UNAUTHORIZED_CARD
	//  - CVN_NOT_MATCH
	//  - INVALID_CVN
	//  - BLACKLISTED_CUSTOMER
	//  - INVALID_ACCOUNT
	//  - GENERAL_DECLINE
	//  - RISK_CONTROL_DECLINE
	//  - PROCESSOR_RISK_CONTROL_DECLINE
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this oct create payment created body error information
func (o *OctCreatePaymentCreatedBodyErrorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyErrorInformation) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("octCreatePaymentCreated" + "." + "errorInformation" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyErrorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyErrorInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyErrorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyErrorInformationDetailsItems0 oct create payment created body error information details items0
swagger:model OctCreatePaymentCreatedBodyErrorInformationDetailsItems0
*/
type OctCreatePaymentCreatedBodyErrorInformationDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this oct create payment created body error information details items0
func (o *OctCreatePaymentCreatedBodyErrorInformationDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyErrorInformationDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyErrorInformationDetailsItems0) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyErrorInformationDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyLinks oct create payment created body links
swagger:model OctCreatePaymentCreatedBodyLinks
*/
type OctCreatePaymentCreatedBodyLinks struct {

	// self
	Self *OctCreatePaymentCreatedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this oct create payment created body links
func (o *OctCreatePaymentCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyLinksSelf oct create payment created body links self
swagger:model OctCreatePaymentCreatedBodyLinksSelf
*/
type OctCreatePaymentCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this oct create payment created body links self
func (o *OctCreatePaymentCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyMerchantInformation oct create payment created body merchant information
swagger:model OctCreatePaymentCreatedBodyMerchantInformation
*/
type OctCreatePaymentCreatedBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this oct create payment created body merchant information
func (o *OctCreatePaymentCreatedBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor oct create payment created body merchant information merchant descriptor
swagger:model OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor
*/
type OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor struct {

	// Merchant's country.
	//
	// For the descriptions, used-by information, data types, and lengths for these fields, see the `merchant_descriptor_country` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Merchant's City.
	//
	// For the descriptions, used-by information, data types, and lengths for these fields, see the `merchant_descriptor_city` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 13
	Locality string `json:"locality,omitempty"`

	// Merchant's name.
	//
	// For more details about the merchant-related fields, see the `merchant_descriptor` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.
	//
	Name string `json:"name,omitempty"`
}

// Validate validates this oct create payment created body merchant information merchant descriptor
func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"locality", "body", string(o.Locality), 13); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyOrderInformation oct create payment created body order information
swagger:model OctCreatePaymentCreatedBodyOrderInformation
*/
type OctCreatePaymentCreatedBodyOrderInformation struct {

	// amount details
	AmountDetails *OctCreatePaymentCreatedBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`
}

// Validate validates this oct create payment created body order information
func (o *OctCreatePaymentCreatedBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyOrderInformationAmountDetails oct create payment created body order information amount details
swagger:model OctCreatePaymentCreatedBodyOrderInformationAmountDetails
*/
type OctCreatePaymentCreatedBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// This is a multicurrency field. It contains the transaction amount (field 4), converted to the Currency used to bill the cardholder’s account.
	//
	// Max Length: 12
	SettlementAmount string `json:"settlementAmount,omitempty"`

	// This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer to bill the cardholder's account.
	//
	// Max Length: 3
	SettlementCurrency string `json:"settlementCurrency,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### DCC for First Data
	// Not used.
	//
	// #### Invoicing
	// Grand total for the order, this is required for creating a new invoice.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this oct create payment created body order information amount details
func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettlementCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) validateSettlementAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.SettlementAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"settlementAmount", "body", string(o.SettlementAmount), 12); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) validateSettlementCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.SettlementCurrency) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"settlementCurrency", "body", string(o.SettlementCurrency), 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", string(o.TotalAmount), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyProcessorInformation oct create payment created body processor information
swagger:model OctCreatePaymentCreatedBodyProcessorInformation
*/
type OctCreatePaymentCreatedBodyProcessorInformation struct {

	// Issuer-generated approval code for the transaction.
	// Max Length: 6
	ApprovalCode string `json:"approvalCode,omitempty"`

	// Transaction status from the processor.
	// Max Length: 10
	ResponseCode string `json:"responseCode,omitempty"`

	// Used by Visa only and contains the response source/reason code that identifies the source of the response decision.
	//
	// Max Length: 1
	ResponseCodeSource string `json:"responseCodeSource,omitempty"`

	// This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.
	//
	// #### American Express Direct
	//
	// System trace audit number (STAN). This value identifies the transaction and is useful when investigating a
	// chargeback dispute.
	//
	// #### CyberSource through VisaNet
	//
	// System trace number that must be printed on the customer’s receipt.
	//
	// For details, see `receipt_number` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 6
	SystemTraceAuditNumber string `json:"systemTraceAuditNumber,omitempty"`

	// Network transaction identifier (TID). This value can be used to identify a specific transaction when
	// you are discussing the transaction with your processor.
	//
	// Max Length: 15
	TransactionID string `json:"transactionId,omitempty"`
}

// Validate validates this oct create payment created body processor information
func (o *OctCreatePaymentCreatedBodyProcessorInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApprovalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseCodeSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSystemTraceAuditNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateApprovalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.ApprovalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"approvalCode", "body", string(o.ApprovalCode), 6); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateResponseCode(formats strfmt.Registry) error {

	if swag.IsZero(o.ResponseCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"responseCode", "body", string(o.ResponseCode), 10); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateResponseCodeSource(formats strfmt.Registry) error {

	if swag.IsZero(o.ResponseCodeSource) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"responseCodeSource", "body", string(o.ResponseCodeSource), 1); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateSystemTraceAuditNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.SystemTraceAuditNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"systemTraceAuditNumber", "body", string(o.SystemTraceAuditNumber), 6); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyProcessorInformation) validateTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.TransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"processorInformation"+"."+"transactionId", "body", string(o.TransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyProcessorInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyProcessorInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyProcessorInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyRecipientInformation oct create payment created body recipient information
swagger:model OctCreatePaymentCreatedBodyRecipientInformation
*/
type OctCreatePaymentCreatedBodyRecipientInformation struct {

	// card
	Card *OctCreatePaymentCreatedBodyRecipientInformationCard `json:"card,omitempty"`
}

// Validate validates this oct create payment created body recipient information
func (o *OctCreatePaymentCreatedBodyRecipientInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyRecipientInformation) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentCreated" + "." + "recipientInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyRecipientInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyRecipientInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyRecipientInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentCreatedBodyRecipientInformationCard oct create payment created body recipient information card
swagger:model OctCreatePaymentCreatedBodyRecipientInformationCard
*/
type OctCreatePaymentCreatedBodyRecipientInformationCard struct {

	// This field shows the available balance in the prepaid account.
	// Acquirers always receive the available balance in the transaction currency.
	//
	// Max Length: 12
	Balance string `json:"balance,omitempty"`

	// This is a multicurrency-only field. It contains a 3-digit numeric code that identifies the currency used by the issuer.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`
}

// Validate validates this oct create payment created body recipient information card
func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) validateBalance(formats strfmt.Registry) error {

	if swag.IsZero(o.Balance) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"recipientInformation"+"."+"card"+"."+"balance", "body", string(o.Balance), 12); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentCreated"+"."+"recipientInformation"+"."+"card"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentCreatedBodyRecipientInformationCard) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentCreatedBodyRecipientInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyClientReferenceInformation oct create payment params body client reference information
swagger:model OctCreatePaymentParamsBodyClientReferenceInformation
*/
type OctCreatePaymentParamsBodyClientReferenceInformation struct {

	// Client-generated order reference or tracking number. CyberSource recommends that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// For information about tracking orders, see "Tracking and Reconciling Your Orders" in [Getting Started with CyberSource Advanced for the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Getting_Started_SCMP/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this oct create payment params body client reference information
func (o *OctCreatePaymentParamsBodyClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"clientReferenceInformation"+"."+"code", "body", string(o.Code), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyMerchantInformation oct create payment params body merchant information
swagger:model OctCreatePaymentParamsBodyMerchantInformation
*/
type OctCreatePaymentParamsBodyMerchantInformation struct {

	// The value for this field is a four-digit number that the payment card industry uses to classify
	// merchants into market segments. A payment card company assigned one or more of these values to your business when you started
	// accepting the payment card company’s cards. When you do not include this field in your request, CyberSource uses the value in your
	// CyberSource account.
	//
	// For processor-specific information, see the `merchant_category_code` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### CyberSource through VisaNet
	// The value for this field corresponds to the following data in the TC 33 capture file5:
	// - Record: CP01 TCR4
	// - Position: 150-153
	// - Field: Merchant Category Code
	//
	// Maximum: 9999
	CategoryCode int64 `json:"categoryCode,omitempty"`

	// merchant descriptor
	MerchantDescriptor *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`

	// Time that the transaction was submitted in local time. The time is in hhmmss format.
	//
	SubmitLocalDateTime string `json:"submitLocalDateTime,omitempty"`

	// Your government-assigned tax identification number.
	//
	// For CtV processors, the maximum length is 20.
	//
	// For other processor-specific information, see the `merchant_vat_registration_number` field description in
	// [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
	//
	// Max Length: 21
	VatRegistrationNumber string `json:"vatRegistrationNumber,omitempty"`
}

// Validate validates this oct create payment params body merchant information
func (o *OctCreatePaymentParamsBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCategoryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVatRegistrationNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformation) validateCategoryCode(formats strfmt.Registry) error {

	if swag.IsZero(o.CategoryCode) { // not required
		return nil
	}

	if err := validate.MaximumInt("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"categoryCode", "body", int64(o.CategoryCode), 9999, false); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformation) validateVatRegistrationNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.VatRegistrationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"vatRegistrationNumber", "body", string(o.VatRegistrationNumber), 21); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor oct create payment params body merchant information merchant descriptor
swagger:model OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor
*/
type OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor struct {

	// The state where the merchant is located.
	//
	// For the descriptions, used-by information, data types, and lengths for these fields, see the `merchant_descriptor_state` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Merchant State. For the descriptions, used-by information, data types, and lengths for these fields, see Merchant Descriptors
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 3
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// For the descriptions, used-by information, data types, and lengths for these fields, see `merchant_descriptor_contact` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)-->
	// Contact information for the merchant.
	//
	// **Note** These are the maximum data lengths for the following payment processors:
	// - FDCCompass (13)
	// - Paymentech (13)
	//
	// Max Length: 14
	Contact string `json:"contact,omitempty"`

	// Merchant's country.
	//
	// For the descriptions, used-by information, data types, and lengths for these fields, see the `merchant_descriptor_country` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Merchant's City.
	//
	// For the descriptions, used-by information, data types, and lengths for these fields, see the `merchant_descriptor_city` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 13
	Locality string `json:"locality,omitempty"`

	// Merchant's name.
	//
	// For more details about the merchant-related fields, see the `merchant_descriptor` field description in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// **Note** For Paymentech processor using Cybersource Payouts, the maximum data length is 22.
	//
	Name string `json:"name,omitempty"`

	// Merchant's postal code.
	//
	// For the descriptions, used-by information, data types, and lengths for these fields, see the `merchant_descriptor_postal_code` field description
	// in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 14
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this oct create payment params body merchant information merchant descriptor
func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validateContact(formats strfmt.Registry) error {

	if swag.IsZero(o.Contact) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"contact", "body", string(o.Contact), 14); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"locality", "body", string(o.Locality), 13); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"postalCode", "body", string(o.PostalCode), 14); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyOrderInformation oct create payment params body order information
swagger:model OctCreatePaymentParamsBodyOrderInformation
*/
type OctCreatePaymentParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *OctCreatePaymentParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// bill to
	BillTo *OctCreatePaymentParamsBodyOrderInformationBillTo `json:"billTo,omitempty"`
}

// Validate validates this oct create payment params body order information
func (o *OctCreatePaymentParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformation) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyOrderInformationAmountDetails oct create payment params body order information amount details
swagger:model OctCreatePaymentParamsBodyOrderInformationAmountDetails
*/
type OctCreatePaymentParamsBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// surcharge
	Surcharge *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge `json:"surcharge,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### DCC for First Data
	// Not used.
	//
	// #### Invoicing
	// Grand total for the order, this is required for creating a new invoice.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this oct create payment params body order information amount details
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSurcharge(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) validateSurcharge(formats strfmt.Registry) error {

	if swag.IsZero(o.Surcharge) { // not required
		return nil
	}

	if o.Surcharge != nil {
		if err := o.Surcharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "orderInformation" + "." + "amountDetails" + "." + "surcharge")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", string(o.TotalAmount), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge oct create payment params body order information amount details surcharge
swagger:model OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge
*/
type OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge struct {

	// The surcharge amount is included in the total transaction amount but is passed in a separate field to the issuer and acquirer for tracking. The issuer can provide information about the surcharge amount to the customer.
	//
	// If the amount is positive, then it is a debit for the customer.\
	// If the amount is negative, then it is a credit for the customer.
	//
	// **NOTE**: This field is supported only for CyberSource through VisaNet (CtV) for Payouts. For CtV, the maximum string length is 8.
	//
	// For processor-specific information, see the surcharge_amount field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 15
	Amount string `json:"amount,omitempty"`
}

// Validate validates this oct create payment params body order information amount details surcharge
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"surcharge"+"."+"amount", "body", string(o.Amount), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyOrderInformationAmountDetailsSurcharge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyOrderInformationBillTo oct create payment params body order information bill to
swagger:model OctCreatePaymentParamsBodyOrderInformationBillTo
*/
type OctCreatePaymentParamsBodyOrderInformationBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate billing street address 1 and billing street address 2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts: This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `bill_address1` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions
	// This value is used for AVS.
	//
	// #### CyberSource through VisaNet
	// **Important** When you populate billing street address 1 and billing street address 2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks.
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// For processor-specific information, see the `bill_address2` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// For Payouts: This field may be sent only for FDC Compass.
	//
	// ##### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `bill_state` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `bill_country` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer’s first name. This name must be the same as the name on the card.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_firstname` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. This name must be the same as the name on the card.
	//
	// #### CyberSource Latin American Processing
	// **Important** For an authorization request, CyberSource Latin American Processing concatenates `orderInformation.billTo.firstName` and `orderInformation.billTo.lastName`. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\
	// **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// For processor-specific information, see the `customer_lastname` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// For processor-specific information, see the `bill_city` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer’s phone number.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// CyberSource recommends that you include the country code when the order is from outside the U.S.
	//
	// For processor-specific information, see the customer_phone field in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Customer's phone number type.
	//
	// #### For Payouts:
	// This field may be sent only for FDC Compass.
	//
	// Possible Values:
	// * day
	// * home
	// * night
	// * work
	//
	PhoneType string `json:"phoneType,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// #### For Payouts:
	//  This field may be sent only for FDC Compass.
	//
	// #### American Express Direct
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// #### Atos
	// This field must not contain colons (:).
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// For processor-specific information, see the `bill_zip` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this oct create payment params body order information bill to
func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"orderInformation"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyOrderInformationBillTo) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyOrderInformationBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyPaymentInformation oct create payment params body payment information
swagger:model OctCreatePaymentParamsBodyPaymentInformation
*/
type OctCreatePaymentParamsBodyPaymentInformation struct {

	// card
	Card *OctCreatePaymentParamsBodyPaymentInformationCard `json:"card,omitempty"`

	// customer
	Customer *OctCreatePaymentParamsBodyPaymentInformationCustomer `json:"customer,omitempty"`
}

// Validate validates this oct create payment params body payment information
func (o *OctCreatePaymentParamsBodyPaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformation) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "paymentInformation" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyPaymentInformationCard oct create payment params body payment information card
swagger:model OctCreatePaymentParamsBodyPaymentInformationCard
*/
type OctCreatePaymentParamsBodyPaymentInformationCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`01` through `12`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (_type_=039), if there is no expiration date on the card, use `12`.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_cc_expmo` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// #### Barclays and Streamline
	// For Maestro (UK Domestic) and Maestro (International) cards on Barclays and Streamline, this must be a valid value (`1900` through `3000`) but is not required to be a valid expiration date. In other words, an expiration date that is in the past does not cause CyberSource to reject your request. However, an invalid expiration date might cause the issuer to reject your request.
	//
	// #### Encoded Account Numbers
	// For encoded account numbers (**_type_**`=039`), if there is no expiration date on the card, use `2021`.
	//
	// #### FDC Nashville Global and FDMS South
	// You can send in 2 digits or 4 digits. If you send in 2 digits, they must be the last 2 digits of the year.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_cc_expyr` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s payment card number, also knows as the Primary Account Nunmber (PAN). You can also use this field
	// for encoded account numbers.
	//
	// For processor-specific information, see the `customer_cc_number` field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// Max Length: 20
	Number string `json:"number,omitempty"`

	// Flag that specifies the type of account associated with the card. The cardholder provides this information
	// during the payment process.
	//
	// This field is required in the following cases:
	//   - Debit transactions on Cielo and Comercio Latino.
	//   - Transactions with Brazilian-issued cards on CyberSource through VisaNet.
	//   - Applicable only for CyberSource through VisaNet (CtV).
	//
	// **Note** Combo cards in Brazil contain credit and debit functionality in a single card. Visa systems use a credit bank
	// identification number (BIN) for this type of card. Using the BIN to determine whether a card is debit or
	// credit can cause transactions with these cards to be processed incorrectly. CyberSource strongly recommends
	// that you include this field for combo card transactions.
	//
	// Possible values include the following.
	//
	//  - `CHECKING`: Checking account
	//  - `CREDIT`: Credit card account
	//  - `SAVING`: Saving account
	//  - `LINE_OF_CREDIT`: Line of credit or credit portion of combo card
	//  - `PREPAID`: Prepaid card account or prepaid portion of combo card
	//  - `UNIVERSAL`: Universal account
	//
	// Max Length: 20
	SourceAccountType string `json:"sourceAccountType,omitempty"`

	// Three-digit value that indicates the card type.
	//
	// Type of card to authorize.
	// - 001 Visa
	// - 002 Mastercard
	// - 003 Amex
	// - 004 Discover
	// - 005: Diners Club
	// - 007: JCB
	// - 024: Maestro (UK Domestic)
	// - 039 Encoded account number
	// - 042: Maestro (International)
	//
	// For the complete list of possible values, see `card_type` field description in the [Credit Card Services Using the SCMP API Guide.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this oct create payment params body payment information card
func (o *OctCreatePaymentParamsBodyPaymentInformationCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceAccountType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"card"+"."+"number", "body", string(o.Number), 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyPaymentInformationCard) validateSourceAccountType(formats strfmt.Registry) error {

	if swag.IsZero(o.SourceAccountType) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"paymentInformation"+"."+"card"+"."+"sourceAccountType", "body", string(o.SourceAccountType), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationCard) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformationCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyPaymentInformationCustomer oct create payment params body payment information customer
swagger:model OctCreatePaymentParamsBodyPaymentInformationCustomer
*/
type OctCreatePaymentParamsBodyPaymentInformationCustomer struct {

	// Unique identifier for the customer's card and billing information.
	//
	// When you use Payment Tokenization or Recurring Billing and you include this value in
	// your request, many of the fields that are normally required for an authorization or credit
	// become optional.
	//
	// **NOTE** When you use Payment Tokenization or Recurring Billing, the value for the Customer ID is actually the Cybersource payment token for a customer. This token stores information such as the consumer’s card number so it can be applied towards bill payments, recurring payments, or one-time payments. By using this token in a payment API request, the merchant doesn't need to pass in data such as the card number or expiration date in the request itself.
	//
	// For details, see the `subscription_id` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	CustomerID string `json:"customerId,omitempty"`
}

// Validate validates this oct create payment params body payment information customer
func (o *OctCreatePaymentParamsBodyPaymentInformationCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyPaymentInformationCustomer) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyPaymentInformationCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyProcessingInformation oct create payment params body processing information
swagger:model OctCreatePaymentParamsBodyProcessingInformation
*/
type OctCreatePaymentParamsBodyProcessingInformation struct {

	// Payouts transaction type.
	//
	// Applicable Processors: FDC Compass, Paymentech, CtV
	//
	// Possible values:
	//
	// **Credit Card Bill Payment**
	//
	//  - **CP**: credit card bill payment
	//
	// **Funds Disbursement**
	//
	//  - **FD**: funds disbursement
	//  - **GD**: government disbursement
	//  - **MD**: merchant disbursement
	//
	// **Money Transfer**
	//
	//  - **AA**: account to account. Sender and receiver are same person.
	//  - **PP**: person to person. Sender and receiver are different.
	//
	// **Prepaid Load**
	//
	//  - **TU**: top up
	//
	// Max Length: 2
	BusinessApplicationID string `json:"businessApplicationId,omitempty"`

	// Type of transaction.
	//
	// Some payment card companies use this information when determining discount rates. When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value listed here.
	//
	// For details, see the `e_commerce_indicator` field description in the [Credit Card Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Possible value for Payouts:
	// - internet
	//
	// #### Ingenico ePayments
	// Ingenico ePayments was previously called _Global Collect_.
	//
	// #### Payer Authentication Transactions
	// For the possible values and requirements, see "Payer Authentication" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// #### Other Types of Transactions
	// For details, see "Commerce Indicators" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)
	//
	// Max Length: 13
	CommerceIndicator string `json:"commerceIndicator,omitempty"`

	// This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to get the attributes for specified networks only.
	// The networks specified in this field must be a subset of the information provided during program enrollment. Refer to Sharing Group Code/Network Routing Order.
	// Note: Supported only in US for domestic transactions involving Push Payments Gateway Service.
	//
	// VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the network routing order.
	// If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer’s preference.
	// If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer’s routing priorities.
	//
	// See https://developer.visa.com/request_response_codes#network_id_and_sharing_group_code , under section 'Network ID and Sharing Group Code' on the left panel for available values
	//
	// Max Length: 30
	NetworkRoutingOrder string `json:"networkRoutingOrder,omitempty"`

	// payouts options
	PayoutsOptions *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions `json:"payoutsOptions,omitempty"`

	// Please check with Cybersource customer support to see if your merchant account is configured correctly so you
	// can include this field in your request.
	// * For Payouts: max length for FDCCompass is String (22).
	//
	// Max Length: 60
	ReconciliationID string `json:"reconciliationId,omitempty"`
}

// Validate validates this oct create payment params body processing information
func (o *OctCreatePaymentParamsBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBusinessApplicationID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommerceIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkRoutingOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePayoutsOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReconciliationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateBusinessApplicationID(formats strfmt.Registry) error {

	if swag.IsZero(o.BusinessApplicationID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"businessApplicationId", "body", string(o.BusinessApplicationID), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateCommerceIndicator(formats strfmt.Registry) error {

	if swag.IsZero(o.CommerceIndicator) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"commerceIndicator", "body", string(o.CommerceIndicator), 13); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateNetworkRoutingOrder(formats strfmt.Registry) error {

	if swag.IsZero(o.NetworkRoutingOrder) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"networkRoutingOrder", "body", string(o.NetworkRoutingOrder), 30); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validatePayoutsOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.PayoutsOptions) { // not required
		return nil
	}

	if o.PayoutsOptions != nil {
		if err := o.PayoutsOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "processingInformation" + "." + "payoutsOptions")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformation) validateReconciliationID(formats strfmt.Registry) error {

	if swag.IsZero(o.ReconciliationID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"reconciliationId", "body", string(o.ReconciliationID), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions oct create payment params body processing information payouts options
swagger:model OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions
*/
type OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions struct {

	// Visa-generated transaction identifier (TID) that is unique for each original authorization and financial request.
	// * Applicable only for CTV for Payouts.
	//
	// Max Length: 15
	AccountFundingReferenceID string `json:"accountFundingReferenceId,omitempty"`

	// This code identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant or ADM or dispensed cash.
	// This number is usually Visa-assigned.
	// * Applicable only for CTV for Payouts.
	//
	// Max Length: 11
	AcquirerBin string `json:"acquirerBin,omitempty"`

	// This field identifies the card acceptor for defining the point of service terminal in both local and interchange environments. An acquirer-assigned code identifying the card acceptor for the transaction.
	// Depending on the acquirer and merchant billing and reporting requirements, the code can represent a merchant, a specific merchant location, or a specific merchant location terminal.
	// Acquiring Institution Identification Code uniquely identifies the merchant.
	// The value from the original is required in any subsequent messages, including reversals, chargebacks, and representments.
	// * Applicable only for CTV for Payouts.
	//
	// Max Length: 15
	AcquirerMerchantID string `json:"acquirerMerchantId,omitempty"`

	// This field contains a number that is used with other data elements as a key to identify and track all messages related to a given cardholder transaction;
	// that is, to a given transaction set.
	//
	// Format:
	//   Positions 1-4: The yddd equivalent of the date, where y = 0-9 and ddd = 001 – 366.
	//   Positions 5-12: A unique identification number generated by the merchant
	//
	// * Applicable only for CTV for Payouts.
	//
	// Max Length: 12
	RetrievalReferenceNumber string `json:"retrievalReferenceNumber,omitempty"`
}

// Validate validates this oct create payment params body processing information payouts options
func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountFundingReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAcquirerBin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAcquirerMerchantID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRetrievalReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateAccountFundingReferenceID(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountFundingReferenceID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"accountFundingReferenceId", "body", string(o.AccountFundingReferenceID), 15); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateAcquirerBin(formats strfmt.Registry) error {

	if swag.IsZero(o.AcquirerBin) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"acquirerBin", "body", string(o.AcquirerBin), 11); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateAcquirerMerchantID(formats strfmt.Registry) error {

	if swag.IsZero(o.AcquirerMerchantID) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"acquirerMerchantId", "body", string(o.AcquirerMerchantID), 15); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) validateRetrievalReferenceNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.RetrievalReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"processingInformation"+"."+"payoutsOptions"+"."+"retrievalReferenceNumber", "body", string(o.RetrievalReferenceNumber), 12); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyProcessingInformationPayoutsOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodyRecipientInformation oct create payment params body recipient information
swagger:model OctCreatePaymentParamsBodyRecipientInformation
*/
type OctCreatePaymentParamsBodyRecipientInformation struct {

	// Recipient address information. Required only for FDCCompass.
	// Max Length: 50
	Address1 string `json:"address1,omitempty"`

	// Recipient State. Required only for FDCCompass.
	// Max Length: 3
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Recipient country code. Required only for FDCCompass.
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Recipient date of birth in YYYYMMDD format. Required only for FDCCompass.
	// Max Length: 8
	// Min Length: 8
	DateOfBirth string `json:"dateOfBirth,omitempty"`

	// First name of recipient.
	// characters.
	// * CTV (14)
	// * Paymentech (30)
	//
	// Max Length: 35
	FirstName string `json:"firstName,omitempty"`

	// Last name of recipient.
	// characters.
	// * CTV (14)
	// * Paymentech (30)
	//
	// Max Length: 35
	LastName string `json:"lastName,omitempty"`

	// Recipient city. Required only for FDCCompass.
	// Max Length: 25
	Locality string `json:"locality,omitempty"`

	// Middle Initial of recipient. Required only for FDCCompass.
	//
	// Max Length: 1
	MiddleInitial string `json:"middleInitial,omitempty"`

	// Recipient phone number. Required only for FDCCompass.
	// Max Length: 20
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Recipient postal code. Required only for FDCCompass.
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this oct create payment params body recipient information
func (o *OctCreatePaymentParamsBodyRecipientInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleInitial(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"address1", "body", string(o.Address1), 50); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 3); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateDateOfBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"dateOfBirth", "body", string(o.DateOfBirth), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"dateOfBirth", "body", string(o.DateOfBirth), 8); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"firstName", "body", string(o.FirstName), 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"lastName", "body", string(o.LastName), 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"locality", "body", string(o.Locality), 25); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validateMiddleInitial(formats strfmt.Registry) error {

	if swag.IsZero(o.MiddleInitial) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"middleInitial", "body", string(o.MiddleInitial), 1); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"phoneNumber", "body", string(o.PhoneNumber), 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodyRecipientInformation) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"recipientInformation"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyRecipientInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodyRecipientInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodyRecipientInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodySenderInformation oct create payment params body sender information
swagger:model OctCreatePaymentParamsBodySenderInformation
*/
type OctCreatePaymentParamsBodySenderInformation struct {

	// account
	Account *OctCreatePaymentParamsBodySenderInformationAccount `json:"account,omitempty"`

	// Street address of sender.
	//
	// **Funds Disbursement**
	//
	// This value is the address of the originator sending the funds disbursement.
	//
	// Max Length: 50
	Address1 string `json:"address1,omitempty"`

	// Sender’s state. Use the State, Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 2
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Country of sender. Use the ISO Standard Country Codes.
	// * CTV (3)
	//
	// Max Length: 2
	CountryCode string `json:"countryCode,omitempty"`

	// Sender’s date of birth in YYYYMMDD format. Required only for FDCCompass.
	// Max Length: 8
	// Min Length: 8
	DateOfBirth string `json:"dateOfBirth,omitempty"`

	// First name of sender (Optional).
	// * CTV (14)
	// * Paymentech (30)
	//
	// Max Length: 35
	FirstName string `json:"firstName,omitempty"`

	// Recipient last name (Optional).
	// * CTV (14)
	// * Paymentech (30)
	//
	// Max Length: 35
	LastName string `json:"lastName,omitempty"`

	// City of sender.
	//
	// **Funds Disbursement**
	//
	// This value is the city of the originator sending the funds disbursement.
	//
	// Max Length: 25
	Locality string `json:"locality,omitempty"`

	// Recipient middle initial (Optional).
	//
	// Max Length: 1
	MiddleInitial string `json:"middleInitial,omitempty"`

	// Name of sender.
	//
	// **Funds Disbursement**
	//
	// This value is the name of the originator sending the funds disbursement.
	// * CTV, Paymentech (30)
	//
	// Max Length: 24
	Name string `json:"name,omitempty"`

	// Sender’s phone number. Required only for FDCCompass.
	// Max Length: 20
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Sender’s postal code. Required only for FDCCompass.
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`

	// Reference number generated by you that uniquely identifies the sender.
	// Max Length: 19
	ReferenceNumber string `json:"referenceNumber,omitempty"`

	// Customer's government-assigned tax identification number.
	//
	// Max Length: 13
	VatRegistrationNumber string `json:"vatRegistrationNumber,omitempty"`
}

// Validate validates this oct create payment params body sender information
func (o *OctCreatePaymentParamsBodySenderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleInitial(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReferenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVatRegistrationNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.Account) { // not required
		return nil
	}

	if o.Account != nil {
		if err := o.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("octCreatePaymentRequest" + "." + "senderInformation" + "." + "account")
			}
			return err
		}
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"address1", "body", string(o.Address1), 50); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(o.CountryCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"countryCode", "body", string(o.CountryCode), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateDateOfBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"dateOfBirth", "body", string(o.DateOfBirth), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"dateOfBirth", "body", string(o.DateOfBirth), 8); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"firstName", "body", string(o.FirstName), 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"lastName", "body", string(o.LastName), 35); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"locality", "body", string(o.Locality), 25); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateMiddleInitial(formats strfmt.Registry) error {

	if swag.IsZero(o.MiddleInitial) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"middleInitial", "body", string(o.MiddleInitial), 1); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"name", "body", string(o.Name), 24); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"phoneNumber", "body", string(o.PhoneNumber), 20); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateReferenceNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.ReferenceNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"referenceNumber", "body", string(o.ReferenceNumber), 19); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformation) validateVatRegistrationNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.VatRegistrationNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"vatRegistrationNumber", "body", string(o.VatRegistrationNumber), 13); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodySenderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodySenderInformation) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodySenderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OctCreatePaymentParamsBodySenderInformationAccount oct create payment params body sender information account
swagger:model OctCreatePaymentParamsBodySenderInformationAccount
*/
type OctCreatePaymentParamsBodySenderInformationAccount struct {

	// Source of funds. Possible values:
	//
	//   Paymentech, CTV, FDC Compass:
	//  - 01: Credit card
	//  - 02: Debit card
	//  - 03: Prepaid card
	//
	//   Paymentech, CTV -
	//  - 04: Cash
	//  - 05: Debit or deposit account that is not linked to a Visa card. Includes checking accounts, savings
	//        accounts, and proprietary debit or ATM cards.
	//  - 06: Credit account that is not linked to a Visa card. Includes credit cards and proprietary lines
	//        of credit.
	//
	//   FDCCompass -
	//   - 04: Deposit Account
	//
	// **Funds Disbursement**
	//
	// This value is most likely 05 to identify that the originator used a deposit account to fund the
	// disbursement.
	//
	// **Credit Card Bill Payment**
	//
	// This value must be 02, 03, 04, or 05.
	//
	// Max Length: 2
	// Min Length: 2
	FundsSource string `json:"fundsSource,omitempty"`

	// The account number of the entity funding the transaction. It is the sender’s account number. It can
	// be a debit/credit card account number or bank account number.
	//
	// **Funds disbursements**
	//
	// This field is optional.
	//
	// **All other transactions**
	//
	// This field is required when the sender funds the transaction with a financial instrument, for example
	// debit card.
	// Length:
	// * FDCCompass (<= 19)
	// * Paymentech (<= 16)
	//
	// Max Length: 34
	Number string `json:"number,omitempty"`
}

// Validate validates this oct create payment params body sender information account
func (o *OctCreatePaymentParamsBodySenderInformationAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFundsSource(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformationAccount) validateFundsSource(formats strfmt.Registry) error {

	if swag.IsZero(o.FundsSource) { // not required
		return nil
	}

	if err := validate.MinLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"account"+"."+"fundsSource", "body", string(o.FundsSource), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"account"+"."+"fundsSource", "body", string(o.FundsSource), 2); err != nil {
		return err
	}

	return nil
}

func (o *OctCreatePaymentParamsBodySenderInformationAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("octCreatePaymentRequest"+"."+"senderInformation"+"."+"account"+"."+"number", "body", string(o.Number), 34); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodySenderInformationAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OctCreatePaymentParamsBodySenderInformationAccount) UnmarshalBinary(b []byte) error {
	var res OctCreatePaymentParamsBodySenderInformationAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
