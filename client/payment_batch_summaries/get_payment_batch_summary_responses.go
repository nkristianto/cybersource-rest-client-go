// Code generated by go-swagger; DO NOT EDIT.

package payment_batch_summaries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPaymentBatchSummaryReader is a Reader for the GetPaymentBatchSummary structure.
type GetPaymentBatchSummaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaymentBatchSummaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaymentBatchSummaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaymentBatchSummaryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPaymentBatchSummaryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPaymentBatchSummaryOK creates a GetPaymentBatchSummaryOK with default headers values
func NewGetPaymentBatchSummaryOK() *GetPaymentBatchSummaryOK {
	return &GetPaymentBatchSummaryOK{}
}

/*GetPaymentBatchSummaryOK handles this case with default header values.

Ok
*/
type GetPaymentBatchSummaryOK struct {
	Payload *GetPaymentBatchSummaryOKBody
}

func (o *GetPaymentBatchSummaryOK) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/payment-batch-summaries][%d] getPaymentBatchSummaryOK  %+v", 200, o.Payload)
}

func (o *GetPaymentBatchSummaryOK) GetPayload() *GetPaymentBatchSummaryOKBody {
	return o.Payload
}

func (o *GetPaymentBatchSummaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPaymentBatchSummaryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentBatchSummaryBadRequest creates a GetPaymentBatchSummaryBadRequest with default headers values
func NewGetPaymentBatchSummaryBadRequest() *GetPaymentBatchSummaryBadRequest {
	return &GetPaymentBatchSummaryBadRequest{}
}

/*GetPaymentBatchSummaryBadRequest handles this case with default header values.

Invalid request
*/
type GetPaymentBatchSummaryBadRequest struct {
	Payload *GetPaymentBatchSummaryBadRequestBody
}

func (o *GetPaymentBatchSummaryBadRequest) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/payment-batch-summaries][%d] getPaymentBatchSummaryBadRequest  %+v", 400, o.Payload)
}

func (o *GetPaymentBatchSummaryBadRequest) GetPayload() *GetPaymentBatchSummaryBadRequestBody {
	return o.Payload
}

func (o *GetPaymentBatchSummaryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPaymentBatchSummaryBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentBatchSummaryNotFound creates a GetPaymentBatchSummaryNotFound with default headers values
func NewGetPaymentBatchSummaryNotFound() *GetPaymentBatchSummaryNotFound {
	return &GetPaymentBatchSummaryNotFound{}
}

/*GetPaymentBatchSummaryNotFound handles this case with default header values.

Payment Batch Summary not found
*/
type GetPaymentBatchSummaryNotFound struct {
}

func (o *GetPaymentBatchSummaryNotFound) Error() string {
	return fmt.Sprintf("[GET /reporting/v3/payment-batch-summaries][%d] getPaymentBatchSummaryNotFound ", 404)
}

func (o *GetPaymentBatchSummaryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DetailsItems0 Provides failed validation input field detail
//
swagger:model DetailsItems0
*/
type DetailsItems0 struct {

	// Field in request that caused an error
	//
	Field string `json:"field,omitempty"`

	// Documented reason code
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this details items0
func (o *DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentBatchSummaryBadRequestBody reportingV3PaymentBatchSummariesGet200Response
//
// HTTP status code for client application
swagger:model GetPaymentBatchSummaryBadRequestBody
*/
type GetPaymentBatchSummaryBadRequestBody struct {

	// Error field list
	//
	// Required: true
	Details []*DetailsItems0 `json:"details"`

	// Short descriptive message to the user.
	//
	// Required: true
	Message *string `json:"message"`

	// Documented reason code
	//
	// Required: true
	Reason *string `json:"reason"`

	// Time of request in UTC.
	//
	// Required: true
	// Format: date-time
	SubmitTimeUtc *strfmt.DateTime `json:"submitTimeUtc"`
}

// Validate validates this get payment batch summary bad request body
func (o *GetPaymentBatchSummaryBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubmitTimeUtc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentBatchSummaryBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("getPaymentBatchSummaryBadRequest"+"."+"details", "body", o.Details); err != nil {
		return err
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentBatchSummaryBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPaymentBatchSummaryBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getPaymentBatchSummaryBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentBatchSummaryBadRequestBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("getPaymentBatchSummaryBadRequest"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentBatchSummaryBadRequestBody) validateSubmitTimeUtc(formats strfmt.Registry) error {

	if err := validate.Required("getPaymentBatchSummaryBadRequest"+"."+"submitTimeUtc", "body", o.SubmitTimeUtc); err != nil {
		return err
	}

	if err := validate.FormatOf("getPaymentBatchSummaryBadRequest"+"."+"submitTimeUtc", "body", "date-time", o.SubmitTimeUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentBatchSummaryBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentBatchSummaryBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentBatchSummaryBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentBatchSummaryOKBody reportingV3PaymentBatchSummariesGet200Response
swagger:model GetPaymentBatchSummaryOKBody
*/
type GetPaymentBatchSummaryOKBody struct {

	// end time
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// payment batch summaries
	PaymentBatchSummaries []*PaymentBatchSummariesItems0 `json:"paymentBatchSummaries"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`
}

// Validate validates this get payment batch summary o k body
func (o *GetPaymentBatchSummaryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaymentBatchSummaries(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentBatchSummaryOKBody) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(o.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("getPaymentBatchSummaryOK"+"."+"endTime", "body", "date-time", o.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentBatchSummaryOKBody) validatePaymentBatchSummaries(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentBatchSummaries) { // not required
		return nil
	}

	for i := 0; i < len(o.PaymentBatchSummaries); i++ {
		if swag.IsZero(o.PaymentBatchSummaries[i]) { // not required
			continue
		}

		if o.PaymentBatchSummaries[i] != nil {
			if err := o.PaymentBatchSummaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentBatchSummaryOK" + "." + "paymentBatchSummaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetPaymentBatchSummaryOKBody) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(o.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("getPaymentBatchSummaryOK"+"."+"startTime", "body", "date-time", o.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentBatchSummaryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentBatchSummaryOKBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentBatchSummaryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PaymentBatchSummariesItems0 payment batch summaries items0
swagger:model PaymentBatchSummariesItems0
*/
type PaymentBatchSummariesItems0 struct {

	// account Id
	AccountID string `json:"accountId,omitempty"`

	// account name
	AccountName string `json:"accountName,omitempty"`

	// credit amount
	CreditAmount string `json:"creditAmount,omitempty"`

	// credit count
	CreditCount int32 `json:"creditCount,omitempty"`

	// currency code
	CurrencyCode string `json:"currencyCode,omitempty"`

	// end time
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// merchant Id
	MerchantID string `json:"merchantId,omitempty"`

	// merchant name
	MerchantName string `json:"merchantName,omitempty"`

	// payment sub type description
	PaymentSubTypeDescription string `json:"paymentSubTypeDescription,omitempty"`

	// sales amount
	SalesAmount string `json:"salesAmount,omitempty"`

	// sales count
	SalesCount int32 `json:"salesCount,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`
}

// Validate validates this payment batch summaries items0
func (o *PaymentBatchSummariesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PaymentBatchSummariesItems0) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(o.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", o.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PaymentBatchSummariesItems0) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(o.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", o.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PaymentBatchSummariesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PaymentBatchSummariesItems0) UnmarshalBinary(b []byte) error {
	var res PaymentBatchSummariesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
