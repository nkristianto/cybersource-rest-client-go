// Code generated by go-swagger; DO NOT EDIT.

package payment_batch_summaries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPaymentBatchSummaryParams creates a new GetPaymentBatchSummaryParams object
// with the default values initialized.
func NewGetPaymentBatchSummaryParams() *GetPaymentBatchSummaryParams {
	var ()
	return &GetPaymentBatchSummaryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPaymentBatchSummaryParamsWithTimeout creates a new GetPaymentBatchSummaryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPaymentBatchSummaryParamsWithTimeout(timeout time.Duration) *GetPaymentBatchSummaryParams {
	var ()
	return &GetPaymentBatchSummaryParams{

		timeout: timeout,
	}
}

// NewGetPaymentBatchSummaryParamsWithContext creates a new GetPaymentBatchSummaryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPaymentBatchSummaryParamsWithContext(ctx context.Context) *GetPaymentBatchSummaryParams {
	var ()
	return &GetPaymentBatchSummaryParams{

		Context: ctx,
	}
}

// NewGetPaymentBatchSummaryParamsWithHTTPClient creates a new GetPaymentBatchSummaryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPaymentBatchSummaryParamsWithHTTPClient(client *http.Client) *GetPaymentBatchSummaryParams {
	var ()
	return &GetPaymentBatchSummaryParams{
		HTTPClient: client,
	}
}

/*GetPaymentBatchSummaryParams contains all the parameters to send to the API endpoint
for the get payment batch summary operation typically these are written to a http.Request
*/
type GetPaymentBatchSummaryParams struct {

	/*Breakdown
	  Conditional - Breakdown on account_rollup/all_merchant/selected_merchant. Required while getting breakdown data for a Merchant.

	*/
	Breakdown *string
	/*EndTime
	  Valid report End Time in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	**Example date format:**
	  - yyyy-MM-dd'T'HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)


	*/
	EndTime strfmt.DateTime
	/*OrganizationID
	  Valid Cybersource Organization Id

	*/
	OrganizationID *string
	/*RollUp
	  Conditional - RollUp for data for day/week/month. Required while getting breakdown data for a Merchant

	*/
	RollUp *string
	/*StartDayOfWeek
	  Optional - Start day of week to breakdown data for weeks in a month

	*/
	StartDayOfWeek *int32
	/*StartTime
	  Valid report Start Time in **ISO 8601 format**
	Please refer the following link to know more about ISO 8601 format.[Rfc Date Format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

	**Example date format:**
	  - yyyy-MM-dd'T'HH:mm:ss.SSSZ (e.g. 2018-01-01T00:00:00.000Z)


	*/
	StartTime strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithTimeout(timeout time.Duration) *GetPaymentBatchSummaryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithContext(ctx context.Context) *GetPaymentBatchSummaryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithHTTPClient(client *http.Client) *GetPaymentBatchSummaryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBreakdown adds the breakdown to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithBreakdown(breakdown *string) *GetPaymentBatchSummaryParams {
	o.SetBreakdown(breakdown)
	return o
}

// SetBreakdown adds the breakdown to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetBreakdown(breakdown *string) {
	o.Breakdown = breakdown
}

// WithEndTime adds the endTime to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithEndTime(endTime strfmt.DateTime) *GetPaymentBatchSummaryParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetEndTime(endTime strfmt.DateTime) {
	o.EndTime = endTime
}

// WithOrganizationID adds the organizationID to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithOrganizationID(organizationID *string) *GetPaymentBatchSummaryParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetOrganizationID(organizationID *string) {
	o.OrganizationID = organizationID
}

// WithRollUp adds the rollUp to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithRollUp(rollUp *string) *GetPaymentBatchSummaryParams {
	o.SetRollUp(rollUp)
	return o
}

// SetRollUp adds the rollUp to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetRollUp(rollUp *string) {
	o.RollUp = rollUp
}

// WithStartDayOfWeek adds the startDayOfWeek to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithStartDayOfWeek(startDayOfWeek *int32) *GetPaymentBatchSummaryParams {
	o.SetStartDayOfWeek(startDayOfWeek)
	return o
}

// SetStartDayOfWeek adds the startDayOfWeek to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetStartDayOfWeek(startDayOfWeek *int32) {
	o.StartDayOfWeek = startDayOfWeek
}

// WithStartTime adds the startTime to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) WithStartTime(startTime strfmt.DateTime) *GetPaymentBatchSummaryParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get payment batch summary params
func (o *GetPaymentBatchSummaryParams) SetStartTime(startTime strfmt.DateTime) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetPaymentBatchSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Breakdown != nil {

		// query param breakdown
		var qrBreakdown string
		if o.Breakdown != nil {
			qrBreakdown = *o.Breakdown
		}
		qBreakdown := qrBreakdown
		if qBreakdown != "" {
			if err := r.SetQueryParam("breakdown", qBreakdown); err != nil {
				return err
			}
		}

	}

	// query param endTime
	qrEndTime := o.EndTime
	qEndTime := qrEndTime.String()
	if qEndTime != "" {
		if err := r.SetQueryParam("endTime", qEndTime); err != nil {
			return err
		}
	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID string
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := qrOrganizationID
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}

	}

	if o.RollUp != nil {

		// query param rollUp
		var qrRollUp string
		if o.RollUp != nil {
			qrRollUp = *o.RollUp
		}
		qRollUp := qrRollUp
		if qRollUp != "" {
			if err := r.SetQueryParam("rollUp", qRollUp); err != nil {
				return err
			}
		}

	}

	if o.StartDayOfWeek != nil {

		// query param startDayOfWeek
		var qrStartDayOfWeek int32
		if o.StartDayOfWeek != nil {
			qrStartDayOfWeek = *o.StartDayOfWeek
		}
		qStartDayOfWeek := swag.FormatInt32(qrStartDayOfWeek)
		if qStartDayOfWeek != "" {
			if err := r.SetQueryParam("startDayOfWeek", qStartDayOfWeek); err != nil {
				return err
			}
		}

	}

	// query param startTime
	qrStartTime := o.StartTime
	qStartTime := qrStartTime.String()
	if qStartTime != "" {
		if err := r.SetQueryParam("startTime", qStartTime); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
