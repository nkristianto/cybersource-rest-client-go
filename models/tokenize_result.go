// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TokenizeResult tokenize result
//
// swagger:model TokenizeResult
type TokenizeResult struct {

	// The card type.
	CardType string `json:"cardType,omitempty"`

	// discoverable services
	DiscoverableServices map[string]interface{} `json:"discoverableServices,omitempty"`

	// The Key ID.
	KeyID string `json:"keyId,omitempty"`

	// The masked card number displaying the first 6 digits and the last 4 digits.
	MaskedPan string `json:"maskedPan,omitempty"`

	// Flex-generated digital signature. To ensure the values have not been tampered with while passing through the client, verify this server-side using the public key generated from the /keys resource.
	Signature string `json:"signature,omitempty"`

	// Indicates which fields from the response make up the data that is used when verifying the response signature. See the [sample code] (https://github.com/CyberSource/cybersource-flex-samples/blob/master/java/spring-boot/src/main/java/com/cybersource/flex/application/CheckoutController.java) on how to verify the signature.
	SignedFields string `json:"signedFields,omitempty"`

	// The UTC date and time in milliseconds at which the signature was generated.
	Timestamp int64 `json:"timestamp,omitempty"`

	// The generated token. The token replaces card data and is used as the Subscription ID in the CyberSource Simple Order API or SCMP API.
	Token string `json:"token,omitempty"`
}

// Validate validates this tokenize result
func (m *TokenizeResult) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TokenizeResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenizeResult) UnmarshalBinary(b []byte) error {
	var res TokenizeResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
