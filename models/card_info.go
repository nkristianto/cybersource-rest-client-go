// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardInfo card info
//
// swagger:model CardInfo
type CardInfo struct {

	// Two digit expiration month
	CardExpirationMonth string `json:"cardExpirationMonth,omitempty"`

	// Four digit expiration year
	CardExpirationYear string `json:"cardExpirationYear,omitempty"`

	// Encrypted or plain text card number. If the encryption type of “None” was used in the Generate Key request, this value can be set to the plaintext card number/Personal Account Number (PAN). If the encryption type of RsaOaep256 was used in the Generate Key request, this value needs to be the RSA OAEP 256 encrypted card number. The card number should be encrypted on the cardholders’ device. The [WebCrypto API] (https://github.com/CyberSource/cybersource-flex-samples/blob/master/java/spring-boot/src/main/resources/public/flex.js) can be used with the JWK obtained in the Generate Key request.
	// Required: true
	CardNumber *string `json:"cardNumber"`

	// Card Type. This field is required. Refer to the CyberSource Credit Card Services documentation for supported card types.
	// Required: true
	CardType *string `json:"cardType"`
}

// Validate validates this card info
func (m *CardInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCardType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardInfo) validateCardNumber(formats strfmt.Registry) error {

	if err := validate.Required("cardNumber", "body", m.CardNumber); err != nil {
		return err
	}

	return nil
}

func (m *CardInfo) validateCardType(formats strfmt.Registry) error {

	if err := validate.Required("cardType", "body", m.CardType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardInfo) UnmarshalBinary(b []byte) error {
	var res CardInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
