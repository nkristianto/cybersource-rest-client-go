// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KeyResult key result
//
// swagger:model KeyResult
type KeyResult struct {

	// der
	Der *KeyResultDer `json:"der,omitempty"`

	// jwk
	Jwk *KeyResultJwk `json:"jwk,omitempty"`

	// Unique identifier for the generated token. Used in the subsequent Tokenize Card request from your customerâ€™s device or browser.
	KeyID string `json:"keyId,omitempty"`
}

// Validate validates this key result
func (m *KeyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyResult) validateDer(formats strfmt.Registry) error {

	if swag.IsZero(m.Der) { // not required
		return nil
	}

	if m.Der != nil {
		if err := m.Der.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("der")
			}
			return err
		}
	}

	return nil
}

func (m *KeyResult) validateJwk(formats strfmt.Registry) error {

	if swag.IsZero(m.Jwk) { // not required
		return nil
	}

	if m.Jwk != nil {
		if err := m.Jwk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwk")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyResult) UnmarshalBinary(b []byte) error {
	var res KeyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// KeyResultDer The public key in DER format. Used to validate the response from the Tokenize Card request. Additionally this format is useful for client side encryption in Android and iOS implementations.
//
// swagger:model KeyResultDer
type KeyResultDer struct {

	// Algorithm used to encrypt the public key.
	Algorithm string `json:"algorithm,omitempty"`

	// Specifies the format of the public key; currently X.509.
	Format string `json:"format,omitempty"`

	// Base64 encoded public key value.
	PublicKey string `json:"publicKey,omitempty"`
}

// Validate validates this key result der
func (m *KeyResultDer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KeyResultDer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyResultDer) UnmarshalBinary(b []byte) error {
	var res KeyResultDer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// KeyResultJwk The public key in JSON Web Key (JWK) format. This format is useful for client side encryption in JavaScript based implementations.
//
// swagger:model KeyResultJwk
type KeyResultJwk struct {

	// JWK RSA Exponent
	E string `json:"e,omitempty"`

	// The key ID in JWK format.
	Kid string `json:"kid,omitempty"`

	// Algorithm used to encrypt the public key.
	Kty string `json:"kty,omitempty"`

	// JWK RSA Modulus
	N string `json:"n,omitempty"`

	// Defines whether to use the key for encryption (enc) or verifying a signature (sig). Always returned as enc.
	Use string `json:"use,omitempty"`
}

// Validate validates this key result jwk
func (m *KeyResultJwk) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KeyResultJwk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyResultJwk) UnmarshalBinary(b []byte) error {
	var res KeyResultJwk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
