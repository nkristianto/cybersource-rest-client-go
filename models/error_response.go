// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ErrorResponse error response
//
// swagger:model ErrorResponse
type ErrorResponse struct {

	// links
	Links *ErrorResponseLinks `json:"_links,omitempty"`

	// response status
	ResponseStatus *ErrorResponseResponseStatus `json:"responseStatus,omitempty"`
}

// Validate validates this error response
func (m *ErrorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorResponse) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ErrorResponse) validateResponseStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ResponseStatus) { // not required
		return nil
	}

	if m.ResponseStatus != nil {
		if err := m.ResponseStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responseStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponse) UnmarshalBinary(b []byte) error {
	var res ErrorResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorResponseLinks error response links
//
// swagger:model ErrorResponseLinks
type ErrorResponseLinks struct {

	// documentation
	Documentation []*ErrorResponseLinksDocumentationItems0 `json:"documentation"`

	// next
	Next []*ErrorResponseLinksNextItems0 `json:"next"`

	// self
	Self *ErrorResponseLinksSelf `json:"self,omitempty"`
}

// Validate validates this error response links
func (m *ErrorResponseLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocumentation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorResponseLinks) validateDocumentation(formats strfmt.Registry) error {

	if swag.IsZero(m.Documentation) { // not required
		return nil
	}

	for i := 0; i < len(m.Documentation); i++ {
		if swag.IsZero(m.Documentation[i]) { // not required
			continue
		}

		if m.Documentation[i] != nil {
			if err := m.Documentation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_links" + "." + "documentation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ErrorResponseLinks) validateNext(formats strfmt.Registry) error {

	if swag.IsZero(m.Next) { // not required
		return nil
	}

	for i := 0; i < len(m.Next); i++ {
		if swag.IsZero(m.Next[i]) { // not required
			continue
		}

		if m.Next[i] != nil {
			if err := m.Next[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_links" + "." + "next" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ErrorResponseLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponseLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponseLinks) UnmarshalBinary(b []byte) error {
	var res ErrorResponseLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorResponseLinksDocumentationItems0 error response links documentation items0
//
// swagger:model ErrorResponseLinksDocumentationItems0
type ErrorResponseLinksDocumentationItems0 struct {

	// URI of the linked resource.
	Href string `json:"href,omitempty"`

	// HTTP method of the linked resource.
	Method string `json:"method,omitempty"`

	// Label of the linked resource.
	Title string `json:"title,omitempty"`
}

// Validate validates this error response links documentation items0
func (m *ErrorResponseLinksDocumentationItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponseLinksDocumentationItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponseLinksDocumentationItems0) UnmarshalBinary(b []byte) error {
	var res ErrorResponseLinksDocumentationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorResponseLinksNextItems0 error response links next items0
//
// swagger:model ErrorResponseLinksNextItems0
type ErrorResponseLinksNextItems0 struct {

	// URI of the linked resource.
	Href string `json:"href,omitempty"`

	// HTTP method of the linked resource.
	Method string `json:"method,omitempty"`

	// Label of the linked resource.
	Title string `json:"title,omitempty"`
}

// Validate validates this error response links next items0
func (m *ErrorResponseLinksNextItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponseLinksNextItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponseLinksNextItems0) UnmarshalBinary(b []byte) error {
	var res ErrorResponseLinksNextItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorResponseLinksSelf error response links self
//
// swagger:model ErrorResponseLinksSelf
type ErrorResponseLinksSelf struct {

	// URI of the linked resource.
	Href string `json:"href,omitempty"`

	// HTTP method of the linked resource.
	Method string `json:"method,omitempty"`

	// Label of the linked resource.
	Title string `json:"title,omitempty"`
}

// Validate validates this error response links self
func (m *ErrorResponseLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponseLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponseLinksSelf) UnmarshalBinary(b []byte) error {
	var res ErrorResponseLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorResponseResponseStatus error response response status
//
// swagger:model ErrorResponseResponseStatus
type ErrorResponseResponseStatus struct {

	// API correlation ID.
	CorrelationID string `json:"correlationId,omitempty"`

	// details
	Details []*ErrorResponseResponseStatusDetailsItems0 `json:"details"`

	// Error Message.
	Message string `json:"message,omitempty"`

	// Error Reason Code.
	Reason string `json:"reason,omitempty"`

	// HTTP Status code.
	Status float64 `json:"status,omitempty"`
}

// Validate validates this error response response status
func (m *ErrorResponseResponseStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ErrorResponseResponseStatus) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	for i := 0; i < len(m.Details); i++ {
		if swag.IsZero(m.Details[i]) { // not required
			continue
		}

		if m.Details[i] != nil {
			if err := m.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("responseStatus" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponseResponseStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponseResponseStatus) UnmarshalBinary(b []byte) error {
	var res ErrorResponseResponseStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorResponseResponseStatusDetailsItems0 error response response status details items0
//
// swagger:model ErrorResponseResponseStatusDetailsItems0
type ErrorResponseResponseStatusDetailsItems0 struct {

	// Field name referred to for validation issues.
	Location string `json:"location,omitempty"`

	// Description or code of any error response.
	Message string `json:"message,omitempty"`
}

// Validate validates this error response response status details items0
func (m *ErrorResponseResponseStatusDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorResponseResponseStatusDetailsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorResponseResponseStatusDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ErrorResponseResponseStatusDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
